# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: matrix_io/recognition/v1/recognition_service.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from matrix_io.proto.vision.v1 import vision_service_pb2 as matrix__io_dot_vision_dot_v1_dot_vision__service__pb2
from matrix_io.proto.recognition.v1 import recognition_pb2 as matrix__io_dot_recognition_dot_v1_dot_recognition__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='matrix_io/recognition/v1/recognition_service.proto',
  package='matrix_io.recognition.v1',
  syntax='proto3',
  serialized_pb=_b('\n2matrix_io/recognition/v1/recognition_service.proto\x12\x18matrix_io.recognition.v1\x1a(matrix_io/vision/v1/vision_service.proto\x1a*matrix_io/recognition/v1/recognition.proto\"\xc7\x01\n\x1eStoreFeatureDescriptorsRequest\x12:\n\x0evision_request\x18\x01 \x01(\x0b\x32\".matrix_io.vision.v1.VisionRequest\x12\x0c\n\x04tags\x18\x02 \x03(\t\x12H\n\x13\x66\x65\x61ture_descriptors\x18\x03 \x03(\x0b\x32+.matrix_io.recognition.v1.FeatureDescriptor\x12\x11\n\tdevice_id\x18\x04 \x03(\t\"0\n\x1fStoreFeatureDescriptorsResponse\x12\r\n\x05uuids\x18\x01 \x03(\t\"g\n\x1cGetFeatureDescriptorsRequest\x12\r\n\x05uuids\x18\x01 \x03(\t\x12\x0c\n\x04tags\x18\x02 \x03(\t\x12\x11\n\tdevice_id\x18\x03 \x01(\t\x12\x17\n\x0fnext_page_token\x18\x04 \x01(\t\"\x8a\x01\n\x1dGetFeatureDescriptorsResponse\x12P\n\x17\x66\x65\x61ture_descriptor_list\x18\x01 \x01(\x0b\x32/.matrix_io.recognition.v1.FeatureDescriptorList\x12\x17\n\x0fnext_page_token\x18\x02 \x01(\t\">\n\x1f\x44\x65leteFeatureDescriptorsRequest\x12\r\n\x05uuids\x18\x01 \x03(\t\x12\x0c\n\x04tags\x18\x02 \x03(\t\"1\n DeleteFeatureDescriptorsResponse\x12\r\n\x05uuids\x18\x01 \x03(\t\"\xc4\x01\n\x10RecognizeRequest\x12:\n\x0evision_request\x18\x01 \x01(\x0b\x32\".matrix_io.vision.v1.VisionRequest\x12P\n\x17\x66\x65\x61ture_descriptor_list\x18\x02 \x01(\x0b\x32/.matrix_io.recognition.v1.FeatureDescriptorList\x12\"\n\x1amatching_algorithm_version\x18\x03 \x01(\t\"5\n\x16\x46\x65\x61tureDescriptorMatch\x12\x0c\n\x04tags\x18\x01 \x03(\t\x12\r\n\x05score\x18\x02 \x01(\x02\"V\n\x11RecognizeResponse\x12\x41\n\x07matches\x18\x01 \x03(\x0b\x32\x30.matrix_io.recognition.v1.FeatureDescriptorMatch\"4\n\x1fGetFeatureDescriptorTagsRequest\x12\x11\n\tdevice_id\x18\x01 \x03(\t\"A\n\x1e\x46\x65\x61tureDescriptorTagsForDevice\x12\x0c\n\x04tags\x18\x01 \x03(\t\x12\x11\n\tdevice_id\x18\x02 \x01(\t\"}\n GetFeatureDescriptorTagsResponse\x12Y\n\x17\x66\x65\x61ture_tags_for_device\x18\x01 \x03(\x0b\x32\x38.matrix_io.recognition.v1.FeatureDescriptorTagsForDevice2\xc8\x05\n\x12RecognitionService\x12\x90\x01\n\x17StoreFeatureDescriptors\x12\x38.matrix_io.recognition.v1.StoreFeatureDescriptorsRequest\x1a\x39.matrix_io.recognition.v1.StoreFeatureDescriptorsResponse\"\x00\x12\x8a\x01\n\x15GetFeatureDescriptors\x12\x36.matrix_io.recognition.v1.GetFeatureDescriptorsRequest\x1a\x37.matrix_io.recognition.v1.GetFeatureDescriptorsResponse\"\x00\x12\x93\x01\n\x18\x44\x65leteFeatureDescriptors\x12\x39.matrix_io.recognition.v1.DeleteFeatureDescriptorsRequest\x1a:.matrix_io.recognition.v1.DeleteFeatureDescriptorsResponse\"\x00\x12\x93\x01\n\x18GetFeatureDescriptorTags\x12\x39.matrix_io.recognition.v1.GetFeatureDescriptorTagsRequest\x1a:.matrix_io.recognition.v1.GetFeatureDescriptorTagsResponse\"\x00\x12\x66\n\tRecognize\x12*.matrix_io.recognition.v1.RecognizeRequest\x1a+.matrix_io.recognition.v1.RecognizeResponse\"\x00\x42R\n\x1b\x63om.matrixio.recognition.v1B\x17RecognitionServiceProtoP\x01\xaa\x02\x17MatrixIO.Recognition.V1b\x06proto3')
  ,
  dependencies=[matrix__io_dot_vision_dot_v1_dot_vision__service__pb2.DESCRIPTOR,matrix__io_dot_recognition_dot_v1_dot_recognition__pb2.DESCRIPTOR,])




_STOREFEATUREDESCRIPTORSREQUEST = _descriptor.Descriptor(
  name='StoreFeatureDescriptorsRequest',
  full_name='matrix_io.recognition.v1.StoreFeatureDescriptorsRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='vision_request', full_name='matrix_io.recognition.v1.StoreFeatureDescriptorsRequest.vision_request', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='tags', full_name='matrix_io.recognition.v1.StoreFeatureDescriptorsRequest.tags', index=1,
      number=2, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='feature_descriptors', full_name='matrix_io.recognition.v1.StoreFeatureDescriptorsRequest.feature_descriptors', index=2,
      number=3, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='device_id', full_name='matrix_io.recognition.v1.StoreFeatureDescriptorsRequest.device_id', index=3,
      number=4, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=167,
  serialized_end=366,
)


_STOREFEATUREDESCRIPTORSRESPONSE = _descriptor.Descriptor(
  name='StoreFeatureDescriptorsResponse',
  full_name='matrix_io.recognition.v1.StoreFeatureDescriptorsResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='uuids', full_name='matrix_io.recognition.v1.StoreFeatureDescriptorsResponse.uuids', index=0,
      number=1, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=368,
  serialized_end=416,
)


_GETFEATUREDESCRIPTORSREQUEST = _descriptor.Descriptor(
  name='GetFeatureDescriptorsRequest',
  full_name='matrix_io.recognition.v1.GetFeatureDescriptorsRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='uuids', full_name='matrix_io.recognition.v1.GetFeatureDescriptorsRequest.uuids', index=0,
      number=1, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='tags', full_name='matrix_io.recognition.v1.GetFeatureDescriptorsRequest.tags', index=1,
      number=2, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='device_id', full_name='matrix_io.recognition.v1.GetFeatureDescriptorsRequest.device_id', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='next_page_token', full_name='matrix_io.recognition.v1.GetFeatureDescriptorsRequest.next_page_token', index=3,
      number=4, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=418,
  serialized_end=521,
)


_GETFEATUREDESCRIPTORSRESPONSE = _descriptor.Descriptor(
  name='GetFeatureDescriptorsResponse',
  full_name='matrix_io.recognition.v1.GetFeatureDescriptorsResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='feature_descriptor_list', full_name='matrix_io.recognition.v1.GetFeatureDescriptorsResponse.feature_descriptor_list', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='next_page_token', full_name='matrix_io.recognition.v1.GetFeatureDescriptorsResponse.next_page_token', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=524,
  serialized_end=662,
)


_DELETEFEATUREDESCRIPTORSREQUEST = _descriptor.Descriptor(
  name='DeleteFeatureDescriptorsRequest',
  full_name='matrix_io.recognition.v1.DeleteFeatureDescriptorsRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='uuids', full_name='matrix_io.recognition.v1.DeleteFeatureDescriptorsRequest.uuids', index=0,
      number=1, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='tags', full_name='matrix_io.recognition.v1.DeleteFeatureDescriptorsRequest.tags', index=1,
      number=2, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=664,
  serialized_end=726,
)


_DELETEFEATUREDESCRIPTORSRESPONSE = _descriptor.Descriptor(
  name='DeleteFeatureDescriptorsResponse',
  full_name='matrix_io.recognition.v1.DeleteFeatureDescriptorsResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='uuids', full_name='matrix_io.recognition.v1.DeleteFeatureDescriptorsResponse.uuids', index=0,
      number=1, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=728,
  serialized_end=777,
)


_RECOGNIZEREQUEST = _descriptor.Descriptor(
  name='RecognizeRequest',
  full_name='matrix_io.recognition.v1.RecognizeRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='vision_request', full_name='matrix_io.recognition.v1.RecognizeRequest.vision_request', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='feature_descriptor_list', full_name='matrix_io.recognition.v1.RecognizeRequest.feature_descriptor_list', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='matching_algorithm_version', full_name='matrix_io.recognition.v1.RecognizeRequest.matching_algorithm_version', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=780,
  serialized_end=976,
)


_FEATUREDESCRIPTORMATCH = _descriptor.Descriptor(
  name='FeatureDescriptorMatch',
  full_name='matrix_io.recognition.v1.FeatureDescriptorMatch',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='tags', full_name='matrix_io.recognition.v1.FeatureDescriptorMatch.tags', index=0,
      number=1, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='score', full_name='matrix_io.recognition.v1.FeatureDescriptorMatch.score', index=1,
      number=2, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=978,
  serialized_end=1031,
)


_RECOGNIZERESPONSE = _descriptor.Descriptor(
  name='RecognizeResponse',
  full_name='matrix_io.recognition.v1.RecognizeResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='matches', full_name='matrix_io.recognition.v1.RecognizeResponse.matches', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1033,
  serialized_end=1119,
)


_GETFEATUREDESCRIPTORTAGSREQUEST = _descriptor.Descriptor(
  name='GetFeatureDescriptorTagsRequest',
  full_name='matrix_io.recognition.v1.GetFeatureDescriptorTagsRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='device_id', full_name='matrix_io.recognition.v1.GetFeatureDescriptorTagsRequest.device_id', index=0,
      number=1, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1121,
  serialized_end=1173,
)


_FEATUREDESCRIPTORTAGSFORDEVICE = _descriptor.Descriptor(
  name='FeatureDescriptorTagsForDevice',
  full_name='matrix_io.recognition.v1.FeatureDescriptorTagsForDevice',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='tags', full_name='matrix_io.recognition.v1.FeatureDescriptorTagsForDevice.tags', index=0,
      number=1, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='device_id', full_name='matrix_io.recognition.v1.FeatureDescriptorTagsForDevice.device_id', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1175,
  serialized_end=1240,
)


_GETFEATUREDESCRIPTORTAGSRESPONSE = _descriptor.Descriptor(
  name='GetFeatureDescriptorTagsResponse',
  full_name='matrix_io.recognition.v1.GetFeatureDescriptorTagsResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='feature_tags_for_device', full_name='matrix_io.recognition.v1.GetFeatureDescriptorTagsResponse.feature_tags_for_device', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1242,
  serialized_end=1367,
)

_STOREFEATUREDESCRIPTORSREQUEST.fields_by_name['vision_request'].message_type = matrix__io_dot_vision_dot_v1_dot_vision__service__pb2._VISIONREQUEST
_STOREFEATUREDESCRIPTORSREQUEST.fields_by_name['feature_descriptors'].message_type = matrix__io_dot_recognition_dot_v1_dot_recognition__pb2._FEATUREDESCRIPTOR
_GETFEATUREDESCRIPTORSRESPONSE.fields_by_name['feature_descriptor_list'].message_type = matrix__io_dot_recognition_dot_v1_dot_recognition__pb2._FEATUREDESCRIPTORLIST
_RECOGNIZEREQUEST.fields_by_name['vision_request'].message_type = matrix__io_dot_vision_dot_v1_dot_vision__service__pb2._VISIONREQUEST
_RECOGNIZEREQUEST.fields_by_name['feature_descriptor_list'].message_type = matrix__io_dot_recognition_dot_v1_dot_recognition__pb2._FEATUREDESCRIPTORLIST
_RECOGNIZERESPONSE.fields_by_name['matches'].message_type = _FEATUREDESCRIPTORMATCH
_GETFEATUREDESCRIPTORTAGSRESPONSE.fields_by_name['feature_tags_for_device'].message_type = _FEATUREDESCRIPTORTAGSFORDEVICE
DESCRIPTOR.message_types_by_name['StoreFeatureDescriptorsRequest'] = _STOREFEATUREDESCRIPTORSREQUEST
DESCRIPTOR.message_types_by_name['StoreFeatureDescriptorsResponse'] = _STOREFEATUREDESCRIPTORSRESPONSE
DESCRIPTOR.message_types_by_name['GetFeatureDescriptorsRequest'] = _GETFEATUREDESCRIPTORSREQUEST
DESCRIPTOR.message_types_by_name['GetFeatureDescriptorsResponse'] = _GETFEATUREDESCRIPTORSRESPONSE
DESCRIPTOR.message_types_by_name['DeleteFeatureDescriptorsRequest'] = _DELETEFEATUREDESCRIPTORSREQUEST
DESCRIPTOR.message_types_by_name['DeleteFeatureDescriptorsResponse'] = _DELETEFEATUREDESCRIPTORSRESPONSE
DESCRIPTOR.message_types_by_name['RecognizeRequest'] = _RECOGNIZEREQUEST
DESCRIPTOR.message_types_by_name['FeatureDescriptorMatch'] = _FEATUREDESCRIPTORMATCH
DESCRIPTOR.message_types_by_name['RecognizeResponse'] = _RECOGNIZERESPONSE
DESCRIPTOR.message_types_by_name['GetFeatureDescriptorTagsRequest'] = _GETFEATUREDESCRIPTORTAGSREQUEST
DESCRIPTOR.message_types_by_name['FeatureDescriptorTagsForDevice'] = _FEATUREDESCRIPTORTAGSFORDEVICE
DESCRIPTOR.message_types_by_name['GetFeatureDescriptorTagsResponse'] = _GETFEATUREDESCRIPTORTAGSRESPONSE
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

StoreFeatureDescriptorsRequest = _reflection.GeneratedProtocolMessageType('StoreFeatureDescriptorsRequest', (_message.Message,), dict(
  DESCRIPTOR = _STOREFEATUREDESCRIPTORSREQUEST,
  __module__ = 'matrix_io.recognition.v1.recognition_service_pb2'
  # @@protoc_insertion_point(class_scope:matrix_io.recognition.v1.StoreFeatureDescriptorsRequest)
  ))
_sym_db.RegisterMessage(StoreFeatureDescriptorsRequest)

StoreFeatureDescriptorsResponse = _reflection.GeneratedProtocolMessageType('StoreFeatureDescriptorsResponse', (_message.Message,), dict(
  DESCRIPTOR = _STOREFEATUREDESCRIPTORSRESPONSE,
  __module__ = 'matrix_io.recognition.v1.recognition_service_pb2'
  # @@protoc_insertion_point(class_scope:matrix_io.recognition.v1.StoreFeatureDescriptorsResponse)
  ))
_sym_db.RegisterMessage(StoreFeatureDescriptorsResponse)

GetFeatureDescriptorsRequest = _reflection.GeneratedProtocolMessageType('GetFeatureDescriptorsRequest', (_message.Message,), dict(
  DESCRIPTOR = _GETFEATUREDESCRIPTORSREQUEST,
  __module__ = 'matrix_io.recognition.v1.recognition_service_pb2'
  # @@protoc_insertion_point(class_scope:matrix_io.recognition.v1.GetFeatureDescriptorsRequest)
  ))
_sym_db.RegisterMessage(GetFeatureDescriptorsRequest)

GetFeatureDescriptorsResponse = _reflection.GeneratedProtocolMessageType('GetFeatureDescriptorsResponse', (_message.Message,), dict(
  DESCRIPTOR = _GETFEATUREDESCRIPTORSRESPONSE,
  __module__ = 'matrix_io.recognition.v1.recognition_service_pb2'
  # @@protoc_insertion_point(class_scope:matrix_io.recognition.v1.GetFeatureDescriptorsResponse)
  ))
_sym_db.RegisterMessage(GetFeatureDescriptorsResponse)

DeleteFeatureDescriptorsRequest = _reflection.GeneratedProtocolMessageType('DeleteFeatureDescriptorsRequest', (_message.Message,), dict(
  DESCRIPTOR = _DELETEFEATUREDESCRIPTORSREQUEST,
  __module__ = 'matrix_io.recognition.v1.recognition_service_pb2'
  # @@protoc_insertion_point(class_scope:matrix_io.recognition.v1.DeleteFeatureDescriptorsRequest)
  ))
_sym_db.RegisterMessage(DeleteFeatureDescriptorsRequest)

DeleteFeatureDescriptorsResponse = _reflection.GeneratedProtocolMessageType('DeleteFeatureDescriptorsResponse', (_message.Message,), dict(
  DESCRIPTOR = _DELETEFEATUREDESCRIPTORSRESPONSE,
  __module__ = 'matrix_io.recognition.v1.recognition_service_pb2'
  # @@protoc_insertion_point(class_scope:matrix_io.recognition.v1.DeleteFeatureDescriptorsResponse)
  ))
_sym_db.RegisterMessage(DeleteFeatureDescriptorsResponse)

RecognizeRequest = _reflection.GeneratedProtocolMessageType('RecognizeRequest', (_message.Message,), dict(
  DESCRIPTOR = _RECOGNIZEREQUEST,
  __module__ = 'matrix_io.recognition.v1.recognition_service_pb2'
  # @@protoc_insertion_point(class_scope:matrix_io.recognition.v1.RecognizeRequest)
  ))
_sym_db.RegisterMessage(RecognizeRequest)

FeatureDescriptorMatch = _reflection.GeneratedProtocolMessageType('FeatureDescriptorMatch', (_message.Message,), dict(
  DESCRIPTOR = _FEATUREDESCRIPTORMATCH,
  __module__ = 'matrix_io.recognition.v1.recognition_service_pb2'
  # @@protoc_insertion_point(class_scope:matrix_io.recognition.v1.FeatureDescriptorMatch)
  ))
_sym_db.RegisterMessage(FeatureDescriptorMatch)

RecognizeResponse = _reflection.GeneratedProtocolMessageType('RecognizeResponse', (_message.Message,), dict(
  DESCRIPTOR = _RECOGNIZERESPONSE,
  __module__ = 'matrix_io.recognition.v1.recognition_service_pb2'
  # @@protoc_insertion_point(class_scope:matrix_io.recognition.v1.RecognizeResponse)
  ))
_sym_db.RegisterMessage(RecognizeResponse)

GetFeatureDescriptorTagsRequest = _reflection.GeneratedProtocolMessageType('GetFeatureDescriptorTagsRequest', (_message.Message,), dict(
  DESCRIPTOR = _GETFEATUREDESCRIPTORTAGSREQUEST,
  __module__ = 'matrix_io.recognition.v1.recognition_service_pb2'
  # @@protoc_insertion_point(class_scope:matrix_io.recognition.v1.GetFeatureDescriptorTagsRequest)
  ))
_sym_db.RegisterMessage(GetFeatureDescriptorTagsRequest)

FeatureDescriptorTagsForDevice = _reflection.GeneratedProtocolMessageType('FeatureDescriptorTagsForDevice', (_message.Message,), dict(
  DESCRIPTOR = _FEATUREDESCRIPTORTAGSFORDEVICE,
  __module__ = 'matrix_io.recognition.v1.recognition_service_pb2'
  # @@protoc_insertion_point(class_scope:matrix_io.recognition.v1.FeatureDescriptorTagsForDevice)
  ))
_sym_db.RegisterMessage(FeatureDescriptorTagsForDevice)

GetFeatureDescriptorTagsResponse = _reflection.GeneratedProtocolMessageType('GetFeatureDescriptorTagsResponse', (_message.Message,), dict(
  DESCRIPTOR = _GETFEATUREDESCRIPTORTAGSRESPONSE,
  __module__ = 'matrix_io.recognition.v1.recognition_service_pb2'
  # @@protoc_insertion_point(class_scope:matrix_io.recognition.v1.GetFeatureDescriptorTagsResponse)
  ))
_sym_db.RegisterMessage(GetFeatureDescriptorTagsResponse)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\033com.matrixio.recognition.v1B\027RecognitionServiceProtoP\001\252\002\027MatrixIO.Recognition.V1'))
try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities


  class RecognitionServiceStub(object):
    # missing associated documentation comment in .proto file
    pass

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.StoreFeatureDescriptors = channel.unary_unary(
          '/matrix_io.recognition.v1.RecognitionService/StoreFeatureDescriptors',
          request_serializer=StoreFeatureDescriptorsRequest.SerializeToString,
          response_deserializer=StoreFeatureDescriptorsResponse.FromString,
          )
      self.GetFeatureDescriptors = channel.unary_unary(
          '/matrix_io.recognition.v1.RecognitionService/GetFeatureDescriptors',
          request_serializer=GetFeatureDescriptorsRequest.SerializeToString,
          response_deserializer=GetFeatureDescriptorsResponse.FromString,
          )
      self.DeleteFeatureDescriptors = channel.unary_unary(
          '/matrix_io.recognition.v1.RecognitionService/DeleteFeatureDescriptors',
          request_serializer=DeleteFeatureDescriptorsRequest.SerializeToString,
          response_deserializer=DeleteFeatureDescriptorsResponse.FromString,
          )
      self.GetFeatureDescriptorTags = channel.unary_unary(
          '/matrix_io.recognition.v1.RecognitionService/GetFeatureDescriptorTags',
          request_serializer=GetFeatureDescriptorTagsRequest.SerializeToString,
          response_deserializer=GetFeatureDescriptorTagsResponse.FromString,
          )
      self.Recognize = channel.unary_unary(
          '/matrix_io.recognition.v1.RecognitionService/Recognize',
          request_serializer=RecognizeRequest.SerializeToString,
          response_deserializer=RecognizeResponse.FromString,
          )


  class RecognitionServiceServicer(object):
    # missing associated documentation comment in .proto file
    pass

    def StoreFeatureDescriptors(self, request, context):
      """Store a descriptor

      The received message may:
      - contain the calculated descriptors
      - contain a VisionRequest with a populated ImageList field
      - contain a VisionRequest with a populated Video field

      The tags field is mandatory for a store call to be successful.
      When device_id field is set, the descriptor will be scoped
      to the given device IDs, meaning that only Recognize() requests from such
      device IDs will match those descriptors.

      Returned Message
      When the save is successful, a list of unique string UUIDs identifying
      the stored descriptors
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetFeatureDescriptors(self, request, context):
      """Obtain a list of descriptors

      Returned Message
      A list of descriptors according to provided uuids, tags and device_id.
      if both uuid and device_id are defined, only descriptors
      associated with the given device ID will be returned. The same
      applies for tags and device_id.

      If no uuid, tags or devices_id fields are defined, all available
      descriptor will be returned.

      An empty list will be returned if no descriptors are found
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def DeleteFeatureDescriptors(self, request, context):
      """Delete descriptors saved under a user account

      Method will delete all descriptors matching provided uuids or tags.
      When matching tags, descriptors matching any tag will be returned.

      When a device_id is provided, only those associated with the device will
      be deleted.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetFeatureDescriptorTags(self, request, context):
      """Request a set of all available descriptor tags for the user account
      grouped by device id
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def Recognize(self, request, context):
      """Request a descriptor match against recognition services.

      For recognize requests to be possible, descriptors must first be
      stored (see StoreFeatureDescriptors method).

      Recognize calls can include a variety of fields:
      - when feature_descriptor_list field is set, it will be used to perform the
      match against stored descriptors.
      - when vision_request field is set, descriptors will first be calculated for
      the images and then matched against stored descriptors.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_RecognitionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'StoreFeatureDescriptors': grpc.unary_unary_rpc_method_handler(
            servicer.StoreFeatureDescriptors,
            request_deserializer=StoreFeatureDescriptorsRequest.FromString,
            response_serializer=StoreFeatureDescriptorsResponse.SerializeToString,
        ),
        'GetFeatureDescriptors': grpc.unary_unary_rpc_method_handler(
            servicer.GetFeatureDescriptors,
            request_deserializer=GetFeatureDescriptorsRequest.FromString,
            response_serializer=GetFeatureDescriptorsResponse.SerializeToString,
        ),
        'DeleteFeatureDescriptors': grpc.unary_unary_rpc_method_handler(
            servicer.DeleteFeatureDescriptors,
            request_deserializer=DeleteFeatureDescriptorsRequest.FromString,
            response_serializer=DeleteFeatureDescriptorsResponse.SerializeToString,
        ),
        'GetFeatureDescriptorTags': grpc.unary_unary_rpc_method_handler(
            servicer.GetFeatureDescriptorTags,
            request_deserializer=GetFeatureDescriptorTagsRequest.FromString,
            response_serializer=GetFeatureDescriptorTagsResponse.SerializeToString,
        ),
        'Recognize': grpc.unary_unary_rpc_method_handler(
            servicer.Recognize,
            request_deserializer=RecognizeRequest.FromString,
            response_serializer=RecognizeResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'matrix_io.recognition.v1.RecognitionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaRecognitionServiceServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    # missing associated documentation comment in .proto file
    pass
    def StoreFeatureDescriptors(self, request, context):
      """Store a descriptor

      The received message may:
      - contain the calculated descriptors
      - contain a VisionRequest with a populated ImageList field
      - contain a VisionRequest with a populated Video field

      The tags field is mandatory for a store call to be successful.
      When device_id field is set, the descriptor will be scoped
      to the given device IDs, meaning that only Recognize() requests from such
      device IDs will match those descriptors.

      Returned Message
      When the save is successful, a list of unique string UUIDs identifying
      the stored descriptors
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetFeatureDescriptors(self, request, context):
      """Obtain a list of descriptors

      Returned Message
      A list of descriptors according to provided uuids, tags and device_id.
      if both uuid and device_id are defined, only descriptors
      associated with the given device ID will be returned. The same
      applies for tags and device_id.

      If no uuid, tags or devices_id fields are defined, all available
      descriptor will be returned.

      An empty list will be returned if no descriptors are found
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def DeleteFeatureDescriptors(self, request, context):
      """Delete descriptors saved under a user account

      Method will delete all descriptors matching provided uuids or tags.
      When matching tags, descriptors matching any tag will be returned.

      When a device_id is provided, only those associated with the device will
      be deleted.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetFeatureDescriptorTags(self, request, context):
      """Request a set of all available descriptor tags for the user account
      grouped by device id
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def Recognize(self, request, context):
      """Request a descriptor match against recognition services.

      For recognize requests to be possible, descriptors must first be
      stored (see StoreFeatureDescriptors method).

      Recognize calls can include a variety of fields:
      - when feature_descriptor_list field is set, it will be used to perform the
      match against stored descriptors.
      - when vision_request field is set, descriptors will first be calculated for
      the images and then matched against stored descriptors.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaRecognitionServiceStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    # missing associated documentation comment in .proto file
    pass
    def StoreFeatureDescriptors(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Store a descriptor

      The received message may:
      - contain the calculated descriptors
      - contain a VisionRequest with a populated ImageList field
      - contain a VisionRequest with a populated Video field

      The tags field is mandatory for a store call to be successful.
      When device_id field is set, the descriptor will be scoped
      to the given device IDs, meaning that only Recognize() requests from such
      device IDs will match those descriptors.

      Returned Message
      When the save is successful, a list of unique string UUIDs identifying
      the stored descriptors
      """
      raise NotImplementedError()
    StoreFeatureDescriptors.future = None
    def GetFeatureDescriptors(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Obtain a list of descriptors

      Returned Message
      A list of descriptors according to provided uuids, tags and device_id.
      if both uuid and device_id are defined, only descriptors
      associated with the given device ID will be returned. The same
      applies for tags and device_id.

      If no uuid, tags or devices_id fields are defined, all available
      descriptor will be returned.

      An empty list will be returned if no descriptors are found
      """
      raise NotImplementedError()
    GetFeatureDescriptors.future = None
    def DeleteFeatureDescriptors(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Delete descriptors saved under a user account

      Method will delete all descriptors matching provided uuids or tags.
      When matching tags, descriptors matching any tag will be returned.

      When a device_id is provided, only those associated with the device will
      be deleted.
      """
      raise NotImplementedError()
    DeleteFeatureDescriptors.future = None
    def GetFeatureDescriptorTags(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Request a set of all available descriptor tags for the user account
      grouped by device id
      """
      raise NotImplementedError()
    GetFeatureDescriptorTags.future = None
    def Recognize(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Request a descriptor match against recognition services.

      For recognize requests to be possible, descriptors must first be
      stored (see StoreFeatureDescriptors method).

      Recognize calls can include a variety of fields:
      - when feature_descriptor_list field is set, it will be used to perform the
      match against stored descriptors.
      - when vision_request field is set, descriptors will first be calculated for
      the images and then matched against stored descriptors.
      """
      raise NotImplementedError()
    Recognize.future = None


  def beta_create_RecognitionService_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('matrix_io.recognition.v1.RecognitionService', 'DeleteFeatureDescriptors'): DeleteFeatureDescriptorsRequest.FromString,
      ('matrix_io.recognition.v1.RecognitionService', 'GetFeatureDescriptorTags'): GetFeatureDescriptorTagsRequest.FromString,
      ('matrix_io.recognition.v1.RecognitionService', 'GetFeatureDescriptors'): GetFeatureDescriptorsRequest.FromString,
      ('matrix_io.recognition.v1.RecognitionService', 'Recognize'): RecognizeRequest.FromString,
      ('matrix_io.recognition.v1.RecognitionService', 'StoreFeatureDescriptors'): StoreFeatureDescriptorsRequest.FromString,
    }
    response_serializers = {
      ('matrix_io.recognition.v1.RecognitionService', 'DeleteFeatureDescriptors'): DeleteFeatureDescriptorsResponse.SerializeToString,
      ('matrix_io.recognition.v1.RecognitionService', 'GetFeatureDescriptorTags'): GetFeatureDescriptorTagsResponse.SerializeToString,
      ('matrix_io.recognition.v1.RecognitionService', 'GetFeatureDescriptors'): GetFeatureDescriptorsResponse.SerializeToString,
      ('matrix_io.recognition.v1.RecognitionService', 'Recognize'): RecognizeResponse.SerializeToString,
      ('matrix_io.recognition.v1.RecognitionService', 'StoreFeatureDescriptors'): StoreFeatureDescriptorsResponse.SerializeToString,
    }
    method_implementations = {
      ('matrix_io.recognition.v1.RecognitionService', 'DeleteFeatureDescriptors'): face_utilities.unary_unary_inline(servicer.DeleteFeatureDescriptors),
      ('matrix_io.recognition.v1.RecognitionService', 'GetFeatureDescriptorTags'): face_utilities.unary_unary_inline(servicer.GetFeatureDescriptorTags),
      ('matrix_io.recognition.v1.RecognitionService', 'GetFeatureDescriptors'): face_utilities.unary_unary_inline(servicer.GetFeatureDescriptors),
      ('matrix_io.recognition.v1.RecognitionService', 'Recognize'): face_utilities.unary_unary_inline(servicer.Recognize),
      ('matrix_io.recognition.v1.RecognitionService', 'StoreFeatureDescriptors'): face_utilities.unary_unary_inline(servicer.StoreFeatureDescriptors),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_RecognitionService_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('matrix_io.recognition.v1.RecognitionService', 'DeleteFeatureDescriptors'): DeleteFeatureDescriptorsRequest.SerializeToString,
      ('matrix_io.recognition.v1.RecognitionService', 'GetFeatureDescriptorTags'): GetFeatureDescriptorTagsRequest.SerializeToString,
      ('matrix_io.recognition.v1.RecognitionService', 'GetFeatureDescriptors'): GetFeatureDescriptorsRequest.SerializeToString,
      ('matrix_io.recognition.v1.RecognitionService', 'Recognize'): RecognizeRequest.SerializeToString,
      ('matrix_io.recognition.v1.RecognitionService', 'StoreFeatureDescriptors'): StoreFeatureDescriptorsRequest.SerializeToString,
    }
    response_deserializers = {
      ('matrix_io.recognition.v1.RecognitionService', 'DeleteFeatureDescriptors'): DeleteFeatureDescriptorsResponse.FromString,
      ('matrix_io.recognition.v1.RecognitionService', 'GetFeatureDescriptorTags'): GetFeatureDescriptorTagsResponse.FromString,
      ('matrix_io.recognition.v1.RecognitionService', 'GetFeatureDescriptors'): GetFeatureDescriptorsResponse.FromString,
      ('matrix_io.recognition.v1.RecognitionService', 'Recognize'): RecognizeResponse.FromString,
      ('matrix_io.recognition.v1.RecognitionService', 'StoreFeatureDescriptors'): StoreFeatureDescriptorsResponse.FromString,
    }
    cardinalities = {
      'DeleteFeatureDescriptors': cardinality.Cardinality.UNARY_UNARY,
      'GetFeatureDescriptorTags': cardinality.Cardinality.UNARY_UNARY,
      'GetFeatureDescriptors': cardinality.Cardinality.UNARY_UNARY,
      'Recognize': cardinality.Cardinality.UNARY_UNARY,
      'StoreFeatureDescriptors': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'matrix_io.recognition.v1.RecognitionService', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)

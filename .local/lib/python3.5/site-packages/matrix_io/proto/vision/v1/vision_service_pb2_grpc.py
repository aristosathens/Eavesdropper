# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from matrix_io.proto.vision.v1 import vision_pb2 as matrix__io_dot_vision_dot_v1_dot_vision__pb2
from matrix_io.proto.vision.v1 import vision_service_pb2 as matrix__io_dot_vision_dot_v1_dot_vision__service__pb2


class VisionServiceStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.ProcessImage = channel.unary_unary(
        '/matrix_io.vision.v1.VisionService/ProcessImage',
        request_serializer=matrix__io_dot_vision_dot_v1_dot_vision__service__pb2.VisionRequest.SerializeToString,
        response_deserializer=matrix__io_dot_vision_dot_v1_dot_vision__pb2.VisionResult.FromString,
        )


class VisionServiceServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def ProcessImage(self, request, context):
    """Process an image and perform the requested detections and
    recognitions.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_VisionServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'ProcessImage': grpc.unary_unary_rpc_method_handler(
          servicer.ProcessImage,
          request_deserializer=matrix__io_dot_vision_dot_v1_dot_vision__service__pb2.VisionRequest.FromString,
          response_serializer=matrix__io_dot_vision_dot_v1_dot_vision__pb2.VisionResult.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'matrix_io.vision.v1.VisionService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))

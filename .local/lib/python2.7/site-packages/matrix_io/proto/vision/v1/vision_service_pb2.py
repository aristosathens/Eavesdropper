# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: matrix_io/vision/v1/vision_service.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from matrix_io.proto.vision.v1 import vision_pb2 as matrix__io_dot_vision_dot_v1_dot_vision__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='matrix_io/vision/v1/vision_service.proto',
  package='matrix_io.vision.v1',
  syntax='proto3',
  serialized_pb=_b('\n(matrix_io/vision/v1/vision_service.proto\x12\x13matrix_io.vision.v1\x1a matrix_io/vision/v1/vision.proto\"\xfb\x01\n\rVisionRequest\x12\r\n\x05image\x18\x01 \x01(\x0c\x12\x38\n\tdetection\x18\x02 \x03(\x0e\x32%.matrix_io.vision.v1.EnumDetectionTag\x12\x42\n\x0brecognition\x18\x03 \x03(\x0e\x32-.matrix_io.vision.v1.EnumFacialRecognitionTag\x12\x32\n\nimage_list\x18\x04 \x01(\x0b\x32\x1e.matrix_io.vision.v1.ImageList\x12)\n\x05video\x18\x05 \x01(\x0b\x32\x1a.matrix_io.vision.v1.Video2h\n\rVisionService\x12W\n\x0cProcessImage\x12\".matrix_io.vision.v1.VisionRequest\x1a!.matrix_io.vision.v1.VisionResult\"\x00\x42\x43\n\x16\x63om.matrixio.vision.v1B\x12VisionServiceProtoP\x01\xaa\x02\x12MatrixIO.Vision.V1b\x06proto3')
  ,
  dependencies=[matrix__io_dot_vision_dot_v1_dot_vision__pb2.DESCRIPTOR,])




_VISIONREQUEST = _descriptor.Descriptor(
  name='VisionRequest',
  full_name='matrix_io.vision.v1.VisionRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='image', full_name='matrix_io.vision.v1.VisionRequest.image', index=0,
      number=1, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='detection', full_name='matrix_io.vision.v1.VisionRequest.detection', index=1,
      number=2, type=14, cpp_type=8, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='recognition', full_name='matrix_io.vision.v1.VisionRequest.recognition', index=2,
      number=3, type=14, cpp_type=8, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='image_list', full_name='matrix_io.vision.v1.VisionRequest.image_list', index=3,
      number=4, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='video', full_name='matrix_io.vision.v1.VisionRequest.video', index=4,
      number=5, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=100,
  serialized_end=351,
)

_VISIONREQUEST.fields_by_name['detection'].enum_type = matrix__io_dot_vision_dot_v1_dot_vision__pb2._ENUMDETECTIONTAG
_VISIONREQUEST.fields_by_name['recognition'].enum_type = matrix__io_dot_vision_dot_v1_dot_vision__pb2._ENUMFACIALRECOGNITIONTAG
_VISIONREQUEST.fields_by_name['image_list'].message_type = matrix__io_dot_vision_dot_v1_dot_vision__pb2._IMAGELIST
_VISIONREQUEST.fields_by_name['video'].message_type = matrix__io_dot_vision_dot_v1_dot_vision__pb2._VIDEO
DESCRIPTOR.message_types_by_name['VisionRequest'] = _VISIONREQUEST
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

VisionRequest = _reflection.GeneratedProtocolMessageType('VisionRequest', (_message.Message,), dict(
  DESCRIPTOR = _VISIONREQUEST,
  __module__ = 'matrix_io.vision.v1.vision_service_pb2'
  # @@protoc_insertion_point(class_scope:matrix_io.vision.v1.VisionRequest)
  ))
_sym_db.RegisterMessage(VisionRequest)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\026com.matrixio.vision.v1B\022VisionServiceProtoP\001\252\002\022MatrixIO.Vision.V1'))
try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities


  class VisionServiceStub(object):
    # missing associated documentation comment in .proto file
    pass

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.ProcessImage = channel.unary_unary(
          '/matrix_io.vision.v1.VisionService/ProcessImage',
          request_serializer=VisionRequest.SerializeToString,
          response_deserializer=matrix__io_dot_vision_dot_v1_dot_vision__pb2.VisionResult.FromString,
          )


  class VisionServiceServicer(object):
    # missing associated documentation comment in .proto file
    pass

    def ProcessImage(self, request, context):
      """Process an image and perform the requested detections and
      recognitions.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_VisionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'ProcessImage': grpc.unary_unary_rpc_method_handler(
            servicer.ProcessImage,
            request_deserializer=VisionRequest.FromString,
            response_serializer=matrix__io_dot_vision_dot_v1_dot_vision__pb2.VisionResult.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'matrix_io.vision.v1.VisionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaVisionServiceServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    # missing associated documentation comment in .proto file
    pass
    def ProcessImage(self, request, context):
      """Process an image and perform the requested detections and
      recognitions.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaVisionServiceStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    # missing associated documentation comment in .proto file
    pass
    def ProcessImage(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Process an image and perform the requested detections and
      recognitions.
      """
      raise NotImplementedError()
    ProcessImage.future = None


  def beta_create_VisionService_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('matrix_io.vision.v1.VisionService', 'ProcessImage'): VisionRequest.FromString,
    }
    response_serializers = {
      ('matrix_io.vision.v1.VisionService', 'ProcessImage'): matrix__io_dot_vision_dot_v1_dot_vision__pb2.VisionResult.SerializeToString,
    }
    method_implementations = {
      ('matrix_io.vision.v1.VisionService', 'ProcessImage'): face_utilities.unary_unary_inline(servicer.ProcessImage),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_VisionService_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('matrix_io.vision.v1.VisionService', 'ProcessImage'): VisionRequest.SerializeToString,
    }
    response_deserializers = {
      ('matrix_io.vision.v1.VisionService', 'ProcessImage'): matrix__io_dot_vision_dot_v1_dot_vision__pb2.VisionResult.FromString,
    }
    cardinalities = {
      'ProcessImage': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'matrix_io.vision.v1.VisionService', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)

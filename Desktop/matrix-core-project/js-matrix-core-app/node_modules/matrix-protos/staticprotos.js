/*eslint-disable block-scoped-var, no-redeclare, no-control-regex, no-prototype-builtins*/
"use strict";

var $protobuf = require("protobufjs/minimal");

// Common aliases
var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;

// Exported root namespace
var $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});

$root.matrix_io = (function() {

    /**
     * Namespace matrix_io.
     * @exports matrix_io
     * @namespace
     */
    var matrix_io = {};

    matrix_io.recognition = (function() {

        /**
         * Namespace recognition.
         * @memberof matrix_io
         * @namespace
         */
        var recognition = {};

        recognition.v1 = (function() {

            /**
             * Namespace v1.
             * @memberof matrix_io.recognition
             * @namespace
             */
            var v1 = {};

            v1.FeatureDescriptor = (function() {

                /**
                 * Properties of a FeatureDescriptor.
                 * @memberof matrix_io.recognition.v1
                 * @interface IFeatureDescriptor
                 * @property {string|null} [uuid] FeatureDescriptor uuid
                 * @property {string|null} [dataFormat] FeatureDescriptor dataFormat
                 * @property {Array.<number>|null} [data] FeatureDescriptor data
                 * @property {Array.<string>|null} [tags] FeatureDescriptor tags
                 */

                /**
                 * Constructs a new FeatureDescriptor.
                 * @memberof matrix_io.recognition.v1
                 * @classdesc Represents a FeatureDescriptor.
                 * @implements IFeatureDescriptor
                 * @constructor
                 * @param {matrix_io.recognition.v1.IFeatureDescriptor=} [properties] Properties to set
                 */
                function FeatureDescriptor(properties) {
                    this.data = [];
                    this.tags = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * FeatureDescriptor uuid.
                 * @member {string} uuid
                 * @memberof matrix_io.recognition.v1.FeatureDescriptor
                 * @instance
                 */
                FeatureDescriptor.prototype.uuid = "";

                /**
                 * FeatureDescriptor dataFormat.
                 * @member {string} dataFormat
                 * @memberof matrix_io.recognition.v1.FeatureDescriptor
                 * @instance
                 */
                FeatureDescriptor.prototype.dataFormat = "";

                /**
                 * FeatureDescriptor data.
                 * @member {Array.<number>} data
                 * @memberof matrix_io.recognition.v1.FeatureDescriptor
                 * @instance
                 */
                FeatureDescriptor.prototype.data = $util.emptyArray;

                /**
                 * FeatureDescriptor tags.
                 * @member {Array.<string>} tags
                 * @memberof matrix_io.recognition.v1.FeatureDescriptor
                 * @instance
                 */
                FeatureDescriptor.prototype.tags = $util.emptyArray;

                /**
                 * Creates a new FeatureDescriptor instance using the specified properties.
                 * @function create
                 * @memberof matrix_io.recognition.v1.FeatureDescriptor
                 * @static
                 * @param {matrix_io.recognition.v1.IFeatureDescriptor=} [properties] Properties to set
                 * @returns {matrix_io.recognition.v1.FeatureDescriptor} FeatureDescriptor instance
                 */
                FeatureDescriptor.create = function create(properties) {
                    return new FeatureDescriptor(properties);
                };

                /**
                 * Encodes the specified FeatureDescriptor message. Does not implicitly {@link matrix_io.recognition.v1.FeatureDescriptor.verify|verify} messages.
                 * @function encode
                 * @memberof matrix_io.recognition.v1.FeatureDescriptor
                 * @static
                 * @param {matrix_io.recognition.v1.IFeatureDescriptor} message FeatureDescriptor message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FeatureDescriptor.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.uuid != null && message.hasOwnProperty("uuid"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.uuid);
                    if (message.dataFormat != null && message.hasOwnProperty("dataFormat"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.dataFormat);
                    if (message.data != null && message.data.length) {
                        writer.uint32(/* id 3, wireType 2 =*/26).fork();
                        for (var i = 0; i < message.data.length; ++i)
                            writer.float(message.data[i]);
                        writer.ldelim();
                    }
                    if (message.tags != null && message.tags.length)
                        for (var i = 0; i < message.tags.length; ++i)
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.tags[i]);
                    return writer;
                };

                /**
                 * Encodes the specified FeatureDescriptor message, length delimited. Does not implicitly {@link matrix_io.recognition.v1.FeatureDescriptor.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof matrix_io.recognition.v1.FeatureDescriptor
                 * @static
                 * @param {matrix_io.recognition.v1.IFeatureDescriptor} message FeatureDescriptor message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FeatureDescriptor.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a FeatureDescriptor message from the specified reader or buffer.
                 * @function decode
                 * @memberof matrix_io.recognition.v1.FeatureDescriptor
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {matrix_io.recognition.v1.FeatureDescriptor} FeatureDescriptor
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FeatureDescriptor.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.recognition.v1.FeatureDescriptor();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.uuid = reader.string();
                            break;
                        case 2:
                            message.dataFormat = reader.string();
                            break;
                        case 3:
                            if (!(message.data && message.data.length))
                                message.data = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.data.push(reader.float());
                            } else
                                message.data.push(reader.float());
                            break;
                        case 4:
                            if (!(message.tags && message.tags.length))
                                message.tags = [];
                            message.tags.push(reader.string());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a FeatureDescriptor message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof matrix_io.recognition.v1.FeatureDescriptor
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {matrix_io.recognition.v1.FeatureDescriptor} FeatureDescriptor
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FeatureDescriptor.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a FeatureDescriptor message.
                 * @function verify
                 * @memberof matrix_io.recognition.v1.FeatureDescriptor
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FeatureDescriptor.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.uuid != null && message.hasOwnProperty("uuid"))
                        if (!$util.isString(message.uuid))
                            return "uuid: string expected";
                    if (message.dataFormat != null && message.hasOwnProperty("dataFormat"))
                        if (!$util.isString(message.dataFormat))
                            return "dataFormat: string expected";
                    if (message.data != null && message.hasOwnProperty("data")) {
                        if (!Array.isArray(message.data))
                            return "data: array expected";
                        for (var i = 0; i < message.data.length; ++i)
                            if (typeof message.data[i] !== "number")
                                return "data: number[] expected";
                    }
                    if (message.tags != null && message.hasOwnProperty("tags")) {
                        if (!Array.isArray(message.tags))
                            return "tags: array expected";
                        for (var i = 0; i < message.tags.length; ++i)
                            if (!$util.isString(message.tags[i]))
                                return "tags: string[] expected";
                    }
                    return null;
                };

                /**
                 * Creates a FeatureDescriptor message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof matrix_io.recognition.v1.FeatureDescriptor
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {matrix_io.recognition.v1.FeatureDescriptor} FeatureDescriptor
                 */
                FeatureDescriptor.fromObject = function fromObject(object) {
                    if (object instanceof $root.matrix_io.recognition.v1.FeatureDescriptor)
                        return object;
                    var message = new $root.matrix_io.recognition.v1.FeatureDescriptor();
                    if (object.uuid != null)
                        message.uuid = String(object.uuid);
                    if (object.dataFormat != null)
                        message.dataFormat = String(object.dataFormat);
                    if (object.data) {
                        if (!Array.isArray(object.data))
                            throw TypeError(".matrix_io.recognition.v1.FeatureDescriptor.data: array expected");
                        message.data = [];
                        for (var i = 0; i < object.data.length; ++i)
                            message.data[i] = Number(object.data[i]);
                    }
                    if (object.tags) {
                        if (!Array.isArray(object.tags))
                            throw TypeError(".matrix_io.recognition.v1.FeatureDescriptor.tags: array expected");
                        message.tags = [];
                        for (var i = 0; i < object.tags.length; ++i)
                            message.tags[i] = String(object.tags[i]);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a FeatureDescriptor message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof matrix_io.recognition.v1.FeatureDescriptor
                 * @static
                 * @param {matrix_io.recognition.v1.FeatureDescriptor} message FeatureDescriptor
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FeatureDescriptor.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.data = [];
                        object.tags = [];
                    }
                    if (options.defaults) {
                        object.uuid = "";
                        object.dataFormat = "";
                    }
                    if (message.uuid != null && message.hasOwnProperty("uuid"))
                        object.uuid = message.uuid;
                    if (message.dataFormat != null && message.hasOwnProperty("dataFormat"))
                        object.dataFormat = message.dataFormat;
                    if (message.data && message.data.length) {
                        object.data = [];
                        for (var j = 0; j < message.data.length; ++j)
                            object.data[j] = options.json && !isFinite(message.data[j]) ? String(message.data[j]) : message.data[j];
                    }
                    if (message.tags && message.tags.length) {
                        object.tags = [];
                        for (var j = 0; j < message.tags.length; ++j)
                            object.tags[j] = message.tags[j];
                    }
                    return object;
                };

                /**
                 * Converts this FeatureDescriptor to JSON.
                 * @function toJSON
                 * @memberof matrix_io.recognition.v1.FeatureDescriptor
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FeatureDescriptor.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return FeatureDescriptor;
            })();

            v1.FeatureDescriptorList = (function() {

                /**
                 * Properties of a FeatureDescriptorList.
                 * @memberof matrix_io.recognition.v1
                 * @interface IFeatureDescriptorList
                 * @property {Array.<matrix_io.recognition.v1.IFeatureDescriptor>|null} [featureDescriptors] FeatureDescriptorList featureDescriptors
                 */

                /**
                 * Constructs a new FeatureDescriptorList.
                 * @memberof matrix_io.recognition.v1
                 * @classdesc Represents a FeatureDescriptorList.
                 * @implements IFeatureDescriptorList
                 * @constructor
                 * @param {matrix_io.recognition.v1.IFeatureDescriptorList=} [properties] Properties to set
                 */
                function FeatureDescriptorList(properties) {
                    this.featureDescriptors = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * FeatureDescriptorList featureDescriptors.
                 * @member {Array.<matrix_io.recognition.v1.IFeatureDescriptor>} featureDescriptors
                 * @memberof matrix_io.recognition.v1.FeatureDescriptorList
                 * @instance
                 */
                FeatureDescriptorList.prototype.featureDescriptors = $util.emptyArray;

                /**
                 * Creates a new FeatureDescriptorList instance using the specified properties.
                 * @function create
                 * @memberof matrix_io.recognition.v1.FeatureDescriptorList
                 * @static
                 * @param {matrix_io.recognition.v1.IFeatureDescriptorList=} [properties] Properties to set
                 * @returns {matrix_io.recognition.v1.FeatureDescriptorList} FeatureDescriptorList instance
                 */
                FeatureDescriptorList.create = function create(properties) {
                    return new FeatureDescriptorList(properties);
                };

                /**
                 * Encodes the specified FeatureDescriptorList message. Does not implicitly {@link matrix_io.recognition.v1.FeatureDescriptorList.verify|verify} messages.
                 * @function encode
                 * @memberof matrix_io.recognition.v1.FeatureDescriptorList
                 * @static
                 * @param {matrix_io.recognition.v1.IFeatureDescriptorList} message FeatureDescriptorList message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FeatureDescriptorList.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.featureDescriptors != null && message.featureDescriptors.length)
                        for (var i = 0; i < message.featureDescriptors.length; ++i)
                            $root.matrix_io.recognition.v1.FeatureDescriptor.encode(message.featureDescriptors[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified FeatureDescriptorList message, length delimited. Does not implicitly {@link matrix_io.recognition.v1.FeatureDescriptorList.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof matrix_io.recognition.v1.FeatureDescriptorList
                 * @static
                 * @param {matrix_io.recognition.v1.IFeatureDescriptorList} message FeatureDescriptorList message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FeatureDescriptorList.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a FeatureDescriptorList message from the specified reader or buffer.
                 * @function decode
                 * @memberof matrix_io.recognition.v1.FeatureDescriptorList
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {matrix_io.recognition.v1.FeatureDescriptorList} FeatureDescriptorList
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FeatureDescriptorList.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.recognition.v1.FeatureDescriptorList();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.featureDescriptors && message.featureDescriptors.length))
                                message.featureDescriptors = [];
                            message.featureDescriptors.push($root.matrix_io.recognition.v1.FeatureDescriptor.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a FeatureDescriptorList message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof matrix_io.recognition.v1.FeatureDescriptorList
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {matrix_io.recognition.v1.FeatureDescriptorList} FeatureDescriptorList
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FeatureDescriptorList.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a FeatureDescriptorList message.
                 * @function verify
                 * @memberof matrix_io.recognition.v1.FeatureDescriptorList
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FeatureDescriptorList.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.featureDescriptors != null && message.hasOwnProperty("featureDescriptors")) {
                        if (!Array.isArray(message.featureDescriptors))
                            return "featureDescriptors: array expected";
                        for (var i = 0; i < message.featureDescriptors.length; ++i) {
                            var error = $root.matrix_io.recognition.v1.FeatureDescriptor.verify(message.featureDescriptors[i]);
                            if (error)
                                return "featureDescriptors." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates a FeatureDescriptorList message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof matrix_io.recognition.v1.FeatureDescriptorList
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {matrix_io.recognition.v1.FeatureDescriptorList} FeatureDescriptorList
                 */
                FeatureDescriptorList.fromObject = function fromObject(object) {
                    if (object instanceof $root.matrix_io.recognition.v1.FeatureDescriptorList)
                        return object;
                    var message = new $root.matrix_io.recognition.v1.FeatureDescriptorList();
                    if (object.featureDescriptors) {
                        if (!Array.isArray(object.featureDescriptors))
                            throw TypeError(".matrix_io.recognition.v1.FeatureDescriptorList.featureDescriptors: array expected");
                        message.featureDescriptors = [];
                        for (var i = 0; i < object.featureDescriptors.length; ++i) {
                            if (typeof object.featureDescriptors[i] !== "object")
                                throw TypeError(".matrix_io.recognition.v1.FeatureDescriptorList.featureDescriptors: object expected");
                            message.featureDescriptors[i] = $root.matrix_io.recognition.v1.FeatureDescriptor.fromObject(object.featureDescriptors[i]);
                        }
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a FeatureDescriptorList message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof matrix_io.recognition.v1.FeatureDescriptorList
                 * @static
                 * @param {matrix_io.recognition.v1.FeatureDescriptorList} message FeatureDescriptorList
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FeatureDescriptorList.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.featureDescriptors = [];
                    if (message.featureDescriptors && message.featureDescriptors.length) {
                        object.featureDescriptors = [];
                        for (var j = 0; j < message.featureDescriptors.length; ++j)
                            object.featureDescriptors[j] = $root.matrix_io.recognition.v1.FeatureDescriptor.toObject(message.featureDescriptors[j], options);
                    }
                    return object;
                };

                /**
                 * Converts this FeatureDescriptorList to JSON.
                 * @function toJSON
                 * @memberof matrix_io.recognition.v1.FeatureDescriptorList
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FeatureDescriptorList.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return FeatureDescriptorList;
            })();

            v1.RecognitionService = (function() {

                /**
                 * Constructs a new RecognitionService service.
                 * @memberof matrix_io.recognition.v1
                 * @classdesc Represents a RecognitionService
                 * @extends $protobuf.rpc.Service
                 * @constructor
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 */
                function RecognitionService(rpcImpl, requestDelimited, responseDelimited) {
                    $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                }

                (RecognitionService.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = RecognitionService;

                /**
                 * Creates new RecognitionService service using the specified rpc implementation.
                 * @function create
                 * @memberof matrix_io.recognition.v1.RecognitionService
                 * @static
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 * @returns {RecognitionService} RPC service. Useful where requests and/or responses are streamed.
                 */
                RecognitionService.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                    return new this(rpcImpl, requestDelimited, responseDelimited);
                };

                /**
                 * Callback as used by {@link matrix_io.recognition.v1.RecognitionService#storeFeatureDescriptors}.
                 * @memberof matrix_io.recognition.v1.RecognitionService
                 * @typedef StoreFeatureDescriptorsCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {matrix_io.recognition.v1.StoreFeatureDescriptorsResponse} [response] StoreFeatureDescriptorsResponse
                 */

                /**
                 * Calls StoreFeatureDescriptors.
                 * @function storeFeatureDescriptors
                 * @memberof matrix_io.recognition.v1.RecognitionService
                 * @instance
                 * @param {matrix_io.recognition.v1.IStoreFeatureDescriptorsRequest} request StoreFeatureDescriptorsRequest message or plain object
                 * @param {matrix_io.recognition.v1.RecognitionService.StoreFeatureDescriptorsCallback} callback Node-style callback called with the error, if any, and StoreFeatureDescriptorsResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                RecognitionService.prototype.storeFeatureDescriptors = function storeFeatureDescriptors(request, callback) {
                    return this.rpcCall(storeFeatureDescriptors, $root.matrix_io.recognition.v1.StoreFeatureDescriptorsRequest, $root.matrix_io.recognition.v1.StoreFeatureDescriptorsResponse, request, callback);
                };

                /**
                 * Calls StoreFeatureDescriptors.
                 * @function storeFeatureDescriptors
                 * @memberof matrix_io.recognition.v1.RecognitionService
                 * @instance
                 * @param {matrix_io.recognition.v1.IStoreFeatureDescriptorsRequest} request StoreFeatureDescriptorsRequest message or plain object
                 * @returns {Promise<matrix_io.recognition.v1.StoreFeatureDescriptorsResponse>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link matrix_io.recognition.v1.RecognitionService#getFeatureDescriptors}.
                 * @memberof matrix_io.recognition.v1.RecognitionService
                 * @typedef GetFeatureDescriptorsCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {matrix_io.recognition.v1.GetFeatureDescriptorsResponse} [response] GetFeatureDescriptorsResponse
                 */

                /**
                 * Calls GetFeatureDescriptors.
                 * @function getFeatureDescriptors
                 * @memberof matrix_io.recognition.v1.RecognitionService
                 * @instance
                 * @param {matrix_io.recognition.v1.IGetFeatureDescriptorsRequest} request GetFeatureDescriptorsRequest message or plain object
                 * @param {matrix_io.recognition.v1.RecognitionService.GetFeatureDescriptorsCallback} callback Node-style callback called with the error, if any, and GetFeatureDescriptorsResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                RecognitionService.prototype.getFeatureDescriptors = function getFeatureDescriptors(request, callback) {
                    return this.rpcCall(getFeatureDescriptors, $root.matrix_io.recognition.v1.GetFeatureDescriptorsRequest, $root.matrix_io.recognition.v1.GetFeatureDescriptorsResponse, request, callback);
                };

                /**
                 * Calls GetFeatureDescriptors.
                 * @function getFeatureDescriptors
                 * @memberof matrix_io.recognition.v1.RecognitionService
                 * @instance
                 * @param {matrix_io.recognition.v1.IGetFeatureDescriptorsRequest} request GetFeatureDescriptorsRequest message or plain object
                 * @returns {Promise<matrix_io.recognition.v1.GetFeatureDescriptorsResponse>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link matrix_io.recognition.v1.RecognitionService#deleteFeatureDescriptors}.
                 * @memberof matrix_io.recognition.v1.RecognitionService
                 * @typedef DeleteFeatureDescriptorsCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {matrix_io.recognition.v1.DeleteFeatureDescriptorsResponse} [response] DeleteFeatureDescriptorsResponse
                 */

                /**
                 * Calls DeleteFeatureDescriptors.
                 * @function deleteFeatureDescriptors
                 * @memberof matrix_io.recognition.v1.RecognitionService
                 * @instance
                 * @param {matrix_io.recognition.v1.IDeleteFeatureDescriptorsRequest} request DeleteFeatureDescriptorsRequest message or plain object
                 * @param {matrix_io.recognition.v1.RecognitionService.DeleteFeatureDescriptorsCallback} callback Node-style callback called with the error, if any, and DeleteFeatureDescriptorsResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                RecognitionService.prototype.deleteFeatureDescriptors = function deleteFeatureDescriptors(request, callback) {
                    return this.rpcCall(deleteFeatureDescriptors, $root.matrix_io.recognition.v1.DeleteFeatureDescriptorsRequest, $root.matrix_io.recognition.v1.DeleteFeatureDescriptorsResponse, request, callback);
                };

                /**
                 * Calls DeleteFeatureDescriptors.
                 * @function deleteFeatureDescriptors
                 * @memberof matrix_io.recognition.v1.RecognitionService
                 * @instance
                 * @param {matrix_io.recognition.v1.IDeleteFeatureDescriptorsRequest} request DeleteFeatureDescriptorsRequest message or plain object
                 * @returns {Promise<matrix_io.recognition.v1.DeleteFeatureDescriptorsResponse>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link matrix_io.recognition.v1.RecognitionService#getFeatureDescriptorTags}.
                 * @memberof matrix_io.recognition.v1.RecognitionService
                 * @typedef GetFeatureDescriptorTagsCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {matrix_io.recognition.v1.GetFeatureDescriptorTagsResponse} [response] GetFeatureDescriptorTagsResponse
                 */

                /**
                 * Calls GetFeatureDescriptorTags.
                 * @function getFeatureDescriptorTags
                 * @memberof matrix_io.recognition.v1.RecognitionService
                 * @instance
                 * @param {matrix_io.recognition.v1.IGetFeatureDescriptorTagsRequest} request GetFeatureDescriptorTagsRequest message or plain object
                 * @param {matrix_io.recognition.v1.RecognitionService.GetFeatureDescriptorTagsCallback} callback Node-style callback called with the error, if any, and GetFeatureDescriptorTagsResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                RecognitionService.prototype.getFeatureDescriptorTags = function getFeatureDescriptorTags(request, callback) {
                    return this.rpcCall(getFeatureDescriptorTags, $root.matrix_io.recognition.v1.GetFeatureDescriptorTagsRequest, $root.matrix_io.recognition.v1.GetFeatureDescriptorTagsResponse, request, callback);
                };

                /**
                 * Calls GetFeatureDescriptorTags.
                 * @function getFeatureDescriptorTags
                 * @memberof matrix_io.recognition.v1.RecognitionService
                 * @instance
                 * @param {matrix_io.recognition.v1.IGetFeatureDescriptorTagsRequest} request GetFeatureDescriptorTagsRequest message or plain object
                 * @returns {Promise<matrix_io.recognition.v1.GetFeatureDescriptorTagsResponse>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link matrix_io.recognition.v1.RecognitionService#recognize}.
                 * @memberof matrix_io.recognition.v1.RecognitionService
                 * @typedef RecognizeCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {matrix_io.recognition.v1.RecognizeResponse} [response] RecognizeResponse
                 */

                /**
                 * Calls Recognize.
                 * @function recognize
                 * @memberof matrix_io.recognition.v1.RecognitionService
                 * @instance
                 * @param {matrix_io.recognition.v1.IRecognizeRequest} request RecognizeRequest message or plain object
                 * @param {matrix_io.recognition.v1.RecognitionService.RecognizeCallback} callback Node-style callback called with the error, if any, and RecognizeResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                RecognitionService.prototype.recognize = function recognize(request, callback) {
                    return this.rpcCall(recognize, $root.matrix_io.recognition.v1.RecognizeRequest, $root.matrix_io.recognition.v1.RecognizeResponse, request, callback);
                };

                /**
                 * Calls Recognize.
                 * @function recognize
                 * @memberof matrix_io.recognition.v1.RecognitionService
                 * @instance
                 * @param {matrix_io.recognition.v1.IRecognizeRequest} request RecognizeRequest message or plain object
                 * @returns {Promise<matrix_io.recognition.v1.RecognizeResponse>} Promise
                 * @variation 2
                 */

                return RecognitionService;
            })();

            v1.StoreFeatureDescriptorsRequest = (function() {

                /**
                 * Properties of a StoreFeatureDescriptorsRequest.
                 * @memberof matrix_io.recognition.v1
                 * @interface IStoreFeatureDescriptorsRequest
                 * @property {matrix_io.vision.v1.IVisionRequest|null} [visionRequest] StoreFeatureDescriptorsRequest visionRequest
                 * @property {Array.<string>|null} [tags] StoreFeatureDescriptorsRequest tags
                 * @property {Array.<matrix_io.recognition.v1.IFeatureDescriptor>|null} [featureDescriptors] StoreFeatureDescriptorsRequest featureDescriptors
                 * @property {Array.<string>|null} [deviceId] StoreFeatureDescriptorsRequest deviceId
                 */

                /**
                 * Constructs a new StoreFeatureDescriptorsRequest.
                 * @memberof matrix_io.recognition.v1
                 * @classdesc Represents a StoreFeatureDescriptorsRequest.
                 * @implements IStoreFeatureDescriptorsRequest
                 * @constructor
                 * @param {matrix_io.recognition.v1.IStoreFeatureDescriptorsRequest=} [properties] Properties to set
                 */
                function StoreFeatureDescriptorsRequest(properties) {
                    this.tags = [];
                    this.featureDescriptors = [];
                    this.deviceId = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * StoreFeatureDescriptorsRequest visionRequest.
                 * @member {matrix_io.vision.v1.IVisionRequest|null|undefined} visionRequest
                 * @memberof matrix_io.recognition.v1.StoreFeatureDescriptorsRequest
                 * @instance
                 */
                StoreFeatureDescriptorsRequest.prototype.visionRequest = null;

                /**
                 * StoreFeatureDescriptorsRequest tags.
                 * @member {Array.<string>} tags
                 * @memberof matrix_io.recognition.v1.StoreFeatureDescriptorsRequest
                 * @instance
                 */
                StoreFeatureDescriptorsRequest.prototype.tags = $util.emptyArray;

                /**
                 * StoreFeatureDescriptorsRequest featureDescriptors.
                 * @member {Array.<matrix_io.recognition.v1.IFeatureDescriptor>} featureDescriptors
                 * @memberof matrix_io.recognition.v1.StoreFeatureDescriptorsRequest
                 * @instance
                 */
                StoreFeatureDescriptorsRequest.prototype.featureDescriptors = $util.emptyArray;

                /**
                 * StoreFeatureDescriptorsRequest deviceId.
                 * @member {Array.<string>} deviceId
                 * @memberof matrix_io.recognition.v1.StoreFeatureDescriptorsRequest
                 * @instance
                 */
                StoreFeatureDescriptorsRequest.prototype.deviceId = $util.emptyArray;

                /**
                 * Creates a new StoreFeatureDescriptorsRequest instance using the specified properties.
                 * @function create
                 * @memberof matrix_io.recognition.v1.StoreFeatureDescriptorsRequest
                 * @static
                 * @param {matrix_io.recognition.v1.IStoreFeatureDescriptorsRequest=} [properties] Properties to set
                 * @returns {matrix_io.recognition.v1.StoreFeatureDescriptorsRequest} StoreFeatureDescriptorsRequest instance
                 */
                StoreFeatureDescriptorsRequest.create = function create(properties) {
                    return new StoreFeatureDescriptorsRequest(properties);
                };

                /**
                 * Encodes the specified StoreFeatureDescriptorsRequest message. Does not implicitly {@link matrix_io.recognition.v1.StoreFeatureDescriptorsRequest.verify|verify} messages.
                 * @function encode
                 * @memberof matrix_io.recognition.v1.StoreFeatureDescriptorsRequest
                 * @static
                 * @param {matrix_io.recognition.v1.IStoreFeatureDescriptorsRequest} message StoreFeatureDescriptorsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                StoreFeatureDescriptorsRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.visionRequest != null && message.hasOwnProperty("visionRequest"))
                        $root.matrix_io.vision.v1.VisionRequest.encode(message.visionRequest, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.tags != null && message.tags.length)
                        for (var i = 0; i < message.tags.length; ++i)
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.tags[i]);
                    if (message.featureDescriptors != null && message.featureDescriptors.length)
                        for (var i = 0; i < message.featureDescriptors.length; ++i)
                            $root.matrix_io.recognition.v1.FeatureDescriptor.encode(message.featureDescriptors[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.deviceId != null && message.deviceId.length)
                        for (var i = 0; i < message.deviceId.length; ++i)
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.deviceId[i]);
                    return writer;
                };

                /**
                 * Encodes the specified StoreFeatureDescriptorsRequest message, length delimited. Does not implicitly {@link matrix_io.recognition.v1.StoreFeatureDescriptorsRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof matrix_io.recognition.v1.StoreFeatureDescriptorsRequest
                 * @static
                 * @param {matrix_io.recognition.v1.IStoreFeatureDescriptorsRequest} message StoreFeatureDescriptorsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                StoreFeatureDescriptorsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a StoreFeatureDescriptorsRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof matrix_io.recognition.v1.StoreFeatureDescriptorsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {matrix_io.recognition.v1.StoreFeatureDescriptorsRequest} StoreFeatureDescriptorsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                StoreFeatureDescriptorsRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.recognition.v1.StoreFeatureDescriptorsRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.visionRequest = $root.matrix_io.vision.v1.VisionRequest.decode(reader, reader.uint32());
                            break;
                        case 2:
                            if (!(message.tags && message.tags.length))
                                message.tags = [];
                            message.tags.push(reader.string());
                            break;
                        case 3:
                            if (!(message.featureDescriptors && message.featureDescriptors.length))
                                message.featureDescriptors = [];
                            message.featureDescriptors.push($root.matrix_io.recognition.v1.FeatureDescriptor.decode(reader, reader.uint32()));
                            break;
                        case 4:
                            if (!(message.deviceId && message.deviceId.length))
                                message.deviceId = [];
                            message.deviceId.push(reader.string());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a StoreFeatureDescriptorsRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof matrix_io.recognition.v1.StoreFeatureDescriptorsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {matrix_io.recognition.v1.StoreFeatureDescriptorsRequest} StoreFeatureDescriptorsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                StoreFeatureDescriptorsRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a StoreFeatureDescriptorsRequest message.
                 * @function verify
                 * @memberof matrix_io.recognition.v1.StoreFeatureDescriptorsRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                StoreFeatureDescriptorsRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.visionRequest != null && message.hasOwnProperty("visionRequest")) {
                        var error = $root.matrix_io.vision.v1.VisionRequest.verify(message.visionRequest);
                        if (error)
                            return "visionRequest." + error;
                    }
                    if (message.tags != null && message.hasOwnProperty("tags")) {
                        if (!Array.isArray(message.tags))
                            return "tags: array expected";
                        for (var i = 0; i < message.tags.length; ++i)
                            if (!$util.isString(message.tags[i]))
                                return "tags: string[] expected";
                    }
                    if (message.featureDescriptors != null && message.hasOwnProperty("featureDescriptors")) {
                        if (!Array.isArray(message.featureDescriptors))
                            return "featureDescriptors: array expected";
                        for (var i = 0; i < message.featureDescriptors.length; ++i) {
                            var error = $root.matrix_io.recognition.v1.FeatureDescriptor.verify(message.featureDescriptors[i]);
                            if (error)
                                return "featureDescriptors." + error;
                        }
                    }
                    if (message.deviceId != null && message.hasOwnProperty("deviceId")) {
                        if (!Array.isArray(message.deviceId))
                            return "deviceId: array expected";
                        for (var i = 0; i < message.deviceId.length; ++i)
                            if (!$util.isString(message.deviceId[i]))
                                return "deviceId: string[] expected";
                    }
                    return null;
                };

                /**
                 * Creates a StoreFeatureDescriptorsRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof matrix_io.recognition.v1.StoreFeatureDescriptorsRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {matrix_io.recognition.v1.StoreFeatureDescriptorsRequest} StoreFeatureDescriptorsRequest
                 */
                StoreFeatureDescriptorsRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.matrix_io.recognition.v1.StoreFeatureDescriptorsRequest)
                        return object;
                    var message = new $root.matrix_io.recognition.v1.StoreFeatureDescriptorsRequest();
                    if (object.visionRequest != null) {
                        if (typeof object.visionRequest !== "object")
                            throw TypeError(".matrix_io.recognition.v1.StoreFeatureDescriptorsRequest.visionRequest: object expected");
                        message.visionRequest = $root.matrix_io.vision.v1.VisionRequest.fromObject(object.visionRequest);
                    }
                    if (object.tags) {
                        if (!Array.isArray(object.tags))
                            throw TypeError(".matrix_io.recognition.v1.StoreFeatureDescriptorsRequest.tags: array expected");
                        message.tags = [];
                        for (var i = 0; i < object.tags.length; ++i)
                            message.tags[i] = String(object.tags[i]);
                    }
                    if (object.featureDescriptors) {
                        if (!Array.isArray(object.featureDescriptors))
                            throw TypeError(".matrix_io.recognition.v1.StoreFeatureDescriptorsRequest.featureDescriptors: array expected");
                        message.featureDescriptors = [];
                        for (var i = 0; i < object.featureDescriptors.length; ++i) {
                            if (typeof object.featureDescriptors[i] !== "object")
                                throw TypeError(".matrix_io.recognition.v1.StoreFeatureDescriptorsRequest.featureDescriptors: object expected");
                            message.featureDescriptors[i] = $root.matrix_io.recognition.v1.FeatureDescriptor.fromObject(object.featureDescriptors[i]);
                        }
                    }
                    if (object.deviceId) {
                        if (!Array.isArray(object.deviceId))
                            throw TypeError(".matrix_io.recognition.v1.StoreFeatureDescriptorsRequest.deviceId: array expected");
                        message.deviceId = [];
                        for (var i = 0; i < object.deviceId.length; ++i)
                            message.deviceId[i] = String(object.deviceId[i]);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a StoreFeatureDescriptorsRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof matrix_io.recognition.v1.StoreFeatureDescriptorsRequest
                 * @static
                 * @param {matrix_io.recognition.v1.StoreFeatureDescriptorsRequest} message StoreFeatureDescriptorsRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                StoreFeatureDescriptorsRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.tags = [];
                        object.featureDescriptors = [];
                        object.deviceId = [];
                    }
                    if (options.defaults)
                        object.visionRequest = null;
                    if (message.visionRequest != null && message.hasOwnProperty("visionRequest"))
                        object.visionRequest = $root.matrix_io.vision.v1.VisionRequest.toObject(message.visionRequest, options);
                    if (message.tags && message.tags.length) {
                        object.tags = [];
                        for (var j = 0; j < message.tags.length; ++j)
                            object.tags[j] = message.tags[j];
                    }
                    if (message.featureDescriptors && message.featureDescriptors.length) {
                        object.featureDescriptors = [];
                        for (var j = 0; j < message.featureDescriptors.length; ++j)
                            object.featureDescriptors[j] = $root.matrix_io.recognition.v1.FeatureDescriptor.toObject(message.featureDescriptors[j], options);
                    }
                    if (message.deviceId && message.deviceId.length) {
                        object.deviceId = [];
                        for (var j = 0; j < message.deviceId.length; ++j)
                            object.deviceId[j] = message.deviceId[j];
                    }
                    return object;
                };

                /**
                 * Converts this StoreFeatureDescriptorsRequest to JSON.
                 * @function toJSON
                 * @memberof matrix_io.recognition.v1.StoreFeatureDescriptorsRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                StoreFeatureDescriptorsRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return StoreFeatureDescriptorsRequest;
            })();

            v1.StoreFeatureDescriptorsResponse = (function() {

                /**
                 * Properties of a StoreFeatureDescriptorsResponse.
                 * @memberof matrix_io.recognition.v1
                 * @interface IStoreFeatureDescriptorsResponse
                 * @property {Array.<string>|null} [uuids] StoreFeatureDescriptorsResponse uuids
                 */

                /**
                 * Constructs a new StoreFeatureDescriptorsResponse.
                 * @memberof matrix_io.recognition.v1
                 * @classdesc Represents a StoreFeatureDescriptorsResponse.
                 * @implements IStoreFeatureDescriptorsResponse
                 * @constructor
                 * @param {matrix_io.recognition.v1.IStoreFeatureDescriptorsResponse=} [properties] Properties to set
                 */
                function StoreFeatureDescriptorsResponse(properties) {
                    this.uuids = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * StoreFeatureDescriptorsResponse uuids.
                 * @member {Array.<string>} uuids
                 * @memberof matrix_io.recognition.v1.StoreFeatureDescriptorsResponse
                 * @instance
                 */
                StoreFeatureDescriptorsResponse.prototype.uuids = $util.emptyArray;

                /**
                 * Creates a new StoreFeatureDescriptorsResponse instance using the specified properties.
                 * @function create
                 * @memberof matrix_io.recognition.v1.StoreFeatureDescriptorsResponse
                 * @static
                 * @param {matrix_io.recognition.v1.IStoreFeatureDescriptorsResponse=} [properties] Properties to set
                 * @returns {matrix_io.recognition.v1.StoreFeatureDescriptorsResponse} StoreFeatureDescriptorsResponse instance
                 */
                StoreFeatureDescriptorsResponse.create = function create(properties) {
                    return new StoreFeatureDescriptorsResponse(properties);
                };

                /**
                 * Encodes the specified StoreFeatureDescriptorsResponse message. Does not implicitly {@link matrix_io.recognition.v1.StoreFeatureDescriptorsResponse.verify|verify} messages.
                 * @function encode
                 * @memberof matrix_io.recognition.v1.StoreFeatureDescriptorsResponse
                 * @static
                 * @param {matrix_io.recognition.v1.IStoreFeatureDescriptorsResponse} message StoreFeatureDescriptorsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                StoreFeatureDescriptorsResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.uuids != null && message.uuids.length)
                        for (var i = 0; i < message.uuids.length; ++i)
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.uuids[i]);
                    return writer;
                };

                /**
                 * Encodes the specified StoreFeatureDescriptorsResponse message, length delimited. Does not implicitly {@link matrix_io.recognition.v1.StoreFeatureDescriptorsResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof matrix_io.recognition.v1.StoreFeatureDescriptorsResponse
                 * @static
                 * @param {matrix_io.recognition.v1.IStoreFeatureDescriptorsResponse} message StoreFeatureDescriptorsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                StoreFeatureDescriptorsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a StoreFeatureDescriptorsResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof matrix_io.recognition.v1.StoreFeatureDescriptorsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {matrix_io.recognition.v1.StoreFeatureDescriptorsResponse} StoreFeatureDescriptorsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                StoreFeatureDescriptorsResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.recognition.v1.StoreFeatureDescriptorsResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.uuids && message.uuids.length))
                                message.uuids = [];
                            message.uuids.push(reader.string());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a StoreFeatureDescriptorsResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof matrix_io.recognition.v1.StoreFeatureDescriptorsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {matrix_io.recognition.v1.StoreFeatureDescriptorsResponse} StoreFeatureDescriptorsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                StoreFeatureDescriptorsResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a StoreFeatureDescriptorsResponse message.
                 * @function verify
                 * @memberof matrix_io.recognition.v1.StoreFeatureDescriptorsResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                StoreFeatureDescriptorsResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.uuids != null && message.hasOwnProperty("uuids")) {
                        if (!Array.isArray(message.uuids))
                            return "uuids: array expected";
                        for (var i = 0; i < message.uuids.length; ++i)
                            if (!$util.isString(message.uuids[i]))
                                return "uuids: string[] expected";
                    }
                    return null;
                };

                /**
                 * Creates a StoreFeatureDescriptorsResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof matrix_io.recognition.v1.StoreFeatureDescriptorsResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {matrix_io.recognition.v1.StoreFeatureDescriptorsResponse} StoreFeatureDescriptorsResponse
                 */
                StoreFeatureDescriptorsResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.matrix_io.recognition.v1.StoreFeatureDescriptorsResponse)
                        return object;
                    var message = new $root.matrix_io.recognition.v1.StoreFeatureDescriptorsResponse();
                    if (object.uuids) {
                        if (!Array.isArray(object.uuids))
                            throw TypeError(".matrix_io.recognition.v1.StoreFeatureDescriptorsResponse.uuids: array expected");
                        message.uuids = [];
                        for (var i = 0; i < object.uuids.length; ++i)
                            message.uuids[i] = String(object.uuids[i]);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a StoreFeatureDescriptorsResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof matrix_io.recognition.v1.StoreFeatureDescriptorsResponse
                 * @static
                 * @param {matrix_io.recognition.v1.StoreFeatureDescriptorsResponse} message StoreFeatureDescriptorsResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                StoreFeatureDescriptorsResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uuids = [];
                    if (message.uuids && message.uuids.length) {
                        object.uuids = [];
                        for (var j = 0; j < message.uuids.length; ++j)
                            object.uuids[j] = message.uuids[j];
                    }
                    return object;
                };

                /**
                 * Converts this StoreFeatureDescriptorsResponse to JSON.
                 * @function toJSON
                 * @memberof matrix_io.recognition.v1.StoreFeatureDescriptorsResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                StoreFeatureDescriptorsResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return StoreFeatureDescriptorsResponse;
            })();

            v1.GetFeatureDescriptorsRequest = (function() {

                /**
                 * Properties of a GetFeatureDescriptorsRequest.
                 * @memberof matrix_io.recognition.v1
                 * @interface IGetFeatureDescriptorsRequest
                 * @property {Array.<string>|null} [uuids] GetFeatureDescriptorsRequest uuids
                 * @property {Array.<string>|null} [tags] GetFeatureDescriptorsRequest tags
                 * @property {string|null} [deviceId] GetFeatureDescriptorsRequest deviceId
                 * @property {string|null} [nextPageToken] GetFeatureDescriptorsRequest nextPageToken
                 */

                /**
                 * Constructs a new GetFeatureDescriptorsRequest.
                 * @memberof matrix_io.recognition.v1
                 * @classdesc Represents a GetFeatureDescriptorsRequest.
                 * @implements IGetFeatureDescriptorsRequest
                 * @constructor
                 * @param {matrix_io.recognition.v1.IGetFeatureDescriptorsRequest=} [properties] Properties to set
                 */
                function GetFeatureDescriptorsRequest(properties) {
                    this.uuids = [];
                    this.tags = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * GetFeatureDescriptorsRequest uuids.
                 * @member {Array.<string>} uuids
                 * @memberof matrix_io.recognition.v1.GetFeatureDescriptorsRequest
                 * @instance
                 */
                GetFeatureDescriptorsRequest.prototype.uuids = $util.emptyArray;

                /**
                 * GetFeatureDescriptorsRequest tags.
                 * @member {Array.<string>} tags
                 * @memberof matrix_io.recognition.v1.GetFeatureDescriptorsRequest
                 * @instance
                 */
                GetFeatureDescriptorsRequest.prototype.tags = $util.emptyArray;

                /**
                 * GetFeatureDescriptorsRequest deviceId.
                 * @member {string} deviceId
                 * @memberof matrix_io.recognition.v1.GetFeatureDescriptorsRequest
                 * @instance
                 */
                GetFeatureDescriptorsRequest.prototype.deviceId = "";

                /**
                 * GetFeatureDescriptorsRequest nextPageToken.
                 * @member {string} nextPageToken
                 * @memberof matrix_io.recognition.v1.GetFeatureDescriptorsRequest
                 * @instance
                 */
                GetFeatureDescriptorsRequest.prototype.nextPageToken = "";

                /**
                 * Creates a new GetFeatureDescriptorsRequest instance using the specified properties.
                 * @function create
                 * @memberof matrix_io.recognition.v1.GetFeatureDescriptorsRequest
                 * @static
                 * @param {matrix_io.recognition.v1.IGetFeatureDescriptorsRequest=} [properties] Properties to set
                 * @returns {matrix_io.recognition.v1.GetFeatureDescriptorsRequest} GetFeatureDescriptorsRequest instance
                 */
                GetFeatureDescriptorsRequest.create = function create(properties) {
                    return new GetFeatureDescriptorsRequest(properties);
                };

                /**
                 * Encodes the specified GetFeatureDescriptorsRequest message. Does not implicitly {@link matrix_io.recognition.v1.GetFeatureDescriptorsRequest.verify|verify} messages.
                 * @function encode
                 * @memberof matrix_io.recognition.v1.GetFeatureDescriptorsRequest
                 * @static
                 * @param {matrix_io.recognition.v1.IGetFeatureDescriptorsRequest} message GetFeatureDescriptorsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GetFeatureDescriptorsRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.uuids != null && message.uuids.length)
                        for (var i = 0; i < message.uuids.length; ++i)
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.uuids[i]);
                    if (message.tags != null && message.tags.length)
                        for (var i = 0; i < message.tags.length; ++i)
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.tags[i]);
                    if (message.deviceId != null && message.hasOwnProperty("deviceId"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.deviceId);
                    if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.nextPageToken);
                    return writer;
                };

                /**
                 * Encodes the specified GetFeatureDescriptorsRequest message, length delimited. Does not implicitly {@link matrix_io.recognition.v1.GetFeatureDescriptorsRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof matrix_io.recognition.v1.GetFeatureDescriptorsRequest
                 * @static
                 * @param {matrix_io.recognition.v1.IGetFeatureDescriptorsRequest} message GetFeatureDescriptorsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GetFeatureDescriptorsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a GetFeatureDescriptorsRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof matrix_io.recognition.v1.GetFeatureDescriptorsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {matrix_io.recognition.v1.GetFeatureDescriptorsRequest} GetFeatureDescriptorsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GetFeatureDescriptorsRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.recognition.v1.GetFeatureDescriptorsRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.uuids && message.uuids.length))
                                message.uuids = [];
                            message.uuids.push(reader.string());
                            break;
                        case 2:
                            if (!(message.tags && message.tags.length))
                                message.tags = [];
                            message.tags.push(reader.string());
                            break;
                        case 3:
                            message.deviceId = reader.string();
                            break;
                        case 4:
                            message.nextPageToken = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a GetFeatureDescriptorsRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof matrix_io.recognition.v1.GetFeatureDescriptorsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {matrix_io.recognition.v1.GetFeatureDescriptorsRequest} GetFeatureDescriptorsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GetFeatureDescriptorsRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a GetFeatureDescriptorsRequest message.
                 * @function verify
                 * @memberof matrix_io.recognition.v1.GetFeatureDescriptorsRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GetFeatureDescriptorsRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.uuids != null && message.hasOwnProperty("uuids")) {
                        if (!Array.isArray(message.uuids))
                            return "uuids: array expected";
                        for (var i = 0; i < message.uuids.length; ++i)
                            if (!$util.isString(message.uuids[i]))
                                return "uuids: string[] expected";
                    }
                    if (message.tags != null && message.hasOwnProperty("tags")) {
                        if (!Array.isArray(message.tags))
                            return "tags: array expected";
                        for (var i = 0; i < message.tags.length; ++i)
                            if (!$util.isString(message.tags[i]))
                                return "tags: string[] expected";
                    }
                    if (message.deviceId != null && message.hasOwnProperty("deviceId"))
                        if (!$util.isString(message.deviceId))
                            return "deviceId: string expected";
                    if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                        if (!$util.isString(message.nextPageToken))
                            return "nextPageToken: string expected";
                    return null;
                };

                /**
                 * Creates a GetFeatureDescriptorsRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof matrix_io.recognition.v1.GetFeatureDescriptorsRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {matrix_io.recognition.v1.GetFeatureDescriptorsRequest} GetFeatureDescriptorsRequest
                 */
                GetFeatureDescriptorsRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.matrix_io.recognition.v1.GetFeatureDescriptorsRequest)
                        return object;
                    var message = new $root.matrix_io.recognition.v1.GetFeatureDescriptorsRequest();
                    if (object.uuids) {
                        if (!Array.isArray(object.uuids))
                            throw TypeError(".matrix_io.recognition.v1.GetFeatureDescriptorsRequest.uuids: array expected");
                        message.uuids = [];
                        for (var i = 0; i < object.uuids.length; ++i)
                            message.uuids[i] = String(object.uuids[i]);
                    }
                    if (object.tags) {
                        if (!Array.isArray(object.tags))
                            throw TypeError(".matrix_io.recognition.v1.GetFeatureDescriptorsRequest.tags: array expected");
                        message.tags = [];
                        for (var i = 0; i < object.tags.length; ++i)
                            message.tags[i] = String(object.tags[i]);
                    }
                    if (object.deviceId != null)
                        message.deviceId = String(object.deviceId);
                    if (object.nextPageToken != null)
                        message.nextPageToken = String(object.nextPageToken);
                    return message;
                };

                /**
                 * Creates a plain object from a GetFeatureDescriptorsRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof matrix_io.recognition.v1.GetFeatureDescriptorsRequest
                 * @static
                 * @param {matrix_io.recognition.v1.GetFeatureDescriptorsRequest} message GetFeatureDescriptorsRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GetFeatureDescriptorsRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.uuids = [];
                        object.tags = [];
                    }
                    if (options.defaults) {
                        object.deviceId = "";
                        object.nextPageToken = "";
                    }
                    if (message.uuids && message.uuids.length) {
                        object.uuids = [];
                        for (var j = 0; j < message.uuids.length; ++j)
                            object.uuids[j] = message.uuids[j];
                    }
                    if (message.tags && message.tags.length) {
                        object.tags = [];
                        for (var j = 0; j < message.tags.length; ++j)
                            object.tags[j] = message.tags[j];
                    }
                    if (message.deviceId != null && message.hasOwnProperty("deviceId"))
                        object.deviceId = message.deviceId;
                    if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                        object.nextPageToken = message.nextPageToken;
                    return object;
                };

                /**
                 * Converts this GetFeatureDescriptorsRequest to JSON.
                 * @function toJSON
                 * @memberof matrix_io.recognition.v1.GetFeatureDescriptorsRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GetFeatureDescriptorsRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return GetFeatureDescriptorsRequest;
            })();

            v1.GetFeatureDescriptorsResponse = (function() {

                /**
                 * Properties of a GetFeatureDescriptorsResponse.
                 * @memberof matrix_io.recognition.v1
                 * @interface IGetFeatureDescriptorsResponse
                 * @property {matrix_io.recognition.v1.IFeatureDescriptorList|null} [featureDescriptorList] GetFeatureDescriptorsResponse featureDescriptorList
                 * @property {string|null} [nextPageToken] GetFeatureDescriptorsResponse nextPageToken
                 */

                /**
                 * Constructs a new GetFeatureDescriptorsResponse.
                 * @memberof matrix_io.recognition.v1
                 * @classdesc Represents a GetFeatureDescriptorsResponse.
                 * @implements IGetFeatureDescriptorsResponse
                 * @constructor
                 * @param {matrix_io.recognition.v1.IGetFeatureDescriptorsResponse=} [properties] Properties to set
                 */
                function GetFeatureDescriptorsResponse(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * GetFeatureDescriptorsResponse featureDescriptorList.
                 * @member {matrix_io.recognition.v1.IFeatureDescriptorList|null|undefined} featureDescriptorList
                 * @memberof matrix_io.recognition.v1.GetFeatureDescriptorsResponse
                 * @instance
                 */
                GetFeatureDescriptorsResponse.prototype.featureDescriptorList = null;

                /**
                 * GetFeatureDescriptorsResponse nextPageToken.
                 * @member {string} nextPageToken
                 * @memberof matrix_io.recognition.v1.GetFeatureDescriptorsResponse
                 * @instance
                 */
                GetFeatureDescriptorsResponse.prototype.nextPageToken = "";

                /**
                 * Creates a new GetFeatureDescriptorsResponse instance using the specified properties.
                 * @function create
                 * @memberof matrix_io.recognition.v1.GetFeatureDescriptorsResponse
                 * @static
                 * @param {matrix_io.recognition.v1.IGetFeatureDescriptorsResponse=} [properties] Properties to set
                 * @returns {matrix_io.recognition.v1.GetFeatureDescriptorsResponse} GetFeatureDescriptorsResponse instance
                 */
                GetFeatureDescriptorsResponse.create = function create(properties) {
                    return new GetFeatureDescriptorsResponse(properties);
                };

                /**
                 * Encodes the specified GetFeatureDescriptorsResponse message. Does not implicitly {@link matrix_io.recognition.v1.GetFeatureDescriptorsResponse.verify|verify} messages.
                 * @function encode
                 * @memberof matrix_io.recognition.v1.GetFeatureDescriptorsResponse
                 * @static
                 * @param {matrix_io.recognition.v1.IGetFeatureDescriptorsResponse} message GetFeatureDescriptorsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GetFeatureDescriptorsResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.featureDescriptorList != null && message.hasOwnProperty("featureDescriptorList"))
                        $root.matrix_io.recognition.v1.FeatureDescriptorList.encode(message.featureDescriptorList, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.nextPageToken);
                    return writer;
                };

                /**
                 * Encodes the specified GetFeatureDescriptorsResponse message, length delimited. Does not implicitly {@link matrix_io.recognition.v1.GetFeatureDescriptorsResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof matrix_io.recognition.v1.GetFeatureDescriptorsResponse
                 * @static
                 * @param {matrix_io.recognition.v1.IGetFeatureDescriptorsResponse} message GetFeatureDescriptorsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GetFeatureDescriptorsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a GetFeatureDescriptorsResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof matrix_io.recognition.v1.GetFeatureDescriptorsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {matrix_io.recognition.v1.GetFeatureDescriptorsResponse} GetFeatureDescriptorsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GetFeatureDescriptorsResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.recognition.v1.GetFeatureDescriptorsResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.featureDescriptorList = $root.matrix_io.recognition.v1.FeatureDescriptorList.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.nextPageToken = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a GetFeatureDescriptorsResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof matrix_io.recognition.v1.GetFeatureDescriptorsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {matrix_io.recognition.v1.GetFeatureDescriptorsResponse} GetFeatureDescriptorsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GetFeatureDescriptorsResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a GetFeatureDescriptorsResponse message.
                 * @function verify
                 * @memberof matrix_io.recognition.v1.GetFeatureDescriptorsResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GetFeatureDescriptorsResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.featureDescriptorList != null && message.hasOwnProperty("featureDescriptorList")) {
                        var error = $root.matrix_io.recognition.v1.FeatureDescriptorList.verify(message.featureDescriptorList);
                        if (error)
                            return "featureDescriptorList." + error;
                    }
                    if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                        if (!$util.isString(message.nextPageToken))
                            return "nextPageToken: string expected";
                    return null;
                };

                /**
                 * Creates a GetFeatureDescriptorsResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof matrix_io.recognition.v1.GetFeatureDescriptorsResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {matrix_io.recognition.v1.GetFeatureDescriptorsResponse} GetFeatureDescriptorsResponse
                 */
                GetFeatureDescriptorsResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.matrix_io.recognition.v1.GetFeatureDescriptorsResponse)
                        return object;
                    var message = new $root.matrix_io.recognition.v1.GetFeatureDescriptorsResponse();
                    if (object.featureDescriptorList != null) {
                        if (typeof object.featureDescriptorList !== "object")
                            throw TypeError(".matrix_io.recognition.v1.GetFeatureDescriptorsResponse.featureDescriptorList: object expected");
                        message.featureDescriptorList = $root.matrix_io.recognition.v1.FeatureDescriptorList.fromObject(object.featureDescriptorList);
                    }
                    if (object.nextPageToken != null)
                        message.nextPageToken = String(object.nextPageToken);
                    return message;
                };

                /**
                 * Creates a plain object from a GetFeatureDescriptorsResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof matrix_io.recognition.v1.GetFeatureDescriptorsResponse
                 * @static
                 * @param {matrix_io.recognition.v1.GetFeatureDescriptorsResponse} message GetFeatureDescriptorsResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GetFeatureDescriptorsResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.featureDescriptorList = null;
                        object.nextPageToken = "";
                    }
                    if (message.featureDescriptorList != null && message.hasOwnProperty("featureDescriptorList"))
                        object.featureDescriptorList = $root.matrix_io.recognition.v1.FeatureDescriptorList.toObject(message.featureDescriptorList, options);
                    if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                        object.nextPageToken = message.nextPageToken;
                    return object;
                };

                /**
                 * Converts this GetFeatureDescriptorsResponse to JSON.
                 * @function toJSON
                 * @memberof matrix_io.recognition.v1.GetFeatureDescriptorsResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GetFeatureDescriptorsResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return GetFeatureDescriptorsResponse;
            })();

            v1.DeleteFeatureDescriptorsRequest = (function() {

                /**
                 * Properties of a DeleteFeatureDescriptorsRequest.
                 * @memberof matrix_io.recognition.v1
                 * @interface IDeleteFeatureDescriptorsRequest
                 * @property {Array.<string>|null} [uuids] DeleteFeatureDescriptorsRequest uuids
                 * @property {Array.<string>|null} [tags] DeleteFeatureDescriptorsRequest tags
                 */

                /**
                 * Constructs a new DeleteFeatureDescriptorsRequest.
                 * @memberof matrix_io.recognition.v1
                 * @classdesc Represents a DeleteFeatureDescriptorsRequest.
                 * @implements IDeleteFeatureDescriptorsRequest
                 * @constructor
                 * @param {matrix_io.recognition.v1.IDeleteFeatureDescriptorsRequest=} [properties] Properties to set
                 */
                function DeleteFeatureDescriptorsRequest(properties) {
                    this.uuids = [];
                    this.tags = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * DeleteFeatureDescriptorsRequest uuids.
                 * @member {Array.<string>} uuids
                 * @memberof matrix_io.recognition.v1.DeleteFeatureDescriptorsRequest
                 * @instance
                 */
                DeleteFeatureDescriptorsRequest.prototype.uuids = $util.emptyArray;

                /**
                 * DeleteFeatureDescriptorsRequest tags.
                 * @member {Array.<string>} tags
                 * @memberof matrix_io.recognition.v1.DeleteFeatureDescriptorsRequest
                 * @instance
                 */
                DeleteFeatureDescriptorsRequest.prototype.tags = $util.emptyArray;

                /**
                 * Creates a new DeleteFeatureDescriptorsRequest instance using the specified properties.
                 * @function create
                 * @memberof matrix_io.recognition.v1.DeleteFeatureDescriptorsRequest
                 * @static
                 * @param {matrix_io.recognition.v1.IDeleteFeatureDescriptorsRequest=} [properties] Properties to set
                 * @returns {matrix_io.recognition.v1.DeleteFeatureDescriptorsRequest} DeleteFeatureDescriptorsRequest instance
                 */
                DeleteFeatureDescriptorsRequest.create = function create(properties) {
                    return new DeleteFeatureDescriptorsRequest(properties);
                };

                /**
                 * Encodes the specified DeleteFeatureDescriptorsRequest message. Does not implicitly {@link matrix_io.recognition.v1.DeleteFeatureDescriptorsRequest.verify|verify} messages.
                 * @function encode
                 * @memberof matrix_io.recognition.v1.DeleteFeatureDescriptorsRequest
                 * @static
                 * @param {matrix_io.recognition.v1.IDeleteFeatureDescriptorsRequest} message DeleteFeatureDescriptorsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DeleteFeatureDescriptorsRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.uuids != null && message.uuids.length)
                        for (var i = 0; i < message.uuids.length; ++i)
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.uuids[i]);
                    if (message.tags != null && message.tags.length)
                        for (var i = 0; i < message.tags.length; ++i)
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.tags[i]);
                    return writer;
                };

                /**
                 * Encodes the specified DeleteFeatureDescriptorsRequest message, length delimited. Does not implicitly {@link matrix_io.recognition.v1.DeleteFeatureDescriptorsRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof matrix_io.recognition.v1.DeleteFeatureDescriptorsRequest
                 * @static
                 * @param {matrix_io.recognition.v1.IDeleteFeatureDescriptorsRequest} message DeleteFeatureDescriptorsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DeleteFeatureDescriptorsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a DeleteFeatureDescriptorsRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof matrix_io.recognition.v1.DeleteFeatureDescriptorsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {matrix_io.recognition.v1.DeleteFeatureDescriptorsRequest} DeleteFeatureDescriptorsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DeleteFeatureDescriptorsRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.recognition.v1.DeleteFeatureDescriptorsRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.uuids && message.uuids.length))
                                message.uuids = [];
                            message.uuids.push(reader.string());
                            break;
                        case 2:
                            if (!(message.tags && message.tags.length))
                                message.tags = [];
                            message.tags.push(reader.string());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a DeleteFeatureDescriptorsRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof matrix_io.recognition.v1.DeleteFeatureDescriptorsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {matrix_io.recognition.v1.DeleteFeatureDescriptorsRequest} DeleteFeatureDescriptorsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DeleteFeatureDescriptorsRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a DeleteFeatureDescriptorsRequest message.
                 * @function verify
                 * @memberof matrix_io.recognition.v1.DeleteFeatureDescriptorsRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DeleteFeatureDescriptorsRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.uuids != null && message.hasOwnProperty("uuids")) {
                        if (!Array.isArray(message.uuids))
                            return "uuids: array expected";
                        for (var i = 0; i < message.uuids.length; ++i)
                            if (!$util.isString(message.uuids[i]))
                                return "uuids: string[] expected";
                    }
                    if (message.tags != null && message.hasOwnProperty("tags")) {
                        if (!Array.isArray(message.tags))
                            return "tags: array expected";
                        for (var i = 0; i < message.tags.length; ++i)
                            if (!$util.isString(message.tags[i]))
                                return "tags: string[] expected";
                    }
                    return null;
                };

                /**
                 * Creates a DeleteFeatureDescriptorsRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof matrix_io.recognition.v1.DeleteFeatureDescriptorsRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {matrix_io.recognition.v1.DeleteFeatureDescriptorsRequest} DeleteFeatureDescriptorsRequest
                 */
                DeleteFeatureDescriptorsRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.matrix_io.recognition.v1.DeleteFeatureDescriptorsRequest)
                        return object;
                    var message = new $root.matrix_io.recognition.v1.DeleteFeatureDescriptorsRequest();
                    if (object.uuids) {
                        if (!Array.isArray(object.uuids))
                            throw TypeError(".matrix_io.recognition.v1.DeleteFeatureDescriptorsRequest.uuids: array expected");
                        message.uuids = [];
                        for (var i = 0; i < object.uuids.length; ++i)
                            message.uuids[i] = String(object.uuids[i]);
                    }
                    if (object.tags) {
                        if (!Array.isArray(object.tags))
                            throw TypeError(".matrix_io.recognition.v1.DeleteFeatureDescriptorsRequest.tags: array expected");
                        message.tags = [];
                        for (var i = 0; i < object.tags.length; ++i)
                            message.tags[i] = String(object.tags[i]);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a DeleteFeatureDescriptorsRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof matrix_io.recognition.v1.DeleteFeatureDescriptorsRequest
                 * @static
                 * @param {matrix_io.recognition.v1.DeleteFeatureDescriptorsRequest} message DeleteFeatureDescriptorsRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DeleteFeatureDescriptorsRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.uuids = [];
                        object.tags = [];
                    }
                    if (message.uuids && message.uuids.length) {
                        object.uuids = [];
                        for (var j = 0; j < message.uuids.length; ++j)
                            object.uuids[j] = message.uuids[j];
                    }
                    if (message.tags && message.tags.length) {
                        object.tags = [];
                        for (var j = 0; j < message.tags.length; ++j)
                            object.tags[j] = message.tags[j];
                    }
                    return object;
                };

                /**
                 * Converts this DeleteFeatureDescriptorsRequest to JSON.
                 * @function toJSON
                 * @memberof matrix_io.recognition.v1.DeleteFeatureDescriptorsRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DeleteFeatureDescriptorsRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return DeleteFeatureDescriptorsRequest;
            })();

            v1.DeleteFeatureDescriptorsResponse = (function() {

                /**
                 * Properties of a DeleteFeatureDescriptorsResponse.
                 * @memberof matrix_io.recognition.v1
                 * @interface IDeleteFeatureDescriptorsResponse
                 * @property {Array.<string>|null} [uuids] DeleteFeatureDescriptorsResponse uuids
                 */

                /**
                 * Constructs a new DeleteFeatureDescriptorsResponse.
                 * @memberof matrix_io.recognition.v1
                 * @classdesc Represents a DeleteFeatureDescriptorsResponse.
                 * @implements IDeleteFeatureDescriptorsResponse
                 * @constructor
                 * @param {matrix_io.recognition.v1.IDeleteFeatureDescriptorsResponse=} [properties] Properties to set
                 */
                function DeleteFeatureDescriptorsResponse(properties) {
                    this.uuids = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * DeleteFeatureDescriptorsResponse uuids.
                 * @member {Array.<string>} uuids
                 * @memberof matrix_io.recognition.v1.DeleteFeatureDescriptorsResponse
                 * @instance
                 */
                DeleteFeatureDescriptorsResponse.prototype.uuids = $util.emptyArray;

                /**
                 * Creates a new DeleteFeatureDescriptorsResponse instance using the specified properties.
                 * @function create
                 * @memberof matrix_io.recognition.v1.DeleteFeatureDescriptorsResponse
                 * @static
                 * @param {matrix_io.recognition.v1.IDeleteFeatureDescriptorsResponse=} [properties] Properties to set
                 * @returns {matrix_io.recognition.v1.DeleteFeatureDescriptorsResponse} DeleteFeatureDescriptorsResponse instance
                 */
                DeleteFeatureDescriptorsResponse.create = function create(properties) {
                    return new DeleteFeatureDescriptorsResponse(properties);
                };

                /**
                 * Encodes the specified DeleteFeatureDescriptorsResponse message. Does not implicitly {@link matrix_io.recognition.v1.DeleteFeatureDescriptorsResponse.verify|verify} messages.
                 * @function encode
                 * @memberof matrix_io.recognition.v1.DeleteFeatureDescriptorsResponse
                 * @static
                 * @param {matrix_io.recognition.v1.IDeleteFeatureDescriptorsResponse} message DeleteFeatureDescriptorsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DeleteFeatureDescriptorsResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.uuids != null && message.uuids.length)
                        for (var i = 0; i < message.uuids.length; ++i)
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.uuids[i]);
                    return writer;
                };

                /**
                 * Encodes the specified DeleteFeatureDescriptorsResponse message, length delimited. Does not implicitly {@link matrix_io.recognition.v1.DeleteFeatureDescriptorsResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof matrix_io.recognition.v1.DeleteFeatureDescriptorsResponse
                 * @static
                 * @param {matrix_io.recognition.v1.IDeleteFeatureDescriptorsResponse} message DeleteFeatureDescriptorsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DeleteFeatureDescriptorsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a DeleteFeatureDescriptorsResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof matrix_io.recognition.v1.DeleteFeatureDescriptorsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {matrix_io.recognition.v1.DeleteFeatureDescriptorsResponse} DeleteFeatureDescriptorsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DeleteFeatureDescriptorsResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.recognition.v1.DeleteFeatureDescriptorsResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.uuids && message.uuids.length))
                                message.uuids = [];
                            message.uuids.push(reader.string());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a DeleteFeatureDescriptorsResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof matrix_io.recognition.v1.DeleteFeatureDescriptorsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {matrix_io.recognition.v1.DeleteFeatureDescriptorsResponse} DeleteFeatureDescriptorsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DeleteFeatureDescriptorsResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a DeleteFeatureDescriptorsResponse message.
                 * @function verify
                 * @memberof matrix_io.recognition.v1.DeleteFeatureDescriptorsResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DeleteFeatureDescriptorsResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.uuids != null && message.hasOwnProperty("uuids")) {
                        if (!Array.isArray(message.uuids))
                            return "uuids: array expected";
                        for (var i = 0; i < message.uuids.length; ++i)
                            if (!$util.isString(message.uuids[i]))
                                return "uuids: string[] expected";
                    }
                    return null;
                };

                /**
                 * Creates a DeleteFeatureDescriptorsResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof matrix_io.recognition.v1.DeleteFeatureDescriptorsResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {matrix_io.recognition.v1.DeleteFeatureDescriptorsResponse} DeleteFeatureDescriptorsResponse
                 */
                DeleteFeatureDescriptorsResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.matrix_io.recognition.v1.DeleteFeatureDescriptorsResponse)
                        return object;
                    var message = new $root.matrix_io.recognition.v1.DeleteFeatureDescriptorsResponse();
                    if (object.uuids) {
                        if (!Array.isArray(object.uuids))
                            throw TypeError(".matrix_io.recognition.v1.DeleteFeatureDescriptorsResponse.uuids: array expected");
                        message.uuids = [];
                        for (var i = 0; i < object.uuids.length; ++i)
                            message.uuids[i] = String(object.uuids[i]);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a DeleteFeatureDescriptorsResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof matrix_io.recognition.v1.DeleteFeatureDescriptorsResponse
                 * @static
                 * @param {matrix_io.recognition.v1.DeleteFeatureDescriptorsResponse} message DeleteFeatureDescriptorsResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DeleteFeatureDescriptorsResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uuids = [];
                    if (message.uuids && message.uuids.length) {
                        object.uuids = [];
                        for (var j = 0; j < message.uuids.length; ++j)
                            object.uuids[j] = message.uuids[j];
                    }
                    return object;
                };

                /**
                 * Converts this DeleteFeatureDescriptorsResponse to JSON.
                 * @function toJSON
                 * @memberof matrix_io.recognition.v1.DeleteFeatureDescriptorsResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DeleteFeatureDescriptorsResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return DeleteFeatureDescriptorsResponse;
            })();

            v1.RecognizeRequest = (function() {

                /**
                 * Properties of a RecognizeRequest.
                 * @memberof matrix_io.recognition.v1
                 * @interface IRecognizeRequest
                 * @property {matrix_io.vision.v1.IVisionRequest|null} [visionRequest] RecognizeRequest visionRequest
                 * @property {matrix_io.recognition.v1.IFeatureDescriptorList|null} [featureDescriptorList] RecognizeRequest featureDescriptorList
                 * @property {string|null} [matchingAlgorithmVersion] RecognizeRequest matchingAlgorithmVersion
                 */

                /**
                 * Constructs a new RecognizeRequest.
                 * @memberof matrix_io.recognition.v1
                 * @classdesc Represents a RecognizeRequest.
                 * @implements IRecognizeRequest
                 * @constructor
                 * @param {matrix_io.recognition.v1.IRecognizeRequest=} [properties] Properties to set
                 */
                function RecognizeRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RecognizeRequest visionRequest.
                 * @member {matrix_io.vision.v1.IVisionRequest|null|undefined} visionRequest
                 * @memberof matrix_io.recognition.v1.RecognizeRequest
                 * @instance
                 */
                RecognizeRequest.prototype.visionRequest = null;

                /**
                 * RecognizeRequest featureDescriptorList.
                 * @member {matrix_io.recognition.v1.IFeatureDescriptorList|null|undefined} featureDescriptorList
                 * @memberof matrix_io.recognition.v1.RecognizeRequest
                 * @instance
                 */
                RecognizeRequest.prototype.featureDescriptorList = null;

                /**
                 * RecognizeRequest matchingAlgorithmVersion.
                 * @member {string} matchingAlgorithmVersion
                 * @memberof matrix_io.recognition.v1.RecognizeRequest
                 * @instance
                 */
                RecognizeRequest.prototype.matchingAlgorithmVersion = "";

                /**
                 * Creates a new RecognizeRequest instance using the specified properties.
                 * @function create
                 * @memberof matrix_io.recognition.v1.RecognizeRequest
                 * @static
                 * @param {matrix_io.recognition.v1.IRecognizeRequest=} [properties] Properties to set
                 * @returns {matrix_io.recognition.v1.RecognizeRequest} RecognizeRequest instance
                 */
                RecognizeRequest.create = function create(properties) {
                    return new RecognizeRequest(properties);
                };

                /**
                 * Encodes the specified RecognizeRequest message. Does not implicitly {@link matrix_io.recognition.v1.RecognizeRequest.verify|verify} messages.
                 * @function encode
                 * @memberof matrix_io.recognition.v1.RecognizeRequest
                 * @static
                 * @param {matrix_io.recognition.v1.IRecognizeRequest} message RecognizeRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RecognizeRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.visionRequest != null && message.hasOwnProperty("visionRequest"))
                        $root.matrix_io.vision.v1.VisionRequest.encode(message.visionRequest, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.featureDescriptorList != null && message.hasOwnProperty("featureDescriptorList"))
                        $root.matrix_io.recognition.v1.FeatureDescriptorList.encode(message.featureDescriptorList, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.matchingAlgorithmVersion != null && message.hasOwnProperty("matchingAlgorithmVersion"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.matchingAlgorithmVersion);
                    return writer;
                };

                /**
                 * Encodes the specified RecognizeRequest message, length delimited. Does not implicitly {@link matrix_io.recognition.v1.RecognizeRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof matrix_io.recognition.v1.RecognizeRequest
                 * @static
                 * @param {matrix_io.recognition.v1.IRecognizeRequest} message RecognizeRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RecognizeRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RecognizeRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof matrix_io.recognition.v1.RecognizeRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {matrix_io.recognition.v1.RecognizeRequest} RecognizeRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RecognizeRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.recognition.v1.RecognizeRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.visionRequest = $root.matrix_io.vision.v1.VisionRequest.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.featureDescriptorList = $root.matrix_io.recognition.v1.FeatureDescriptorList.decode(reader, reader.uint32());
                            break;
                        case 3:
                            message.matchingAlgorithmVersion = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RecognizeRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof matrix_io.recognition.v1.RecognizeRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {matrix_io.recognition.v1.RecognizeRequest} RecognizeRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RecognizeRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RecognizeRequest message.
                 * @function verify
                 * @memberof matrix_io.recognition.v1.RecognizeRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RecognizeRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.visionRequest != null && message.hasOwnProperty("visionRequest")) {
                        var error = $root.matrix_io.vision.v1.VisionRequest.verify(message.visionRequest);
                        if (error)
                            return "visionRequest." + error;
                    }
                    if (message.featureDescriptorList != null && message.hasOwnProperty("featureDescriptorList")) {
                        var error = $root.matrix_io.recognition.v1.FeatureDescriptorList.verify(message.featureDescriptorList);
                        if (error)
                            return "featureDescriptorList." + error;
                    }
                    if (message.matchingAlgorithmVersion != null && message.hasOwnProperty("matchingAlgorithmVersion"))
                        if (!$util.isString(message.matchingAlgorithmVersion))
                            return "matchingAlgorithmVersion: string expected";
                    return null;
                };

                /**
                 * Creates a RecognizeRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof matrix_io.recognition.v1.RecognizeRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {matrix_io.recognition.v1.RecognizeRequest} RecognizeRequest
                 */
                RecognizeRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.matrix_io.recognition.v1.RecognizeRequest)
                        return object;
                    var message = new $root.matrix_io.recognition.v1.RecognizeRequest();
                    if (object.visionRequest != null) {
                        if (typeof object.visionRequest !== "object")
                            throw TypeError(".matrix_io.recognition.v1.RecognizeRequest.visionRequest: object expected");
                        message.visionRequest = $root.matrix_io.vision.v1.VisionRequest.fromObject(object.visionRequest);
                    }
                    if (object.featureDescriptorList != null) {
                        if (typeof object.featureDescriptorList !== "object")
                            throw TypeError(".matrix_io.recognition.v1.RecognizeRequest.featureDescriptorList: object expected");
                        message.featureDescriptorList = $root.matrix_io.recognition.v1.FeatureDescriptorList.fromObject(object.featureDescriptorList);
                    }
                    if (object.matchingAlgorithmVersion != null)
                        message.matchingAlgorithmVersion = String(object.matchingAlgorithmVersion);
                    return message;
                };

                /**
                 * Creates a plain object from a RecognizeRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof matrix_io.recognition.v1.RecognizeRequest
                 * @static
                 * @param {matrix_io.recognition.v1.RecognizeRequest} message RecognizeRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RecognizeRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.visionRequest = null;
                        object.featureDescriptorList = null;
                        object.matchingAlgorithmVersion = "";
                    }
                    if (message.visionRequest != null && message.hasOwnProperty("visionRequest"))
                        object.visionRequest = $root.matrix_io.vision.v1.VisionRequest.toObject(message.visionRequest, options);
                    if (message.featureDescriptorList != null && message.hasOwnProperty("featureDescriptorList"))
                        object.featureDescriptorList = $root.matrix_io.recognition.v1.FeatureDescriptorList.toObject(message.featureDescriptorList, options);
                    if (message.matchingAlgorithmVersion != null && message.hasOwnProperty("matchingAlgorithmVersion"))
                        object.matchingAlgorithmVersion = message.matchingAlgorithmVersion;
                    return object;
                };

                /**
                 * Converts this RecognizeRequest to JSON.
                 * @function toJSON
                 * @memberof matrix_io.recognition.v1.RecognizeRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RecognizeRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RecognizeRequest;
            })();

            v1.FeatureDescriptorMatch = (function() {

                /**
                 * Properties of a FeatureDescriptorMatch.
                 * @memberof matrix_io.recognition.v1
                 * @interface IFeatureDescriptorMatch
                 * @property {Array.<string>|null} [tags] FeatureDescriptorMatch tags
                 * @property {number|null} [score] FeatureDescriptorMatch score
                 */

                /**
                 * Constructs a new FeatureDescriptorMatch.
                 * @memberof matrix_io.recognition.v1
                 * @classdesc Represents a FeatureDescriptorMatch.
                 * @implements IFeatureDescriptorMatch
                 * @constructor
                 * @param {matrix_io.recognition.v1.IFeatureDescriptorMatch=} [properties] Properties to set
                 */
                function FeatureDescriptorMatch(properties) {
                    this.tags = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * FeatureDescriptorMatch tags.
                 * @member {Array.<string>} tags
                 * @memberof matrix_io.recognition.v1.FeatureDescriptorMatch
                 * @instance
                 */
                FeatureDescriptorMatch.prototype.tags = $util.emptyArray;

                /**
                 * FeatureDescriptorMatch score.
                 * @member {number} score
                 * @memberof matrix_io.recognition.v1.FeatureDescriptorMatch
                 * @instance
                 */
                FeatureDescriptorMatch.prototype.score = 0;

                /**
                 * Creates a new FeatureDescriptorMatch instance using the specified properties.
                 * @function create
                 * @memberof matrix_io.recognition.v1.FeatureDescriptorMatch
                 * @static
                 * @param {matrix_io.recognition.v1.IFeatureDescriptorMatch=} [properties] Properties to set
                 * @returns {matrix_io.recognition.v1.FeatureDescriptorMatch} FeatureDescriptorMatch instance
                 */
                FeatureDescriptorMatch.create = function create(properties) {
                    return new FeatureDescriptorMatch(properties);
                };

                /**
                 * Encodes the specified FeatureDescriptorMatch message. Does not implicitly {@link matrix_io.recognition.v1.FeatureDescriptorMatch.verify|verify} messages.
                 * @function encode
                 * @memberof matrix_io.recognition.v1.FeatureDescriptorMatch
                 * @static
                 * @param {matrix_io.recognition.v1.IFeatureDescriptorMatch} message FeatureDescriptorMatch message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FeatureDescriptorMatch.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.tags != null && message.tags.length)
                        for (var i = 0; i < message.tags.length; ++i)
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.tags[i]);
                    if (message.score != null && message.hasOwnProperty("score"))
                        writer.uint32(/* id 2, wireType 5 =*/21).float(message.score);
                    return writer;
                };

                /**
                 * Encodes the specified FeatureDescriptorMatch message, length delimited. Does not implicitly {@link matrix_io.recognition.v1.FeatureDescriptorMatch.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof matrix_io.recognition.v1.FeatureDescriptorMatch
                 * @static
                 * @param {matrix_io.recognition.v1.IFeatureDescriptorMatch} message FeatureDescriptorMatch message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FeatureDescriptorMatch.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a FeatureDescriptorMatch message from the specified reader or buffer.
                 * @function decode
                 * @memberof matrix_io.recognition.v1.FeatureDescriptorMatch
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {matrix_io.recognition.v1.FeatureDescriptorMatch} FeatureDescriptorMatch
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FeatureDescriptorMatch.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.recognition.v1.FeatureDescriptorMatch();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.tags && message.tags.length))
                                message.tags = [];
                            message.tags.push(reader.string());
                            break;
                        case 2:
                            message.score = reader.float();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a FeatureDescriptorMatch message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof matrix_io.recognition.v1.FeatureDescriptorMatch
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {matrix_io.recognition.v1.FeatureDescriptorMatch} FeatureDescriptorMatch
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FeatureDescriptorMatch.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a FeatureDescriptorMatch message.
                 * @function verify
                 * @memberof matrix_io.recognition.v1.FeatureDescriptorMatch
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FeatureDescriptorMatch.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.tags != null && message.hasOwnProperty("tags")) {
                        if (!Array.isArray(message.tags))
                            return "tags: array expected";
                        for (var i = 0; i < message.tags.length; ++i)
                            if (!$util.isString(message.tags[i]))
                                return "tags: string[] expected";
                    }
                    if (message.score != null && message.hasOwnProperty("score"))
                        if (typeof message.score !== "number")
                            return "score: number expected";
                    return null;
                };

                /**
                 * Creates a FeatureDescriptorMatch message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof matrix_io.recognition.v1.FeatureDescriptorMatch
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {matrix_io.recognition.v1.FeatureDescriptorMatch} FeatureDescriptorMatch
                 */
                FeatureDescriptorMatch.fromObject = function fromObject(object) {
                    if (object instanceof $root.matrix_io.recognition.v1.FeatureDescriptorMatch)
                        return object;
                    var message = new $root.matrix_io.recognition.v1.FeatureDescriptorMatch();
                    if (object.tags) {
                        if (!Array.isArray(object.tags))
                            throw TypeError(".matrix_io.recognition.v1.FeatureDescriptorMatch.tags: array expected");
                        message.tags = [];
                        for (var i = 0; i < object.tags.length; ++i)
                            message.tags[i] = String(object.tags[i]);
                    }
                    if (object.score != null)
                        message.score = Number(object.score);
                    return message;
                };

                /**
                 * Creates a plain object from a FeatureDescriptorMatch message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof matrix_io.recognition.v1.FeatureDescriptorMatch
                 * @static
                 * @param {matrix_io.recognition.v1.FeatureDescriptorMatch} message FeatureDescriptorMatch
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FeatureDescriptorMatch.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.tags = [];
                    if (options.defaults)
                        object.score = 0;
                    if (message.tags && message.tags.length) {
                        object.tags = [];
                        for (var j = 0; j < message.tags.length; ++j)
                            object.tags[j] = message.tags[j];
                    }
                    if (message.score != null && message.hasOwnProperty("score"))
                        object.score = options.json && !isFinite(message.score) ? String(message.score) : message.score;
                    return object;
                };

                /**
                 * Converts this FeatureDescriptorMatch to JSON.
                 * @function toJSON
                 * @memberof matrix_io.recognition.v1.FeatureDescriptorMatch
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FeatureDescriptorMatch.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return FeatureDescriptorMatch;
            })();

            v1.RecognizeResponse = (function() {

                /**
                 * Properties of a RecognizeResponse.
                 * @memberof matrix_io.recognition.v1
                 * @interface IRecognizeResponse
                 * @property {Array.<matrix_io.recognition.v1.IFeatureDescriptorMatch>|null} [matches] RecognizeResponse matches
                 */

                /**
                 * Constructs a new RecognizeResponse.
                 * @memberof matrix_io.recognition.v1
                 * @classdesc Represents a RecognizeResponse.
                 * @implements IRecognizeResponse
                 * @constructor
                 * @param {matrix_io.recognition.v1.IRecognizeResponse=} [properties] Properties to set
                 */
                function RecognizeResponse(properties) {
                    this.matches = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RecognizeResponse matches.
                 * @member {Array.<matrix_io.recognition.v1.IFeatureDescriptorMatch>} matches
                 * @memberof matrix_io.recognition.v1.RecognizeResponse
                 * @instance
                 */
                RecognizeResponse.prototype.matches = $util.emptyArray;

                /**
                 * Creates a new RecognizeResponse instance using the specified properties.
                 * @function create
                 * @memberof matrix_io.recognition.v1.RecognizeResponse
                 * @static
                 * @param {matrix_io.recognition.v1.IRecognizeResponse=} [properties] Properties to set
                 * @returns {matrix_io.recognition.v1.RecognizeResponse} RecognizeResponse instance
                 */
                RecognizeResponse.create = function create(properties) {
                    return new RecognizeResponse(properties);
                };

                /**
                 * Encodes the specified RecognizeResponse message. Does not implicitly {@link matrix_io.recognition.v1.RecognizeResponse.verify|verify} messages.
                 * @function encode
                 * @memberof matrix_io.recognition.v1.RecognizeResponse
                 * @static
                 * @param {matrix_io.recognition.v1.IRecognizeResponse} message RecognizeResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RecognizeResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.matches != null && message.matches.length)
                        for (var i = 0; i < message.matches.length; ++i)
                            $root.matrix_io.recognition.v1.FeatureDescriptorMatch.encode(message.matches[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified RecognizeResponse message, length delimited. Does not implicitly {@link matrix_io.recognition.v1.RecognizeResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof matrix_io.recognition.v1.RecognizeResponse
                 * @static
                 * @param {matrix_io.recognition.v1.IRecognizeResponse} message RecognizeResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RecognizeResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RecognizeResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof matrix_io.recognition.v1.RecognizeResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {matrix_io.recognition.v1.RecognizeResponse} RecognizeResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RecognizeResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.recognition.v1.RecognizeResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.matches && message.matches.length))
                                message.matches = [];
                            message.matches.push($root.matrix_io.recognition.v1.FeatureDescriptorMatch.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RecognizeResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof matrix_io.recognition.v1.RecognizeResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {matrix_io.recognition.v1.RecognizeResponse} RecognizeResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RecognizeResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RecognizeResponse message.
                 * @function verify
                 * @memberof matrix_io.recognition.v1.RecognizeResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RecognizeResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.matches != null && message.hasOwnProperty("matches")) {
                        if (!Array.isArray(message.matches))
                            return "matches: array expected";
                        for (var i = 0; i < message.matches.length; ++i) {
                            var error = $root.matrix_io.recognition.v1.FeatureDescriptorMatch.verify(message.matches[i]);
                            if (error)
                                return "matches." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates a RecognizeResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof matrix_io.recognition.v1.RecognizeResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {matrix_io.recognition.v1.RecognizeResponse} RecognizeResponse
                 */
                RecognizeResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.matrix_io.recognition.v1.RecognizeResponse)
                        return object;
                    var message = new $root.matrix_io.recognition.v1.RecognizeResponse();
                    if (object.matches) {
                        if (!Array.isArray(object.matches))
                            throw TypeError(".matrix_io.recognition.v1.RecognizeResponse.matches: array expected");
                        message.matches = [];
                        for (var i = 0; i < object.matches.length; ++i) {
                            if (typeof object.matches[i] !== "object")
                                throw TypeError(".matrix_io.recognition.v1.RecognizeResponse.matches: object expected");
                            message.matches[i] = $root.matrix_io.recognition.v1.FeatureDescriptorMatch.fromObject(object.matches[i]);
                        }
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a RecognizeResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof matrix_io.recognition.v1.RecognizeResponse
                 * @static
                 * @param {matrix_io.recognition.v1.RecognizeResponse} message RecognizeResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RecognizeResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.matches = [];
                    if (message.matches && message.matches.length) {
                        object.matches = [];
                        for (var j = 0; j < message.matches.length; ++j)
                            object.matches[j] = $root.matrix_io.recognition.v1.FeatureDescriptorMatch.toObject(message.matches[j], options);
                    }
                    return object;
                };

                /**
                 * Converts this RecognizeResponse to JSON.
                 * @function toJSON
                 * @memberof matrix_io.recognition.v1.RecognizeResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RecognizeResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RecognizeResponse;
            })();

            v1.GetFeatureDescriptorTagsRequest = (function() {

                /**
                 * Properties of a GetFeatureDescriptorTagsRequest.
                 * @memberof matrix_io.recognition.v1
                 * @interface IGetFeatureDescriptorTagsRequest
                 * @property {Array.<string>|null} [deviceId] GetFeatureDescriptorTagsRequest deviceId
                 */

                /**
                 * Constructs a new GetFeatureDescriptorTagsRequest.
                 * @memberof matrix_io.recognition.v1
                 * @classdesc Represents a GetFeatureDescriptorTagsRequest.
                 * @implements IGetFeatureDescriptorTagsRequest
                 * @constructor
                 * @param {matrix_io.recognition.v1.IGetFeatureDescriptorTagsRequest=} [properties] Properties to set
                 */
                function GetFeatureDescriptorTagsRequest(properties) {
                    this.deviceId = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * GetFeatureDescriptorTagsRequest deviceId.
                 * @member {Array.<string>} deviceId
                 * @memberof matrix_io.recognition.v1.GetFeatureDescriptorTagsRequest
                 * @instance
                 */
                GetFeatureDescriptorTagsRequest.prototype.deviceId = $util.emptyArray;

                /**
                 * Creates a new GetFeatureDescriptorTagsRequest instance using the specified properties.
                 * @function create
                 * @memberof matrix_io.recognition.v1.GetFeatureDescriptorTagsRequest
                 * @static
                 * @param {matrix_io.recognition.v1.IGetFeatureDescriptorTagsRequest=} [properties] Properties to set
                 * @returns {matrix_io.recognition.v1.GetFeatureDescriptorTagsRequest} GetFeatureDescriptorTagsRequest instance
                 */
                GetFeatureDescriptorTagsRequest.create = function create(properties) {
                    return new GetFeatureDescriptorTagsRequest(properties);
                };

                /**
                 * Encodes the specified GetFeatureDescriptorTagsRequest message. Does not implicitly {@link matrix_io.recognition.v1.GetFeatureDescriptorTagsRequest.verify|verify} messages.
                 * @function encode
                 * @memberof matrix_io.recognition.v1.GetFeatureDescriptorTagsRequest
                 * @static
                 * @param {matrix_io.recognition.v1.IGetFeatureDescriptorTagsRequest} message GetFeatureDescriptorTagsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GetFeatureDescriptorTagsRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.deviceId != null && message.deviceId.length)
                        for (var i = 0; i < message.deviceId.length; ++i)
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.deviceId[i]);
                    return writer;
                };

                /**
                 * Encodes the specified GetFeatureDescriptorTagsRequest message, length delimited. Does not implicitly {@link matrix_io.recognition.v1.GetFeatureDescriptorTagsRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof matrix_io.recognition.v1.GetFeatureDescriptorTagsRequest
                 * @static
                 * @param {matrix_io.recognition.v1.IGetFeatureDescriptorTagsRequest} message GetFeatureDescriptorTagsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GetFeatureDescriptorTagsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a GetFeatureDescriptorTagsRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof matrix_io.recognition.v1.GetFeatureDescriptorTagsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {matrix_io.recognition.v1.GetFeatureDescriptorTagsRequest} GetFeatureDescriptorTagsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GetFeatureDescriptorTagsRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.recognition.v1.GetFeatureDescriptorTagsRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.deviceId && message.deviceId.length))
                                message.deviceId = [];
                            message.deviceId.push(reader.string());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a GetFeatureDescriptorTagsRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof matrix_io.recognition.v1.GetFeatureDescriptorTagsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {matrix_io.recognition.v1.GetFeatureDescriptorTagsRequest} GetFeatureDescriptorTagsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GetFeatureDescriptorTagsRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a GetFeatureDescriptorTagsRequest message.
                 * @function verify
                 * @memberof matrix_io.recognition.v1.GetFeatureDescriptorTagsRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GetFeatureDescriptorTagsRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.deviceId != null && message.hasOwnProperty("deviceId")) {
                        if (!Array.isArray(message.deviceId))
                            return "deviceId: array expected";
                        for (var i = 0; i < message.deviceId.length; ++i)
                            if (!$util.isString(message.deviceId[i]))
                                return "deviceId: string[] expected";
                    }
                    return null;
                };

                /**
                 * Creates a GetFeatureDescriptorTagsRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof matrix_io.recognition.v1.GetFeatureDescriptorTagsRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {matrix_io.recognition.v1.GetFeatureDescriptorTagsRequest} GetFeatureDescriptorTagsRequest
                 */
                GetFeatureDescriptorTagsRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.matrix_io.recognition.v1.GetFeatureDescriptorTagsRequest)
                        return object;
                    var message = new $root.matrix_io.recognition.v1.GetFeatureDescriptorTagsRequest();
                    if (object.deviceId) {
                        if (!Array.isArray(object.deviceId))
                            throw TypeError(".matrix_io.recognition.v1.GetFeatureDescriptorTagsRequest.deviceId: array expected");
                        message.deviceId = [];
                        for (var i = 0; i < object.deviceId.length; ++i)
                            message.deviceId[i] = String(object.deviceId[i]);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a GetFeatureDescriptorTagsRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof matrix_io.recognition.v1.GetFeatureDescriptorTagsRequest
                 * @static
                 * @param {matrix_io.recognition.v1.GetFeatureDescriptorTagsRequest} message GetFeatureDescriptorTagsRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GetFeatureDescriptorTagsRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.deviceId = [];
                    if (message.deviceId && message.deviceId.length) {
                        object.deviceId = [];
                        for (var j = 0; j < message.deviceId.length; ++j)
                            object.deviceId[j] = message.deviceId[j];
                    }
                    return object;
                };

                /**
                 * Converts this GetFeatureDescriptorTagsRequest to JSON.
                 * @function toJSON
                 * @memberof matrix_io.recognition.v1.GetFeatureDescriptorTagsRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GetFeatureDescriptorTagsRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return GetFeatureDescriptorTagsRequest;
            })();

            v1.FeatureDescriptorTagsForDevice = (function() {

                /**
                 * Properties of a FeatureDescriptorTagsForDevice.
                 * @memberof matrix_io.recognition.v1
                 * @interface IFeatureDescriptorTagsForDevice
                 * @property {Array.<string>|null} [tags] FeatureDescriptorTagsForDevice tags
                 * @property {string|null} [deviceId] FeatureDescriptorTagsForDevice deviceId
                 */

                /**
                 * Constructs a new FeatureDescriptorTagsForDevice.
                 * @memberof matrix_io.recognition.v1
                 * @classdesc Represents a FeatureDescriptorTagsForDevice.
                 * @implements IFeatureDescriptorTagsForDevice
                 * @constructor
                 * @param {matrix_io.recognition.v1.IFeatureDescriptorTagsForDevice=} [properties] Properties to set
                 */
                function FeatureDescriptorTagsForDevice(properties) {
                    this.tags = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * FeatureDescriptorTagsForDevice tags.
                 * @member {Array.<string>} tags
                 * @memberof matrix_io.recognition.v1.FeatureDescriptorTagsForDevice
                 * @instance
                 */
                FeatureDescriptorTagsForDevice.prototype.tags = $util.emptyArray;

                /**
                 * FeatureDescriptorTagsForDevice deviceId.
                 * @member {string} deviceId
                 * @memberof matrix_io.recognition.v1.FeatureDescriptorTagsForDevice
                 * @instance
                 */
                FeatureDescriptorTagsForDevice.prototype.deviceId = "";

                /**
                 * Creates a new FeatureDescriptorTagsForDevice instance using the specified properties.
                 * @function create
                 * @memberof matrix_io.recognition.v1.FeatureDescriptorTagsForDevice
                 * @static
                 * @param {matrix_io.recognition.v1.IFeatureDescriptorTagsForDevice=} [properties] Properties to set
                 * @returns {matrix_io.recognition.v1.FeatureDescriptorTagsForDevice} FeatureDescriptorTagsForDevice instance
                 */
                FeatureDescriptorTagsForDevice.create = function create(properties) {
                    return new FeatureDescriptorTagsForDevice(properties);
                };

                /**
                 * Encodes the specified FeatureDescriptorTagsForDevice message. Does not implicitly {@link matrix_io.recognition.v1.FeatureDescriptorTagsForDevice.verify|verify} messages.
                 * @function encode
                 * @memberof matrix_io.recognition.v1.FeatureDescriptorTagsForDevice
                 * @static
                 * @param {matrix_io.recognition.v1.IFeatureDescriptorTagsForDevice} message FeatureDescriptorTagsForDevice message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FeatureDescriptorTagsForDevice.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.tags != null && message.tags.length)
                        for (var i = 0; i < message.tags.length; ++i)
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.tags[i]);
                    if (message.deviceId != null && message.hasOwnProperty("deviceId"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.deviceId);
                    return writer;
                };

                /**
                 * Encodes the specified FeatureDescriptorTagsForDevice message, length delimited. Does not implicitly {@link matrix_io.recognition.v1.FeatureDescriptorTagsForDevice.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof matrix_io.recognition.v1.FeatureDescriptorTagsForDevice
                 * @static
                 * @param {matrix_io.recognition.v1.IFeatureDescriptorTagsForDevice} message FeatureDescriptorTagsForDevice message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FeatureDescriptorTagsForDevice.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a FeatureDescriptorTagsForDevice message from the specified reader or buffer.
                 * @function decode
                 * @memberof matrix_io.recognition.v1.FeatureDescriptorTagsForDevice
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {matrix_io.recognition.v1.FeatureDescriptorTagsForDevice} FeatureDescriptorTagsForDevice
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FeatureDescriptorTagsForDevice.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.recognition.v1.FeatureDescriptorTagsForDevice();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.tags && message.tags.length))
                                message.tags = [];
                            message.tags.push(reader.string());
                            break;
                        case 2:
                            message.deviceId = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a FeatureDescriptorTagsForDevice message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof matrix_io.recognition.v1.FeatureDescriptorTagsForDevice
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {matrix_io.recognition.v1.FeatureDescriptorTagsForDevice} FeatureDescriptorTagsForDevice
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FeatureDescriptorTagsForDevice.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a FeatureDescriptorTagsForDevice message.
                 * @function verify
                 * @memberof matrix_io.recognition.v1.FeatureDescriptorTagsForDevice
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FeatureDescriptorTagsForDevice.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.tags != null && message.hasOwnProperty("tags")) {
                        if (!Array.isArray(message.tags))
                            return "tags: array expected";
                        for (var i = 0; i < message.tags.length; ++i)
                            if (!$util.isString(message.tags[i]))
                                return "tags: string[] expected";
                    }
                    if (message.deviceId != null && message.hasOwnProperty("deviceId"))
                        if (!$util.isString(message.deviceId))
                            return "deviceId: string expected";
                    return null;
                };

                /**
                 * Creates a FeatureDescriptorTagsForDevice message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof matrix_io.recognition.v1.FeatureDescriptorTagsForDevice
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {matrix_io.recognition.v1.FeatureDescriptorTagsForDevice} FeatureDescriptorTagsForDevice
                 */
                FeatureDescriptorTagsForDevice.fromObject = function fromObject(object) {
                    if (object instanceof $root.matrix_io.recognition.v1.FeatureDescriptorTagsForDevice)
                        return object;
                    var message = new $root.matrix_io.recognition.v1.FeatureDescriptorTagsForDevice();
                    if (object.tags) {
                        if (!Array.isArray(object.tags))
                            throw TypeError(".matrix_io.recognition.v1.FeatureDescriptorTagsForDevice.tags: array expected");
                        message.tags = [];
                        for (var i = 0; i < object.tags.length; ++i)
                            message.tags[i] = String(object.tags[i]);
                    }
                    if (object.deviceId != null)
                        message.deviceId = String(object.deviceId);
                    return message;
                };

                /**
                 * Creates a plain object from a FeatureDescriptorTagsForDevice message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof matrix_io.recognition.v1.FeatureDescriptorTagsForDevice
                 * @static
                 * @param {matrix_io.recognition.v1.FeatureDescriptorTagsForDevice} message FeatureDescriptorTagsForDevice
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FeatureDescriptorTagsForDevice.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.tags = [];
                    if (options.defaults)
                        object.deviceId = "";
                    if (message.tags && message.tags.length) {
                        object.tags = [];
                        for (var j = 0; j < message.tags.length; ++j)
                            object.tags[j] = message.tags[j];
                    }
                    if (message.deviceId != null && message.hasOwnProperty("deviceId"))
                        object.deviceId = message.deviceId;
                    return object;
                };

                /**
                 * Converts this FeatureDescriptorTagsForDevice to JSON.
                 * @function toJSON
                 * @memberof matrix_io.recognition.v1.FeatureDescriptorTagsForDevice
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FeatureDescriptorTagsForDevice.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return FeatureDescriptorTagsForDevice;
            })();

            v1.GetFeatureDescriptorTagsResponse = (function() {

                /**
                 * Properties of a GetFeatureDescriptorTagsResponse.
                 * @memberof matrix_io.recognition.v1
                 * @interface IGetFeatureDescriptorTagsResponse
                 * @property {Array.<matrix_io.recognition.v1.IFeatureDescriptorTagsForDevice>|null} [featureTagsForDevice] GetFeatureDescriptorTagsResponse featureTagsForDevice
                 */

                /**
                 * Constructs a new GetFeatureDescriptorTagsResponse.
                 * @memberof matrix_io.recognition.v1
                 * @classdesc Represents a GetFeatureDescriptorTagsResponse.
                 * @implements IGetFeatureDescriptorTagsResponse
                 * @constructor
                 * @param {matrix_io.recognition.v1.IGetFeatureDescriptorTagsResponse=} [properties] Properties to set
                 */
                function GetFeatureDescriptorTagsResponse(properties) {
                    this.featureTagsForDevice = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * GetFeatureDescriptorTagsResponse featureTagsForDevice.
                 * @member {Array.<matrix_io.recognition.v1.IFeatureDescriptorTagsForDevice>} featureTagsForDevice
                 * @memberof matrix_io.recognition.v1.GetFeatureDescriptorTagsResponse
                 * @instance
                 */
                GetFeatureDescriptorTagsResponse.prototype.featureTagsForDevice = $util.emptyArray;

                /**
                 * Creates a new GetFeatureDescriptorTagsResponse instance using the specified properties.
                 * @function create
                 * @memberof matrix_io.recognition.v1.GetFeatureDescriptorTagsResponse
                 * @static
                 * @param {matrix_io.recognition.v1.IGetFeatureDescriptorTagsResponse=} [properties] Properties to set
                 * @returns {matrix_io.recognition.v1.GetFeatureDescriptorTagsResponse} GetFeatureDescriptorTagsResponse instance
                 */
                GetFeatureDescriptorTagsResponse.create = function create(properties) {
                    return new GetFeatureDescriptorTagsResponse(properties);
                };

                /**
                 * Encodes the specified GetFeatureDescriptorTagsResponse message. Does not implicitly {@link matrix_io.recognition.v1.GetFeatureDescriptorTagsResponse.verify|verify} messages.
                 * @function encode
                 * @memberof matrix_io.recognition.v1.GetFeatureDescriptorTagsResponse
                 * @static
                 * @param {matrix_io.recognition.v1.IGetFeatureDescriptorTagsResponse} message GetFeatureDescriptorTagsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GetFeatureDescriptorTagsResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.featureTagsForDevice != null && message.featureTagsForDevice.length)
                        for (var i = 0; i < message.featureTagsForDevice.length; ++i)
                            $root.matrix_io.recognition.v1.FeatureDescriptorTagsForDevice.encode(message.featureTagsForDevice[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified GetFeatureDescriptorTagsResponse message, length delimited. Does not implicitly {@link matrix_io.recognition.v1.GetFeatureDescriptorTagsResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof matrix_io.recognition.v1.GetFeatureDescriptorTagsResponse
                 * @static
                 * @param {matrix_io.recognition.v1.IGetFeatureDescriptorTagsResponse} message GetFeatureDescriptorTagsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GetFeatureDescriptorTagsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a GetFeatureDescriptorTagsResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof matrix_io.recognition.v1.GetFeatureDescriptorTagsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {matrix_io.recognition.v1.GetFeatureDescriptorTagsResponse} GetFeatureDescriptorTagsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GetFeatureDescriptorTagsResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.recognition.v1.GetFeatureDescriptorTagsResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.featureTagsForDevice && message.featureTagsForDevice.length))
                                message.featureTagsForDevice = [];
                            message.featureTagsForDevice.push($root.matrix_io.recognition.v1.FeatureDescriptorTagsForDevice.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a GetFeatureDescriptorTagsResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof matrix_io.recognition.v1.GetFeatureDescriptorTagsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {matrix_io.recognition.v1.GetFeatureDescriptorTagsResponse} GetFeatureDescriptorTagsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GetFeatureDescriptorTagsResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a GetFeatureDescriptorTagsResponse message.
                 * @function verify
                 * @memberof matrix_io.recognition.v1.GetFeatureDescriptorTagsResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GetFeatureDescriptorTagsResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.featureTagsForDevice != null && message.hasOwnProperty("featureTagsForDevice")) {
                        if (!Array.isArray(message.featureTagsForDevice))
                            return "featureTagsForDevice: array expected";
                        for (var i = 0; i < message.featureTagsForDevice.length; ++i) {
                            var error = $root.matrix_io.recognition.v1.FeatureDescriptorTagsForDevice.verify(message.featureTagsForDevice[i]);
                            if (error)
                                return "featureTagsForDevice." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates a GetFeatureDescriptorTagsResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof matrix_io.recognition.v1.GetFeatureDescriptorTagsResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {matrix_io.recognition.v1.GetFeatureDescriptorTagsResponse} GetFeatureDescriptorTagsResponse
                 */
                GetFeatureDescriptorTagsResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.matrix_io.recognition.v1.GetFeatureDescriptorTagsResponse)
                        return object;
                    var message = new $root.matrix_io.recognition.v1.GetFeatureDescriptorTagsResponse();
                    if (object.featureTagsForDevice) {
                        if (!Array.isArray(object.featureTagsForDevice))
                            throw TypeError(".matrix_io.recognition.v1.GetFeatureDescriptorTagsResponse.featureTagsForDevice: array expected");
                        message.featureTagsForDevice = [];
                        for (var i = 0; i < object.featureTagsForDevice.length; ++i) {
                            if (typeof object.featureTagsForDevice[i] !== "object")
                                throw TypeError(".matrix_io.recognition.v1.GetFeatureDescriptorTagsResponse.featureTagsForDevice: object expected");
                            message.featureTagsForDevice[i] = $root.matrix_io.recognition.v1.FeatureDescriptorTagsForDevice.fromObject(object.featureTagsForDevice[i]);
                        }
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a GetFeatureDescriptorTagsResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof matrix_io.recognition.v1.GetFeatureDescriptorTagsResponse
                 * @static
                 * @param {matrix_io.recognition.v1.GetFeatureDescriptorTagsResponse} message GetFeatureDescriptorTagsResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GetFeatureDescriptorTagsResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.featureTagsForDevice = [];
                    if (message.featureTagsForDevice && message.featureTagsForDevice.length) {
                        object.featureTagsForDevice = [];
                        for (var j = 0; j < message.featureTagsForDevice.length; ++j)
                            object.featureTagsForDevice[j] = $root.matrix_io.recognition.v1.FeatureDescriptorTagsForDevice.toObject(message.featureTagsForDevice[j], options);
                    }
                    return object;
                };

                /**
                 * Converts this GetFeatureDescriptorTagsResponse to JSON.
                 * @function toJSON
                 * @memberof matrix_io.recognition.v1.GetFeatureDescriptorTagsResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GetFeatureDescriptorTagsResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return GetFeatureDescriptorTagsResponse;
            })();

            return v1;
        })();

        return recognition;
    })();

    matrix_io.vision = (function() {

        /**
         * Namespace vision.
         * @memberof matrix_io
         * @namespace
         */
        var vision = {};

        vision.v1 = (function() {

            /**
             * Namespace v1.
             * @memberof matrix_io.vision
             * @namespace
             */
            var v1 = {};

            v1.Point = (function() {

                /**
                 * Properties of a Point.
                 * @memberof matrix_io.vision.v1
                 * @interface IPoint
                 * @property {number|null} [x] Point x
                 * @property {number|null} [y] Point y
                 */

                /**
                 * Constructs a new Point.
                 * @memberof matrix_io.vision.v1
                 * @classdesc Represents a Point.
                 * @implements IPoint
                 * @constructor
                 * @param {matrix_io.vision.v1.IPoint=} [properties] Properties to set
                 */
                function Point(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Point x.
                 * @member {number} x
                 * @memberof matrix_io.vision.v1.Point
                 * @instance
                 */
                Point.prototype.x = 0;

                /**
                 * Point y.
                 * @member {number} y
                 * @memberof matrix_io.vision.v1.Point
                 * @instance
                 */
                Point.prototype.y = 0;

                /**
                 * Creates a new Point instance using the specified properties.
                 * @function create
                 * @memberof matrix_io.vision.v1.Point
                 * @static
                 * @param {matrix_io.vision.v1.IPoint=} [properties] Properties to set
                 * @returns {matrix_io.vision.v1.Point} Point instance
                 */
                Point.create = function create(properties) {
                    return new Point(properties);
                };

                /**
                 * Encodes the specified Point message. Does not implicitly {@link matrix_io.vision.v1.Point.verify|verify} messages.
                 * @function encode
                 * @memberof matrix_io.vision.v1.Point
                 * @static
                 * @param {matrix_io.vision.v1.IPoint} message Point message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Point.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.x != null && message.hasOwnProperty("x"))
                        writer.uint32(/* id 1, wireType 5 =*/13).float(message.x);
                    if (message.y != null && message.hasOwnProperty("y"))
                        writer.uint32(/* id 2, wireType 5 =*/21).float(message.y);
                    return writer;
                };

                /**
                 * Encodes the specified Point message, length delimited. Does not implicitly {@link matrix_io.vision.v1.Point.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof matrix_io.vision.v1.Point
                 * @static
                 * @param {matrix_io.vision.v1.IPoint} message Point message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Point.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a Point message from the specified reader or buffer.
                 * @function decode
                 * @memberof matrix_io.vision.v1.Point
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {matrix_io.vision.v1.Point} Point
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Point.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.vision.v1.Point();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.x = reader.float();
                            break;
                        case 2:
                            message.y = reader.float();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a Point message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof matrix_io.vision.v1.Point
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {matrix_io.vision.v1.Point} Point
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Point.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a Point message.
                 * @function verify
                 * @memberof matrix_io.vision.v1.Point
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Point.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.x != null && message.hasOwnProperty("x"))
                        if (typeof message.x !== "number")
                            return "x: number expected";
                    if (message.y != null && message.hasOwnProperty("y"))
                        if (typeof message.y !== "number")
                            return "y: number expected";
                    return null;
                };

                /**
                 * Creates a Point message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof matrix_io.vision.v1.Point
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {matrix_io.vision.v1.Point} Point
                 */
                Point.fromObject = function fromObject(object) {
                    if (object instanceof $root.matrix_io.vision.v1.Point)
                        return object;
                    var message = new $root.matrix_io.vision.v1.Point();
                    if (object.x != null)
                        message.x = Number(object.x);
                    if (object.y != null)
                        message.y = Number(object.y);
                    return message;
                };

                /**
                 * Creates a plain object from a Point message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof matrix_io.vision.v1.Point
                 * @static
                 * @param {matrix_io.vision.v1.Point} message Point
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Point.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.x = 0;
                        object.y = 0;
                    }
                    if (message.x != null && message.hasOwnProperty("x"))
                        object.x = options.json && !isFinite(message.x) ? String(message.x) : message.x;
                    if (message.y != null && message.hasOwnProperty("y"))
                        object.y = options.json && !isFinite(message.y) ? String(message.y) : message.y;
                    return object;
                };

                /**
                 * Converts this Point to JSON.
                 * @function toJSON
                 * @memberof matrix_io.vision.v1.Point
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Point.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return Point;
            })();

            v1.Size = (function() {

                /**
                 * Properties of a Size.
                 * @memberof matrix_io.vision.v1
                 * @interface ISize
                 * @property {number|null} [width] Size width
                 * @property {number|null} [height] Size height
                 */

                /**
                 * Constructs a new Size.
                 * @memberof matrix_io.vision.v1
                 * @classdesc Represents a Size.
                 * @implements ISize
                 * @constructor
                 * @param {matrix_io.vision.v1.ISize=} [properties] Properties to set
                 */
                function Size(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Size width.
                 * @member {number} width
                 * @memberof matrix_io.vision.v1.Size
                 * @instance
                 */
                Size.prototype.width = 0;

                /**
                 * Size height.
                 * @member {number} height
                 * @memberof matrix_io.vision.v1.Size
                 * @instance
                 */
                Size.prototype.height = 0;

                /**
                 * Creates a new Size instance using the specified properties.
                 * @function create
                 * @memberof matrix_io.vision.v1.Size
                 * @static
                 * @param {matrix_io.vision.v1.ISize=} [properties] Properties to set
                 * @returns {matrix_io.vision.v1.Size} Size instance
                 */
                Size.create = function create(properties) {
                    return new Size(properties);
                };

                /**
                 * Encodes the specified Size message. Does not implicitly {@link matrix_io.vision.v1.Size.verify|verify} messages.
                 * @function encode
                 * @memberof matrix_io.vision.v1.Size
                 * @static
                 * @param {matrix_io.vision.v1.ISize} message Size message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Size.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.width != null && message.hasOwnProperty("width"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.width);
                    if (message.height != null && message.hasOwnProperty("height"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.height);
                    return writer;
                };

                /**
                 * Encodes the specified Size message, length delimited. Does not implicitly {@link matrix_io.vision.v1.Size.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof matrix_io.vision.v1.Size
                 * @static
                 * @param {matrix_io.vision.v1.ISize} message Size message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Size.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a Size message from the specified reader or buffer.
                 * @function decode
                 * @memberof matrix_io.vision.v1.Size
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {matrix_io.vision.v1.Size} Size
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Size.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.vision.v1.Size();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.width = reader.int32();
                            break;
                        case 2:
                            message.height = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a Size message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof matrix_io.vision.v1.Size
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {matrix_io.vision.v1.Size} Size
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Size.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a Size message.
                 * @function verify
                 * @memberof matrix_io.vision.v1.Size
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Size.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.width != null && message.hasOwnProperty("width"))
                        if (!$util.isInteger(message.width))
                            return "width: integer expected";
                    if (message.height != null && message.hasOwnProperty("height"))
                        if (!$util.isInteger(message.height))
                            return "height: integer expected";
                    return null;
                };

                /**
                 * Creates a Size message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof matrix_io.vision.v1.Size
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {matrix_io.vision.v1.Size} Size
                 */
                Size.fromObject = function fromObject(object) {
                    if (object instanceof $root.matrix_io.vision.v1.Size)
                        return object;
                    var message = new $root.matrix_io.vision.v1.Size();
                    if (object.width != null)
                        message.width = object.width | 0;
                    if (object.height != null)
                        message.height = object.height | 0;
                    return message;
                };

                /**
                 * Creates a plain object from a Size message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof matrix_io.vision.v1.Size
                 * @static
                 * @param {matrix_io.vision.v1.Size} message Size
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Size.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.width = 0;
                        object.height = 0;
                    }
                    if (message.width != null && message.hasOwnProperty("width"))
                        object.width = message.width;
                    if (message.height != null && message.hasOwnProperty("height"))
                        object.height = message.height;
                    return object;
                };

                /**
                 * Converts this Size to JSON.
                 * @function toJSON
                 * @memberof matrix_io.vision.v1.Size
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Size.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return Size;
            })();

            v1.Rectangle = (function() {

                /**
                 * Properties of a Rectangle.
                 * @memberof matrix_io.vision.v1
                 * @interface IRectangle
                 * @property {number|null} [x] Rectangle x
                 * @property {number|null} [y] Rectangle y
                 * @property {number|null} [width] Rectangle width
                 * @property {number|null} [height] Rectangle height
                 */

                /**
                 * Constructs a new Rectangle.
                 * @memberof matrix_io.vision.v1
                 * @classdesc Represents a Rectangle.
                 * @implements IRectangle
                 * @constructor
                 * @param {matrix_io.vision.v1.IRectangle=} [properties] Properties to set
                 */
                function Rectangle(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Rectangle x.
                 * @member {number} x
                 * @memberof matrix_io.vision.v1.Rectangle
                 * @instance
                 */
                Rectangle.prototype.x = 0;

                /**
                 * Rectangle y.
                 * @member {number} y
                 * @memberof matrix_io.vision.v1.Rectangle
                 * @instance
                 */
                Rectangle.prototype.y = 0;

                /**
                 * Rectangle width.
                 * @member {number} width
                 * @memberof matrix_io.vision.v1.Rectangle
                 * @instance
                 */
                Rectangle.prototype.width = 0;

                /**
                 * Rectangle height.
                 * @member {number} height
                 * @memberof matrix_io.vision.v1.Rectangle
                 * @instance
                 */
                Rectangle.prototype.height = 0;

                /**
                 * Creates a new Rectangle instance using the specified properties.
                 * @function create
                 * @memberof matrix_io.vision.v1.Rectangle
                 * @static
                 * @param {matrix_io.vision.v1.IRectangle=} [properties] Properties to set
                 * @returns {matrix_io.vision.v1.Rectangle} Rectangle instance
                 */
                Rectangle.create = function create(properties) {
                    return new Rectangle(properties);
                };

                /**
                 * Encodes the specified Rectangle message. Does not implicitly {@link matrix_io.vision.v1.Rectangle.verify|verify} messages.
                 * @function encode
                 * @memberof matrix_io.vision.v1.Rectangle
                 * @static
                 * @param {matrix_io.vision.v1.IRectangle} message Rectangle message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Rectangle.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.x != null && message.hasOwnProperty("x"))
                        writer.uint32(/* id 1, wireType 5 =*/13).float(message.x);
                    if (message.y != null && message.hasOwnProperty("y"))
                        writer.uint32(/* id 2, wireType 5 =*/21).float(message.y);
                    if (message.width != null && message.hasOwnProperty("width"))
                        writer.uint32(/* id 3, wireType 5 =*/29).float(message.width);
                    if (message.height != null && message.hasOwnProperty("height"))
                        writer.uint32(/* id 4, wireType 5 =*/37).float(message.height);
                    return writer;
                };

                /**
                 * Encodes the specified Rectangle message, length delimited. Does not implicitly {@link matrix_io.vision.v1.Rectangle.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof matrix_io.vision.v1.Rectangle
                 * @static
                 * @param {matrix_io.vision.v1.IRectangle} message Rectangle message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Rectangle.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a Rectangle message from the specified reader or buffer.
                 * @function decode
                 * @memberof matrix_io.vision.v1.Rectangle
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {matrix_io.vision.v1.Rectangle} Rectangle
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Rectangle.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.vision.v1.Rectangle();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.x = reader.float();
                            break;
                        case 2:
                            message.y = reader.float();
                            break;
                        case 3:
                            message.width = reader.float();
                            break;
                        case 4:
                            message.height = reader.float();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a Rectangle message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof matrix_io.vision.v1.Rectangle
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {matrix_io.vision.v1.Rectangle} Rectangle
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Rectangle.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a Rectangle message.
                 * @function verify
                 * @memberof matrix_io.vision.v1.Rectangle
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Rectangle.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.x != null && message.hasOwnProperty("x"))
                        if (typeof message.x !== "number")
                            return "x: number expected";
                    if (message.y != null && message.hasOwnProperty("y"))
                        if (typeof message.y !== "number")
                            return "y: number expected";
                    if (message.width != null && message.hasOwnProperty("width"))
                        if (typeof message.width !== "number")
                            return "width: number expected";
                    if (message.height != null && message.hasOwnProperty("height"))
                        if (typeof message.height !== "number")
                            return "height: number expected";
                    return null;
                };

                /**
                 * Creates a Rectangle message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof matrix_io.vision.v1.Rectangle
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {matrix_io.vision.v1.Rectangle} Rectangle
                 */
                Rectangle.fromObject = function fromObject(object) {
                    if (object instanceof $root.matrix_io.vision.v1.Rectangle)
                        return object;
                    var message = new $root.matrix_io.vision.v1.Rectangle();
                    if (object.x != null)
                        message.x = Number(object.x);
                    if (object.y != null)
                        message.y = Number(object.y);
                    if (object.width != null)
                        message.width = Number(object.width);
                    if (object.height != null)
                        message.height = Number(object.height);
                    return message;
                };

                /**
                 * Creates a plain object from a Rectangle message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof matrix_io.vision.v1.Rectangle
                 * @static
                 * @param {matrix_io.vision.v1.Rectangle} message Rectangle
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Rectangle.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.x = 0;
                        object.y = 0;
                        object.width = 0;
                        object.height = 0;
                    }
                    if (message.x != null && message.hasOwnProperty("x"))
                        object.x = options.json && !isFinite(message.x) ? String(message.x) : message.x;
                    if (message.y != null && message.hasOwnProperty("y"))
                        object.y = options.json && !isFinite(message.y) ? String(message.y) : message.y;
                    if (message.width != null && message.hasOwnProperty("width"))
                        object.width = options.json && !isFinite(message.width) ? String(message.width) : message.width;
                    if (message.height != null && message.hasOwnProperty("height"))
                        object.height = options.json && !isFinite(message.height) ? String(message.height) : message.height;
                    return object;
                };

                /**
                 * Converts this Rectangle to JSON.
                 * @function toJSON
                 * @memberof matrix_io.vision.v1.Rectangle
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Rectangle.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return Rectangle;
            })();

            /**
             * EnumFacialRecognitionTag enum.
             * @name matrix_io.vision.v1.EnumFacialRecognitionTag
             * @enum {string}
             * @property {number} FACIAL_RECOGNITION_NOT_DEFINED=0 FACIAL_RECOGNITION_NOT_DEFINED value
             * @property {number} AGE=1 AGE value
             * @property {number} EMOTION=2 EMOTION value
             * @property {number} GENDER=3 GENDER value
             * @property {number} FACE_ID=4 FACE_ID value
             * @property {number} HEAD_POSE=5 HEAD_POSE value
             * @property {number} FACE_FEATURES=6 FACE_FEATURES value
             * @property {number} FACE_DESCRIPTOR=7 FACE_DESCRIPTOR value
             * @property {number} IS_FACE=8 IS_FACE value
             */
            v1.EnumFacialRecognitionTag = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "FACIAL_RECOGNITION_NOT_DEFINED"] = 0;
                values[valuesById[1] = "AGE"] = 1;
                values[valuesById[2] = "EMOTION"] = 2;
                values[valuesById[3] = "GENDER"] = 3;
                values[valuesById[4] = "FACE_ID"] = 4;
                values[valuesById[5] = "HEAD_POSE"] = 5;
                values[valuesById[6] = "FACE_FEATURES"] = 6;
                values[valuesById[7] = "FACE_DESCRIPTOR"] = 7;
                values[valuesById[8] = "IS_FACE"] = 8;
                return values;
            })();

            v1.FacialRecognition = (function() {

                /**
                 * Properties of a FacialRecognition.
                 * @memberof matrix_io.vision.v1
                 * @interface IFacialRecognition
                 * @property {matrix_io.vision.v1.EnumFacialRecognitionTag|null} [tag] FacialRecognition tag
                 * @property {number|null} [confidence] FacialRecognition confidence
                 * @property {number|null} [age] FacialRecognition age
                 * @property {matrix_io.vision.v1.FacialRecognition.Gender|null} [gender] FacialRecognition gender
                 * @property {matrix_io.vision.v1.FacialRecognition.Emotion|null} [emotion] FacialRecognition emotion
                 * @property {Array.<number>|null} [faceDescriptor] FacialRecognition faceDescriptor
                 * @property {string|null} [faceId] FacialRecognition faceId
                 * @property {number|null} [poseYaw] FacialRecognition poseYaw
                 * @property {number|null} [poseRoll] FacialRecognition poseRoll
                 * @property {number|null} [posePitch] FacialRecognition posePitch
                 * @property {matrix_io.vision.v1.FacialRecognition.IBasicFaceFeature|null} [basicFeature] FacialRecognition basicFeature
                 * @property {boolean|null} [isFace] FacialRecognition isFace
                 */

                /**
                 * Constructs a new FacialRecognition.
                 * @memberof matrix_io.vision.v1
                 * @classdesc Represents a FacialRecognition.
                 * @implements IFacialRecognition
                 * @constructor
                 * @param {matrix_io.vision.v1.IFacialRecognition=} [properties] Properties to set
                 */
                function FacialRecognition(properties) {
                    this.faceDescriptor = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * FacialRecognition tag.
                 * @member {matrix_io.vision.v1.EnumFacialRecognitionTag} tag
                 * @memberof matrix_io.vision.v1.FacialRecognition
                 * @instance
                 */
                FacialRecognition.prototype.tag = 0;

                /**
                 * FacialRecognition confidence.
                 * @member {number} confidence
                 * @memberof matrix_io.vision.v1.FacialRecognition
                 * @instance
                 */
                FacialRecognition.prototype.confidence = 0;

                /**
                 * FacialRecognition age.
                 * @member {number} age
                 * @memberof matrix_io.vision.v1.FacialRecognition
                 * @instance
                 */
                FacialRecognition.prototype.age = 0;

                /**
                 * FacialRecognition gender.
                 * @member {matrix_io.vision.v1.FacialRecognition.Gender} gender
                 * @memberof matrix_io.vision.v1.FacialRecognition
                 * @instance
                 */
                FacialRecognition.prototype.gender = 0;

                /**
                 * FacialRecognition emotion.
                 * @member {matrix_io.vision.v1.FacialRecognition.Emotion} emotion
                 * @memberof matrix_io.vision.v1.FacialRecognition
                 * @instance
                 */
                FacialRecognition.prototype.emotion = 0;

                /**
                 * FacialRecognition faceDescriptor.
                 * @member {Array.<number>} faceDescriptor
                 * @memberof matrix_io.vision.v1.FacialRecognition
                 * @instance
                 */
                FacialRecognition.prototype.faceDescriptor = $util.emptyArray;

                /**
                 * FacialRecognition faceId.
                 * @member {string} faceId
                 * @memberof matrix_io.vision.v1.FacialRecognition
                 * @instance
                 */
                FacialRecognition.prototype.faceId = "";

                /**
                 * FacialRecognition poseYaw.
                 * @member {number} poseYaw
                 * @memberof matrix_io.vision.v1.FacialRecognition
                 * @instance
                 */
                FacialRecognition.prototype.poseYaw = 0;

                /**
                 * FacialRecognition poseRoll.
                 * @member {number} poseRoll
                 * @memberof matrix_io.vision.v1.FacialRecognition
                 * @instance
                 */
                FacialRecognition.prototype.poseRoll = 0;

                /**
                 * FacialRecognition posePitch.
                 * @member {number} posePitch
                 * @memberof matrix_io.vision.v1.FacialRecognition
                 * @instance
                 */
                FacialRecognition.prototype.posePitch = 0;

                /**
                 * FacialRecognition basicFeature.
                 * @member {matrix_io.vision.v1.FacialRecognition.IBasicFaceFeature|null|undefined} basicFeature
                 * @memberof matrix_io.vision.v1.FacialRecognition
                 * @instance
                 */
                FacialRecognition.prototype.basicFeature = null;

                /**
                 * FacialRecognition isFace.
                 * @member {boolean} isFace
                 * @memberof matrix_io.vision.v1.FacialRecognition
                 * @instance
                 */
                FacialRecognition.prototype.isFace = false;

                /**
                 * Creates a new FacialRecognition instance using the specified properties.
                 * @function create
                 * @memberof matrix_io.vision.v1.FacialRecognition
                 * @static
                 * @param {matrix_io.vision.v1.IFacialRecognition=} [properties] Properties to set
                 * @returns {matrix_io.vision.v1.FacialRecognition} FacialRecognition instance
                 */
                FacialRecognition.create = function create(properties) {
                    return new FacialRecognition(properties);
                };

                /**
                 * Encodes the specified FacialRecognition message. Does not implicitly {@link matrix_io.vision.v1.FacialRecognition.verify|verify} messages.
                 * @function encode
                 * @memberof matrix_io.vision.v1.FacialRecognition
                 * @static
                 * @param {matrix_io.vision.v1.IFacialRecognition} message FacialRecognition message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FacialRecognition.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.tag != null && message.hasOwnProperty("tag"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.tag);
                    if (message.confidence != null && message.hasOwnProperty("confidence"))
                        writer.uint32(/* id 2, wireType 5 =*/21).float(message.confidence);
                    if (message.age != null && message.hasOwnProperty("age"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.age);
                    if (message.gender != null && message.hasOwnProperty("gender"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.gender);
                    if (message.emotion != null && message.hasOwnProperty("emotion"))
                        writer.uint32(/* id 5, wireType 0 =*/40).int32(message.emotion);
                    if (message.faceDescriptor != null && message.faceDescriptor.length) {
                        writer.uint32(/* id 6, wireType 2 =*/50).fork();
                        for (var i = 0; i < message.faceDescriptor.length; ++i)
                            writer.float(message.faceDescriptor[i]);
                        writer.ldelim();
                    }
                    if (message.faceId != null && message.hasOwnProperty("faceId"))
                        writer.uint32(/* id 7, wireType 2 =*/58).string(message.faceId);
                    if (message.poseYaw != null && message.hasOwnProperty("poseYaw"))
                        writer.uint32(/* id 8, wireType 5 =*/69).float(message.poseYaw);
                    if (message.poseRoll != null && message.hasOwnProperty("poseRoll"))
                        writer.uint32(/* id 9, wireType 5 =*/77).float(message.poseRoll);
                    if (message.posePitch != null && message.hasOwnProperty("posePitch"))
                        writer.uint32(/* id 10, wireType 5 =*/85).float(message.posePitch);
                    if (message.basicFeature != null && message.hasOwnProperty("basicFeature"))
                        $root.matrix_io.vision.v1.FacialRecognition.BasicFaceFeature.encode(message.basicFeature, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                    if (message.isFace != null && message.hasOwnProperty("isFace"))
                        writer.uint32(/* id 12, wireType 0 =*/96).bool(message.isFace);
                    return writer;
                };

                /**
                 * Encodes the specified FacialRecognition message, length delimited. Does not implicitly {@link matrix_io.vision.v1.FacialRecognition.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof matrix_io.vision.v1.FacialRecognition
                 * @static
                 * @param {matrix_io.vision.v1.IFacialRecognition} message FacialRecognition message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FacialRecognition.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a FacialRecognition message from the specified reader or buffer.
                 * @function decode
                 * @memberof matrix_io.vision.v1.FacialRecognition
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {matrix_io.vision.v1.FacialRecognition} FacialRecognition
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FacialRecognition.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.vision.v1.FacialRecognition();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.tag = reader.int32();
                            break;
                        case 2:
                            message.confidence = reader.float();
                            break;
                        case 3:
                            message.age = reader.int32();
                            break;
                        case 4:
                            message.gender = reader.int32();
                            break;
                        case 5:
                            message.emotion = reader.int32();
                            break;
                        case 6:
                            if (!(message.faceDescriptor && message.faceDescriptor.length))
                                message.faceDescriptor = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.faceDescriptor.push(reader.float());
                            } else
                                message.faceDescriptor.push(reader.float());
                            break;
                        case 7:
                            message.faceId = reader.string();
                            break;
                        case 8:
                            message.poseYaw = reader.float();
                            break;
                        case 9:
                            message.poseRoll = reader.float();
                            break;
                        case 10:
                            message.posePitch = reader.float();
                            break;
                        case 11:
                            message.basicFeature = $root.matrix_io.vision.v1.FacialRecognition.BasicFaceFeature.decode(reader, reader.uint32());
                            break;
                        case 12:
                            message.isFace = reader.bool();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a FacialRecognition message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof matrix_io.vision.v1.FacialRecognition
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {matrix_io.vision.v1.FacialRecognition} FacialRecognition
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FacialRecognition.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a FacialRecognition message.
                 * @function verify
                 * @memberof matrix_io.vision.v1.FacialRecognition
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FacialRecognition.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.tag != null && message.hasOwnProperty("tag"))
                        switch (message.tag) {
                        default:
                            return "tag: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                            break;
                        }
                    if (message.confidence != null && message.hasOwnProperty("confidence"))
                        if (typeof message.confidence !== "number")
                            return "confidence: number expected";
                    if (message.age != null && message.hasOwnProperty("age"))
                        if (!$util.isInteger(message.age))
                            return "age: integer expected";
                    if (message.gender != null && message.hasOwnProperty("gender"))
                        switch (message.gender) {
                        default:
                            return "gender: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.emotion != null && message.hasOwnProperty("emotion"))
                        switch (message.emotion) {
                        default:
                            return "emotion: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                        case 9:
                            break;
                        }
                    if (message.faceDescriptor != null && message.hasOwnProperty("faceDescriptor")) {
                        if (!Array.isArray(message.faceDescriptor))
                            return "faceDescriptor: array expected";
                        for (var i = 0; i < message.faceDescriptor.length; ++i)
                            if (typeof message.faceDescriptor[i] !== "number")
                                return "faceDescriptor: number[] expected";
                    }
                    if (message.faceId != null && message.hasOwnProperty("faceId"))
                        if (!$util.isString(message.faceId))
                            return "faceId: string expected";
                    if (message.poseYaw != null && message.hasOwnProperty("poseYaw"))
                        if (typeof message.poseYaw !== "number")
                            return "poseYaw: number expected";
                    if (message.poseRoll != null && message.hasOwnProperty("poseRoll"))
                        if (typeof message.poseRoll !== "number")
                            return "poseRoll: number expected";
                    if (message.posePitch != null && message.hasOwnProperty("posePitch"))
                        if (typeof message.posePitch !== "number")
                            return "posePitch: number expected";
                    if (message.basicFeature != null && message.hasOwnProperty("basicFeature")) {
                        var error = $root.matrix_io.vision.v1.FacialRecognition.BasicFaceFeature.verify(message.basicFeature);
                        if (error)
                            return "basicFeature." + error;
                    }
                    if (message.isFace != null && message.hasOwnProperty("isFace"))
                        if (typeof message.isFace !== "boolean")
                            return "isFace: boolean expected";
                    return null;
                };

                /**
                 * Creates a FacialRecognition message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof matrix_io.vision.v1.FacialRecognition
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {matrix_io.vision.v1.FacialRecognition} FacialRecognition
                 */
                FacialRecognition.fromObject = function fromObject(object) {
                    if (object instanceof $root.matrix_io.vision.v1.FacialRecognition)
                        return object;
                    var message = new $root.matrix_io.vision.v1.FacialRecognition();
                    switch (object.tag) {
                    case "FACIAL_RECOGNITION_NOT_DEFINED":
                    case 0:
                        message.tag = 0;
                        break;
                    case "AGE":
                    case 1:
                        message.tag = 1;
                        break;
                    case "EMOTION":
                    case 2:
                        message.tag = 2;
                        break;
                    case "GENDER":
                    case 3:
                        message.tag = 3;
                        break;
                    case "FACE_ID":
                    case 4:
                        message.tag = 4;
                        break;
                    case "HEAD_POSE":
                    case 5:
                        message.tag = 5;
                        break;
                    case "FACE_FEATURES":
                    case 6:
                        message.tag = 6;
                        break;
                    case "FACE_DESCRIPTOR":
                    case 7:
                        message.tag = 7;
                        break;
                    case "IS_FACE":
                    case 8:
                        message.tag = 8;
                        break;
                    }
                    if (object.confidence != null)
                        message.confidence = Number(object.confidence);
                    if (object.age != null)
                        message.age = object.age | 0;
                    switch (object.gender) {
                    case "GENDER_NOT_DEFINED":
                    case 0:
                        message.gender = 0;
                        break;
                    case "MALE":
                    case 1:
                        message.gender = 1;
                        break;
                    case "FEMALE":
                    case 2:
                        message.gender = 2;
                        break;
                    }
                    switch (object.emotion) {
                    case "EMOTION_NOT_DEFINED":
                    case 0:
                        message.emotion = 0;
                        break;
                    case "ANGRY":
                    case 1:
                        message.emotion = 1;
                        break;
                    case "DISGUST":
                    case 2:
                        message.emotion = 2;
                        break;
                    case "CONFUSED":
                    case 3:
                        message.emotion = 3;
                        break;
                    case "HAPPY":
                    case 4:
                        message.emotion = 4;
                        break;
                    case "SAD":
                    case 5:
                        message.emotion = 5;
                        break;
                    case "SURPRISED":
                    case 6:
                        message.emotion = 6;
                        break;
                    case "CALM":
                    case 7:
                        message.emotion = 7;
                        break;
                    case "FEAR":
                    case 8:
                        message.emotion = 8;
                        break;
                    case "NEUTRAL":
                    case 9:
                        message.emotion = 9;
                        break;
                    }
                    if (object.faceDescriptor) {
                        if (!Array.isArray(object.faceDescriptor))
                            throw TypeError(".matrix_io.vision.v1.FacialRecognition.faceDescriptor: array expected");
                        message.faceDescriptor = [];
                        for (var i = 0; i < object.faceDescriptor.length; ++i)
                            message.faceDescriptor[i] = Number(object.faceDescriptor[i]);
                    }
                    if (object.faceId != null)
                        message.faceId = String(object.faceId);
                    if (object.poseYaw != null)
                        message.poseYaw = Number(object.poseYaw);
                    if (object.poseRoll != null)
                        message.poseRoll = Number(object.poseRoll);
                    if (object.posePitch != null)
                        message.posePitch = Number(object.posePitch);
                    if (object.basicFeature != null) {
                        if (typeof object.basicFeature !== "object")
                            throw TypeError(".matrix_io.vision.v1.FacialRecognition.basicFeature: object expected");
                        message.basicFeature = $root.matrix_io.vision.v1.FacialRecognition.BasicFaceFeature.fromObject(object.basicFeature);
                    }
                    if (object.isFace != null)
                        message.isFace = Boolean(object.isFace);
                    return message;
                };

                /**
                 * Creates a plain object from a FacialRecognition message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof matrix_io.vision.v1.FacialRecognition
                 * @static
                 * @param {matrix_io.vision.v1.FacialRecognition} message FacialRecognition
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FacialRecognition.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.faceDescriptor = [];
                    if (options.defaults) {
                        object.tag = options.enums === String ? "FACIAL_RECOGNITION_NOT_DEFINED" : 0;
                        object.confidence = 0;
                        object.age = 0;
                        object.gender = options.enums === String ? "GENDER_NOT_DEFINED" : 0;
                        object.emotion = options.enums === String ? "EMOTION_NOT_DEFINED" : 0;
                        object.faceId = "";
                        object.poseYaw = 0;
                        object.poseRoll = 0;
                        object.posePitch = 0;
                        object.basicFeature = null;
                        object.isFace = false;
                    }
                    if (message.tag != null && message.hasOwnProperty("tag"))
                        object.tag = options.enums === String ? $root.matrix_io.vision.v1.EnumFacialRecognitionTag[message.tag] : message.tag;
                    if (message.confidence != null && message.hasOwnProperty("confidence"))
                        object.confidence = options.json && !isFinite(message.confidence) ? String(message.confidence) : message.confidence;
                    if (message.age != null && message.hasOwnProperty("age"))
                        object.age = message.age;
                    if (message.gender != null && message.hasOwnProperty("gender"))
                        object.gender = options.enums === String ? $root.matrix_io.vision.v1.FacialRecognition.Gender[message.gender] : message.gender;
                    if (message.emotion != null && message.hasOwnProperty("emotion"))
                        object.emotion = options.enums === String ? $root.matrix_io.vision.v1.FacialRecognition.Emotion[message.emotion] : message.emotion;
                    if (message.faceDescriptor && message.faceDescriptor.length) {
                        object.faceDescriptor = [];
                        for (var j = 0; j < message.faceDescriptor.length; ++j)
                            object.faceDescriptor[j] = options.json && !isFinite(message.faceDescriptor[j]) ? String(message.faceDescriptor[j]) : message.faceDescriptor[j];
                    }
                    if (message.faceId != null && message.hasOwnProperty("faceId"))
                        object.faceId = message.faceId;
                    if (message.poseYaw != null && message.hasOwnProperty("poseYaw"))
                        object.poseYaw = options.json && !isFinite(message.poseYaw) ? String(message.poseYaw) : message.poseYaw;
                    if (message.poseRoll != null && message.hasOwnProperty("poseRoll"))
                        object.poseRoll = options.json && !isFinite(message.poseRoll) ? String(message.poseRoll) : message.poseRoll;
                    if (message.posePitch != null && message.hasOwnProperty("posePitch"))
                        object.posePitch = options.json && !isFinite(message.posePitch) ? String(message.posePitch) : message.posePitch;
                    if (message.basicFeature != null && message.hasOwnProperty("basicFeature"))
                        object.basicFeature = $root.matrix_io.vision.v1.FacialRecognition.BasicFaceFeature.toObject(message.basicFeature, options);
                    if (message.isFace != null && message.hasOwnProperty("isFace"))
                        object.isFace = message.isFace;
                    return object;
                };

                /**
                 * Converts this FacialRecognition to JSON.
                 * @function toJSON
                 * @memberof matrix_io.vision.v1.FacialRecognition
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FacialRecognition.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gender enum.
                 * @name matrix_io.vision.v1.FacialRecognition.Gender
                 * @enum {string}
                 * @property {number} GENDER_NOT_DEFINED=0 GENDER_NOT_DEFINED value
                 * @property {number} MALE=1 MALE value
                 * @property {number} FEMALE=2 FEMALE value
                 */
                FacialRecognition.Gender = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "GENDER_NOT_DEFINED"] = 0;
                    values[valuesById[1] = "MALE"] = 1;
                    values[valuesById[2] = "FEMALE"] = 2;
                    return values;
                })();

                /**
                 * Emotion enum.
                 * @name matrix_io.vision.v1.FacialRecognition.Emotion
                 * @enum {string}
                 * @property {number} EMOTION_NOT_DEFINED=0 EMOTION_NOT_DEFINED value
                 * @property {number} ANGRY=1 ANGRY value
                 * @property {number} DISGUST=2 DISGUST value
                 * @property {number} CONFUSED=3 CONFUSED value
                 * @property {number} HAPPY=4 HAPPY value
                 * @property {number} SAD=5 SAD value
                 * @property {number} SURPRISED=6 SURPRISED value
                 * @property {number} CALM=7 CALM value
                 * @property {number} FEAR=8 FEAR value
                 * @property {number} NEUTRAL=9 NEUTRAL value
                 */
                FacialRecognition.Emotion = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "EMOTION_NOT_DEFINED"] = 0;
                    values[valuesById[1] = "ANGRY"] = 1;
                    values[valuesById[2] = "DISGUST"] = 2;
                    values[valuesById[3] = "CONFUSED"] = 3;
                    values[valuesById[4] = "HAPPY"] = 4;
                    values[valuesById[5] = "SAD"] = 5;
                    values[valuesById[6] = "SURPRISED"] = 6;
                    values[valuesById[7] = "CALM"] = 7;
                    values[valuesById[8] = "FEAR"] = 8;
                    values[valuesById[9] = "NEUTRAL"] = 9;
                    return values;
                })();

                FacialRecognition.BasicFaceFeature = (function() {

                    /**
                     * Properties of a BasicFaceFeature.
                     * @memberof matrix_io.vision.v1.FacialRecognition
                     * @interface IBasicFaceFeature
                     * @property {Array.<matrix_io.vision.v1.IPoint>|null} [mouth] BasicFaceFeature mouth
                     * @property {Array.<matrix_io.vision.v1.IPoint>|null} [leftEye] BasicFaceFeature leftEye
                     * @property {Array.<matrix_io.vision.v1.IPoint>|null} [rightEye] BasicFaceFeature rightEye
                     * @property {Array.<matrix_io.vision.v1.IPoint>|null} [nose] BasicFaceFeature nose
                     */

                    /**
                     * Constructs a new BasicFaceFeature.
                     * @memberof matrix_io.vision.v1.FacialRecognition
                     * @classdesc Represents a BasicFaceFeature.
                     * @implements IBasicFaceFeature
                     * @constructor
                     * @param {matrix_io.vision.v1.FacialRecognition.IBasicFaceFeature=} [properties] Properties to set
                     */
                    function BasicFaceFeature(properties) {
                        this.mouth = [];
                        this.leftEye = [];
                        this.rightEye = [];
                        this.nose = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * BasicFaceFeature mouth.
                     * @member {Array.<matrix_io.vision.v1.IPoint>} mouth
                     * @memberof matrix_io.vision.v1.FacialRecognition.BasicFaceFeature
                     * @instance
                     */
                    BasicFaceFeature.prototype.mouth = $util.emptyArray;

                    /**
                     * BasicFaceFeature leftEye.
                     * @member {Array.<matrix_io.vision.v1.IPoint>} leftEye
                     * @memberof matrix_io.vision.v1.FacialRecognition.BasicFaceFeature
                     * @instance
                     */
                    BasicFaceFeature.prototype.leftEye = $util.emptyArray;

                    /**
                     * BasicFaceFeature rightEye.
                     * @member {Array.<matrix_io.vision.v1.IPoint>} rightEye
                     * @memberof matrix_io.vision.v1.FacialRecognition.BasicFaceFeature
                     * @instance
                     */
                    BasicFaceFeature.prototype.rightEye = $util.emptyArray;

                    /**
                     * BasicFaceFeature nose.
                     * @member {Array.<matrix_io.vision.v1.IPoint>} nose
                     * @memberof matrix_io.vision.v1.FacialRecognition.BasicFaceFeature
                     * @instance
                     */
                    BasicFaceFeature.prototype.nose = $util.emptyArray;

                    /**
                     * Creates a new BasicFaceFeature instance using the specified properties.
                     * @function create
                     * @memberof matrix_io.vision.v1.FacialRecognition.BasicFaceFeature
                     * @static
                     * @param {matrix_io.vision.v1.FacialRecognition.IBasicFaceFeature=} [properties] Properties to set
                     * @returns {matrix_io.vision.v1.FacialRecognition.BasicFaceFeature} BasicFaceFeature instance
                     */
                    BasicFaceFeature.create = function create(properties) {
                        return new BasicFaceFeature(properties);
                    };

                    /**
                     * Encodes the specified BasicFaceFeature message. Does not implicitly {@link matrix_io.vision.v1.FacialRecognition.BasicFaceFeature.verify|verify} messages.
                     * @function encode
                     * @memberof matrix_io.vision.v1.FacialRecognition.BasicFaceFeature
                     * @static
                     * @param {matrix_io.vision.v1.FacialRecognition.IBasicFaceFeature} message BasicFaceFeature message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    BasicFaceFeature.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.mouth != null && message.mouth.length)
                            for (var i = 0; i < message.mouth.length; ++i)
                                $root.matrix_io.vision.v1.Point.encode(message.mouth[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.leftEye != null && message.leftEye.length)
                            for (var i = 0; i < message.leftEye.length; ++i)
                                $root.matrix_io.vision.v1.Point.encode(message.leftEye[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.rightEye != null && message.rightEye.length)
                            for (var i = 0; i < message.rightEye.length; ++i)
                                $root.matrix_io.vision.v1.Point.encode(message.rightEye[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.nose != null && message.nose.length)
                            for (var i = 0; i < message.nose.length; ++i)
                                $root.matrix_io.vision.v1.Point.encode(message.nose[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified BasicFaceFeature message, length delimited. Does not implicitly {@link matrix_io.vision.v1.FacialRecognition.BasicFaceFeature.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof matrix_io.vision.v1.FacialRecognition.BasicFaceFeature
                     * @static
                     * @param {matrix_io.vision.v1.FacialRecognition.IBasicFaceFeature} message BasicFaceFeature message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    BasicFaceFeature.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a BasicFaceFeature message from the specified reader or buffer.
                     * @function decode
                     * @memberof matrix_io.vision.v1.FacialRecognition.BasicFaceFeature
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {matrix_io.vision.v1.FacialRecognition.BasicFaceFeature} BasicFaceFeature
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    BasicFaceFeature.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.vision.v1.FacialRecognition.BasicFaceFeature();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.mouth && message.mouth.length))
                                    message.mouth = [];
                                message.mouth.push($root.matrix_io.vision.v1.Point.decode(reader, reader.uint32()));
                                break;
                            case 2:
                                if (!(message.leftEye && message.leftEye.length))
                                    message.leftEye = [];
                                message.leftEye.push($root.matrix_io.vision.v1.Point.decode(reader, reader.uint32()));
                                break;
                            case 3:
                                if (!(message.rightEye && message.rightEye.length))
                                    message.rightEye = [];
                                message.rightEye.push($root.matrix_io.vision.v1.Point.decode(reader, reader.uint32()));
                                break;
                            case 4:
                                if (!(message.nose && message.nose.length))
                                    message.nose = [];
                                message.nose.push($root.matrix_io.vision.v1.Point.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a BasicFaceFeature message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof matrix_io.vision.v1.FacialRecognition.BasicFaceFeature
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {matrix_io.vision.v1.FacialRecognition.BasicFaceFeature} BasicFaceFeature
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    BasicFaceFeature.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a BasicFaceFeature message.
                     * @function verify
                     * @memberof matrix_io.vision.v1.FacialRecognition.BasicFaceFeature
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    BasicFaceFeature.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.mouth != null && message.hasOwnProperty("mouth")) {
                            if (!Array.isArray(message.mouth))
                                return "mouth: array expected";
                            for (var i = 0; i < message.mouth.length; ++i) {
                                var error = $root.matrix_io.vision.v1.Point.verify(message.mouth[i]);
                                if (error)
                                    return "mouth." + error;
                            }
                        }
                        if (message.leftEye != null && message.hasOwnProperty("leftEye")) {
                            if (!Array.isArray(message.leftEye))
                                return "leftEye: array expected";
                            for (var i = 0; i < message.leftEye.length; ++i) {
                                var error = $root.matrix_io.vision.v1.Point.verify(message.leftEye[i]);
                                if (error)
                                    return "leftEye." + error;
                            }
                        }
                        if (message.rightEye != null && message.hasOwnProperty("rightEye")) {
                            if (!Array.isArray(message.rightEye))
                                return "rightEye: array expected";
                            for (var i = 0; i < message.rightEye.length; ++i) {
                                var error = $root.matrix_io.vision.v1.Point.verify(message.rightEye[i]);
                                if (error)
                                    return "rightEye." + error;
                            }
                        }
                        if (message.nose != null && message.hasOwnProperty("nose")) {
                            if (!Array.isArray(message.nose))
                                return "nose: array expected";
                            for (var i = 0; i < message.nose.length; ++i) {
                                var error = $root.matrix_io.vision.v1.Point.verify(message.nose[i]);
                                if (error)
                                    return "nose." + error;
                            }
                        }
                        return null;
                    };

                    /**
                     * Creates a BasicFaceFeature message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof matrix_io.vision.v1.FacialRecognition.BasicFaceFeature
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {matrix_io.vision.v1.FacialRecognition.BasicFaceFeature} BasicFaceFeature
                     */
                    BasicFaceFeature.fromObject = function fromObject(object) {
                        if (object instanceof $root.matrix_io.vision.v1.FacialRecognition.BasicFaceFeature)
                            return object;
                        var message = new $root.matrix_io.vision.v1.FacialRecognition.BasicFaceFeature();
                        if (object.mouth) {
                            if (!Array.isArray(object.mouth))
                                throw TypeError(".matrix_io.vision.v1.FacialRecognition.BasicFaceFeature.mouth: array expected");
                            message.mouth = [];
                            for (var i = 0; i < object.mouth.length; ++i) {
                                if (typeof object.mouth[i] !== "object")
                                    throw TypeError(".matrix_io.vision.v1.FacialRecognition.BasicFaceFeature.mouth: object expected");
                                message.mouth[i] = $root.matrix_io.vision.v1.Point.fromObject(object.mouth[i]);
                            }
                        }
                        if (object.leftEye) {
                            if (!Array.isArray(object.leftEye))
                                throw TypeError(".matrix_io.vision.v1.FacialRecognition.BasicFaceFeature.leftEye: array expected");
                            message.leftEye = [];
                            for (var i = 0; i < object.leftEye.length; ++i) {
                                if (typeof object.leftEye[i] !== "object")
                                    throw TypeError(".matrix_io.vision.v1.FacialRecognition.BasicFaceFeature.leftEye: object expected");
                                message.leftEye[i] = $root.matrix_io.vision.v1.Point.fromObject(object.leftEye[i]);
                            }
                        }
                        if (object.rightEye) {
                            if (!Array.isArray(object.rightEye))
                                throw TypeError(".matrix_io.vision.v1.FacialRecognition.BasicFaceFeature.rightEye: array expected");
                            message.rightEye = [];
                            for (var i = 0; i < object.rightEye.length; ++i) {
                                if (typeof object.rightEye[i] !== "object")
                                    throw TypeError(".matrix_io.vision.v1.FacialRecognition.BasicFaceFeature.rightEye: object expected");
                                message.rightEye[i] = $root.matrix_io.vision.v1.Point.fromObject(object.rightEye[i]);
                            }
                        }
                        if (object.nose) {
                            if (!Array.isArray(object.nose))
                                throw TypeError(".matrix_io.vision.v1.FacialRecognition.BasicFaceFeature.nose: array expected");
                            message.nose = [];
                            for (var i = 0; i < object.nose.length; ++i) {
                                if (typeof object.nose[i] !== "object")
                                    throw TypeError(".matrix_io.vision.v1.FacialRecognition.BasicFaceFeature.nose: object expected");
                                message.nose[i] = $root.matrix_io.vision.v1.Point.fromObject(object.nose[i]);
                            }
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a BasicFaceFeature message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof matrix_io.vision.v1.FacialRecognition.BasicFaceFeature
                     * @static
                     * @param {matrix_io.vision.v1.FacialRecognition.BasicFaceFeature} message BasicFaceFeature
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    BasicFaceFeature.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults) {
                            object.mouth = [];
                            object.leftEye = [];
                            object.rightEye = [];
                            object.nose = [];
                        }
                        if (message.mouth && message.mouth.length) {
                            object.mouth = [];
                            for (var j = 0; j < message.mouth.length; ++j)
                                object.mouth[j] = $root.matrix_io.vision.v1.Point.toObject(message.mouth[j], options);
                        }
                        if (message.leftEye && message.leftEye.length) {
                            object.leftEye = [];
                            for (var j = 0; j < message.leftEye.length; ++j)
                                object.leftEye[j] = $root.matrix_io.vision.v1.Point.toObject(message.leftEye[j], options);
                        }
                        if (message.rightEye && message.rightEye.length) {
                            object.rightEye = [];
                            for (var j = 0; j < message.rightEye.length; ++j)
                                object.rightEye[j] = $root.matrix_io.vision.v1.Point.toObject(message.rightEye[j], options);
                        }
                        if (message.nose && message.nose.length) {
                            object.nose = [];
                            for (var j = 0; j < message.nose.length; ++j)
                                object.nose[j] = $root.matrix_io.vision.v1.Point.toObject(message.nose[j], options);
                        }
                        return object;
                    };

                    /**
                     * Converts this BasicFaceFeature to JSON.
                     * @function toJSON
                     * @memberof matrix_io.vision.v1.FacialRecognition.BasicFaceFeature
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    BasicFaceFeature.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return BasicFaceFeature;
                })();

                return FacialRecognition;
            })();

            /**
             * ZoneDirection enum.
             * @name matrix_io.vision.v1.ZoneDirection
             * @enum {string}
             * @property {number} ZONE_DIRECTION_NOT_DEFINED=0 ZONE_DIRECTION_NOT_DEFINED value
             * @property {number} FORWARD=1 FORWARD value
             * @property {number} BACKWARD=2 BACKWARD value
             */
            v1.ZoneDirection = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "ZONE_DIRECTION_NOT_DEFINED"] = 0;
                values[valuesById[1] = "FORWARD"] = 1;
                values[valuesById[2] = "BACKWARD"] = 2;
                return values;
            })();

            v1.ZoneConfig = (function() {

                /**
                 * Properties of a ZoneConfig.
                 * @memberof matrix_io.vision.v1
                 * @interface IZoneConfig
                 * @property {string|null} [name] ZoneConfig name
                 * @property {matrix_io.vision.v1.IPoint|null} [pointA] ZoneConfig pointA
                 * @property {matrix_io.vision.v1.IPoint|null} [pointB] ZoneConfig pointB
                 * @property {number|null} [height] ZoneConfig height
                 * @property {number|null} [realHeight] ZoneConfig realHeight
                 */

                /**
                 * Constructs a new ZoneConfig.
                 * @memberof matrix_io.vision.v1
                 * @classdesc Represents a ZoneConfig.
                 * @implements IZoneConfig
                 * @constructor
                 * @param {matrix_io.vision.v1.IZoneConfig=} [properties] Properties to set
                 */
                function ZoneConfig(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ZoneConfig name.
                 * @member {string} name
                 * @memberof matrix_io.vision.v1.ZoneConfig
                 * @instance
                 */
                ZoneConfig.prototype.name = "";

                /**
                 * ZoneConfig pointA.
                 * @member {matrix_io.vision.v1.IPoint|null|undefined} pointA
                 * @memberof matrix_io.vision.v1.ZoneConfig
                 * @instance
                 */
                ZoneConfig.prototype.pointA = null;

                /**
                 * ZoneConfig pointB.
                 * @member {matrix_io.vision.v1.IPoint|null|undefined} pointB
                 * @memberof matrix_io.vision.v1.ZoneConfig
                 * @instance
                 */
                ZoneConfig.prototype.pointB = null;

                /**
                 * ZoneConfig height.
                 * @member {number} height
                 * @memberof matrix_io.vision.v1.ZoneConfig
                 * @instance
                 */
                ZoneConfig.prototype.height = 0;

                /**
                 * ZoneConfig realHeight.
                 * @member {number} realHeight
                 * @memberof matrix_io.vision.v1.ZoneConfig
                 * @instance
                 */
                ZoneConfig.prototype.realHeight = 0;

                /**
                 * Creates a new ZoneConfig instance using the specified properties.
                 * @function create
                 * @memberof matrix_io.vision.v1.ZoneConfig
                 * @static
                 * @param {matrix_io.vision.v1.IZoneConfig=} [properties] Properties to set
                 * @returns {matrix_io.vision.v1.ZoneConfig} ZoneConfig instance
                 */
                ZoneConfig.create = function create(properties) {
                    return new ZoneConfig(properties);
                };

                /**
                 * Encodes the specified ZoneConfig message. Does not implicitly {@link matrix_io.vision.v1.ZoneConfig.verify|verify} messages.
                 * @function encode
                 * @memberof matrix_io.vision.v1.ZoneConfig
                 * @static
                 * @param {matrix_io.vision.v1.IZoneConfig} message ZoneConfig message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ZoneConfig.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && message.hasOwnProperty("name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.pointA != null && message.hasOwnProperty("pointA"))
                        $root.matrix_io.vision.v1.Point.encode(message.pointA, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.pointB != null && message.hasOwnProperty("pointB"))
                        $root.matrix_io.vision.v1.Point.encode(message.pointB, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.height != null && message.hasOwnProperty("height"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.height);
                    if (message.realHeight != null && message.hasOwnProperty("realHeight"))
                        writer.uint32(/* id 5, wireType 5 =*/45).float(message.realHeight);
                    return writer;
                };

                /**
                 * Encodes the specified ZoneConfig message, length delimited. Does not implicitly {@link matrix_io.vision.v1.ZoneConfig.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof matrix_io.vision.v1.ZoneConfig
                 * @static
                 * @param {matrix_io.vision.v1.IZoneConfig} message ZoneConfig message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ZoneConfig.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a ZoneConfig message from the specified reader or buffer.
                 * @function decode
                 * @memberof matrix_io.vision.v1.ZoneConfig
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {matrix_io.vision.v1.ZoneConfig} ZoneConfig
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ZoneConfig.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.vision.v1.ZoneConfig();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            message.pointA = $root.matrix_io.vision.v1.Point.decode(reader, reader.uint32());
                            break;
                        case 3:
                            message.pointB = $root.matrix_io.vision.v1.Point.decode(reader, reader.uint32());
                            break;
                        case 4:
                            message.height = reader.int32();
                            break;
                        case 5:
                            message.realHeight = reader.float();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a ZoneConfig message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof matrix_io.vision.v1.ZoneConfig
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {matrix_io.vision.v1.ZoneConfig} ZoneConfig
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ZoneConfig.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a ZoneConfig message.
                 * @function verify
                 * @memberof matrix_io.vision.v1.ZoneConfig
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ZoneConfig.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.pointA != null && message.hasOwnProperty("pointA")) {
                        var error = $root.matrix_io.vision.v1.Point.verify(message.pointA);
                        if (error)
                            return "pointA." + error;
                    }
                    if (message.pointB != null && message.hasOwnProperty("pointB")) {
                        var error = $root.matrix_io.vision.v1.Point.verify(message.pointB);
                        if (error)
                            return "pointB." + error;
                    }
                    if (message.height != null && message.hasOwnProperty("height"))
                        if (!$util.isInteger(message.height))
                            return "height: integer expected";
                    if (message.realHeight != null && message.hasOwnProperty("realHeight"))
                        if (typeof message.realHeight !== "number")
                            return "realHeight: number expected";
                    return null;
                };

                /**
                 * Creates a ZoneConfig message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof matrix_io.vision.v1.ZoneConfig
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {matrix_io.vision.v1.ZoneConfig} ZoneConfig
                 */
                ZoneConfig.fromObject = function fromObject(object) {
                    if (object instanceof $root.matrix_io.vision.v1.ZoneConfig)
                        return object;
                    var message = new $root.matrix_io.vision.v1.ZoneConfig();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.pointA != null) {
                        if (typeof object.pointA !== "object")
                            throw TypeError(".matrix_io.vision.v1.ZoneConfig.pointA: object expected");
                        message.pointA = $root.matrix_io.vision.v1.Point.fromObject(object.pointA);
                    }
                    if (object.pointB != null) {
                        if (typeof object.pointB !== "object")
                            throw TypeError(".matrix_io.vision.v1.ZoneConfig.pointB: object expected");
                        message.pointB = $root.matrix_io.vision.v1.Point.fromObject(object.pointB);
                    }
                    if (object.height != null)
                        message.height = object.height | 0;
                    if (object.realHeight != null)
                        message.realHeight = Number(object.realHeight);
                    return message;
                };

                /**
                 * Creates a plain object from a ZoneConfig message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof matrix_io.vision.v1.ZoneConfig
                 * @static
                 * @param {matrix_io.vision.v1.ZoneConfig} message ZoneConfig
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ZoneConfig.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.pointA = null;
                        object.pointB = null;
                        object.height = 0;
                        object.realHeight = 0;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.pointA != null && message.hasOwnProperty("pointA"))
                        object.pointA = $root.matrix_io.vision.v1.Point.toObject(message.pointA, options);
                    if (message.pointB != null && message.hasOwnProperty("pointB"))
                        object.pointB = $root.matrix_io.vision.v1.Point.toObject(message.pointB, options);
                    if (message.height != null && message.hasOwnProperty("height"))
                        object.height = message.height;
                    if (message.realHeight != null && message.hasOwnProperty("realHeight"))
                        object.realHeight = options.json && !isFinite(message.realHeight) ? String(message.realHeight) : message.realHeight;
                    return object;
                };

                /**
                 * Converts this ZoneConfig to JSON.
                 * @function toJSON
                 * @memberof matrix_io.vision.v1.ZoneConfig
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ZoneConfig.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ZoneConfig;
            })();

            v1.AreaConfig = (function() {

                /**
                 * Properties of an AreaConfig.
                 * @memberof matrix_io.vision.v1
                 * @interface IAreaConfig
                 * @property {string|null} [name] AreaConfig name
                 * @property {Array.<matrix_io.vision.v1.IPoint>|null} [point] AreaConfig point
                 * @property {matrix_io.vision.v1.IPoint|null} [countDirection] AreaConfig countDirection
                 */

                /**
                 * Constructs a new AreaConfig.
                 * @memberof matrix_io.vision.v1
                 * @classdesc Represents an AreaConfig.
                 * @implements IAreaConfig
                 * @constructor
                 * @param {matrix_io.vision.v1.IAreaConfig=} [properties] Properties to set
                 */
                function AreaConfig(properties) {
                    this.point = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * AreaConfig name.
                 * @member {string} name
                 * @memberof matrix_io.vision.v1.AreaConfig
                 * @instance
                 */
                AreaConfig.prototype.name = "";

                /**
                 * AreaConfig point.
                 * @member {Array.<matrix_io.vision.v1.IPoint>} point
                 * @memberof matrix_io.vision.v1.AreaConfig
                 * @instance
                 */
                AreaConfig.prototype.point = $util.emptyArray;

                /**
                 * AreaConfig countDirection.
                 * @member {matrix_io.vision.v1.IPoint|null|undefined} countDirection
                 * @memberof matrix_io.vision.v1.AreaConfig
                 * @instance
                 */
                AreaConfig.prototype.countDirection = null;

                /**
                 * Creates a new AreaConfig instance using the specified properties.
                 * @function create
                 * @memberof matrix_io.vision.v1.AreaConfig
                 * @static
                 * @param {matrix_io.vision.v1.IAreaConfig=} [properties] Properties to set
                 * @returns {matrix_io.vision.v1.AreaConfig} AreaConfig instance
                 */
                AreaConfig.create = function create(properties) {
                    return new AreaConfig(properties);
                };

                /**
                 * Encodes the specified AreaConfig message. Does not implicitly {@link matrix_io.vision.v1.AreaConfig.verify|verify} messages.
                 * @function encode
                 * @memberof matrix_io.vision.v1.AreaConfig
                 * @static
                 * @param {matrix_io.vision.v1.IAreaConfig} message AreaConfig message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                AreaConfig.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && message.hasOwnProperty("name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.point != null && message.point.length)
                        for (var i = 0; i < message.point.length; ++i)
                            $root.matrix_io.vision.v1.Point.encode(message.point[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.countDirection != null && message.hasOwnProperty("countDirection"))
                        $root.matrix_io.vision.v1.Point.encode(message.countDirection, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified AreaConfig message, length delimited. Does not implicitly {@link matrix_io.vision.v1.AreaConfig.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof matrix_io.vision.v1.AreaConfig
                 * @static
                 * @param {matrix_io.vision.v1.IAreaConfig} message AreaConfig message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                AreaConfig.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an AreaConfig message from the specified reader or buffer.
                 * @function decode
                 * @memberof matrix_io.vision.v1.AreaConfig
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {matrix_io.vision.v1.AreaConfig} AreaConfig
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                AreaConfig.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.vision.v1.AreaConfig();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            if (!(message.point && message.point.length))
                                message.point = [];
                            message.point.push($root.matrix_io.vision.v1.Point.decode(reader, reader.uint32()));
                            break;
                        case 3:
                            message.countDirection = $root.matrix_io.vision.v1.Point.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an AreaConfig message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof matrix_io.vision.v1.AreaConfig
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {matrix_io.vision.v1.AreaConfig} AreaConfig
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                AreaConfig.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an AreaConfig message.
                 * @function verify
                 * @memberof matrix_io.vision.v1.AreaConfig
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                AreaConfig.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.point != null && message.hasOwnProperty("point")) {
                        if (!Array.isArray(message.point))
                            return "point: array expected";
                        for (var i = 0; i < message.point.length; ++i) {
                            var error = $root.matrix_io.vision.v1.Point.verify(message.point[i]);
                            if (error)
                                return "point." + error;
                        }
                    }
                    if (message.countDirection != null && message.hasOwnProperty("countDirection")) {
                        var error = $root.matrix_io.vision.v1.Point.verify(message.countDirection);
                        if (error)
                            return "countDirection." + error;
                    }
                    return null;
                };

                /**
                 * Creates an AreaConfig message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof matrix_io.vision.v1.AreaConfig
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {matrix_io.vision.v1.AreaConfig} AreaConfig
                 */
                AreaConfig.fromObject = function fromObject(object) {
                    if (object instanceof $root.matrix_io.vision.v1.AreaConfig)
                        return object;
                    var message = new $root.matrix_io.vision.v1.AreaConfig();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.point) {
                        if (!Array.isArray(object.point))
                            throw TypeError(".matrix_io.vision.v1.AreaConfig.point: array expected");
                        message.point = [];
                        for (var i = 0; i < object.point.length; ++i) {
                            if (typeof object.point[i] !== "object")
                                throw TypeError(".matrix_io.vision.v1.AreaConfig.point: object expected");
                            message.point[i] = $root.matrix_io.vision.v1.Point.fromObject(object.point[i]);
                        }
                    }
                    if (object.countDirection != null) {
                        if (typeof object.countDirection !== "object")
                            throw TypeError(".matrix_io.vision.v1.AreaConfig.countDirection: object expected");
                        message.countDirection = $root.matrix_io.vision.v1.Point.fromObject(object.countDirection);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from an AreaConfig message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof matrix_io.vision.v1.AreaConfig
                 * @static
                 * @param {matrix_io.vision.v1.AreaConfig} message AreaConfig
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                AreaConfig.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.point = [];
                    if (options.defaults) {
                        object.name = "";
                        object.countDirection = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.point && message.point.length) {
                        object.point = [];
                        for (var j = 0; j < message.point.length; ++j)
                            object.point[j] = $root.matrix_io.vision.v1.Point.toObject(message.point[j], options);
                    }
                    if (message.countDirection != null && message.hasOwnProperty("countDirection"))
                        object.countDirection = $root.matrix_io.vision.v1.Point.toObject(message.countDirection, options);
                    return object;
                };

                /**
                 * Converts this AreaConfig to JSON.
                 * @function toJSON
                 * @memberof matrix_io.vision.v1.AreaConfig
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                AreaConfig.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return AreaConfig;
            })();

            v1.AreaAndZoneConfig = (function() {

                /**
                 * Properties of an AreaAndZoneConfig.
                 * @memberof matrix_io.vision.v1
                 * @interface IAreaAndZoneConfig
                 * @property {Array.<matrix_io.vision.v1.IAreaConfig>|null} [area] AreaAndZoneConfig area
                 * @property {Array.<matrix_io.vision.v1.IZoneConfig>|null} [zone] AreaAndZoneConfig zone
                 * @property {Array.<matrix_io.vision.v1.IRectangle>|null} [regionOfInterest] AreaAndZoneConfig regionOfInterest
                 */

                /**
                 * Constructs a new AreaAndZoneConfig.
                 * @memberof matrix_io.vision.v1
                 * @classdesc Represents an AreaAndZoneConfig.
                 * @implements IAreaAndZoneConfig
                 * @constructor
                 * @param {matrix_io.vision.v1.IAreaAndZoneConfig=} [properties] Properties to set
                 */
                function AreaAndZoneConfig(properties) {
                    this.area = [];
                    this.zone = [];
                    this.regionOfInterest = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * AreaAndZoneConfig area.
                 * @member {Array.<matrix_io.vision.v1.IAreaConfig>} area
                 * @memberof matrix_io.vision.v1.AreaAndZoneConfig
                 * @instance
                 */
                AreaAndZoneConfig.prototype.area = $util.emptyArray;

                /**
                 * AreaAndZoneConfig zone.
                 * @member {Array.<matrix_io.vision.v1.IZoneConfig>} zone
                 * @memberof matrix_io.vision.v1.AreaAndZoneConfig
                 * @instance
                 */
                AreaAndZoneConfig.prototype.zone = $util.emptyArray;

                /**
                 * AreaAndZoneConfig regionOfInterest.
                 * @member {Array.<matrix_io.vision.v1.IRectangle>} regionOfInterest
                 * @memberof matrix_io.vision.v1.AreaAndZoneConfig
                 * @instance
                 */
                AreaAndZoneConfig.prototype.regionOfInterest = $util.emptyArray;

                /**
                 * Creates a new AreaAndZoneConfig instance using the specified properties.
                 * @function create
                 * @memberof matrix_io.vision.v1.AreaAndZoneConfig
                 * @static
                 * @param {matrix_io.vision.v1.IAreaAndZoneConfig=} [properties] Properties to set
                 * @returns {matrix_io.vision.v1.AreaAndZoneConfig} AreaAndZoneConfig instance
                 */
                AreaAndZoneConfig.create = function create(properties) {
                    return new AreaAndZoneConfig(properties);
                };

                /**
                 * Encodes the specified AreaAndZoneConfig message. Does not implicitly {@link matrix_io.vision.v1.AreaAndZoneConfig.verify|verify} messages.
                 * @function encode
                 * @memberof matrix_io.vision.v1.AreaAndZoneConfig
                 * @static
                 * @param {matrix_io.vision.v1.IAreaAndZoneConfig} message AreaAndZoneConfig message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                AreaAndZoneConfig.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.area != null && message.area.length)
                        for (var i = 0; i < message.area.length; ++i)
                            $root.matrix_io.vision.v1.AreaConfig.encode(message.area[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.zone != null && message.zone.length)
                        for (var i = 0; i < message.zone.length; ++i)
                            $root.matrix_io.vision.v1.ZoneConfig.encode(message.zone[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.regionOfInterest != null && message.regionOfInterest.length)
                        for (var i = 0; i < message.regionOfInterest.length; ++i)
                            $root.matrix_io.vision.v1.Rectangle.encode(message.regionOfInterest[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified AreaAndZoneConfig message, length delimited. Does not implicitly {@link matrix_io.vision.v1.AreaAndZoneConfig.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof matrix_io.vision.v1.AreaAndZoneConfig
                 * @static
                 * @param {matrix_io.vision.v1.IAreaAndZoneConfig} message AreaAndZoneConfig message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                AreaAndZoneConfig.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an AreaAndZoneConfig message from the specified reader or buffer.
                 * @function decode
                 * @memberof matrix_io.vision.v1.AreaAndZoneConfig
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {matrix_io.vision.v1.AreaAndZoneConfig} AreaAndZoneConfig
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                AreaAndZoneConfig.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.vision.v1.AreaAndZoneConfig();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.area && message.area.length))
                                message.area = [];
                            message.area.push($root.matrix_io.vision.v1.AreaConfig.decode(reader, reader.uint32()));
                            break;
                        case 2:
                            if (!(message.zone && message.zone.length))
                                message.zone = [];
                            message.zone.push($root.matrix_io.vision.v1.ZoneConfig.decode(reader, reader.uint32()));
                            break;
                        case 3:
                            if (!(message.regionOfInterest && message.regionOfInterest.length))
                                message.regionOfInterest = [];
                            message.regionOfInterest.push($root.matrix_io.vision.v1.Rectangle.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an AreaAndZoneConfig message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof matrix_io.vision.v1.AreaAndZoneConfig
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {matrix_io.vision.v1.AreaAndZoneConfig} AreaAndZoneConfig
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                AreaAndZoneConfig.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an AreaAndZoneConfig message.
                 * @function verify
                 * @memberof matrix_io.vision.v1.AreaAndZoneConfig
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                AreaAndZoneConfig.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.area != null && message.hasOwnProperty("area")) {
                        if (!Array.isArray(message.area))
                            return "area: array expected";
                        for (var i = 0; i < message.area.length; ++i) {
                            var error = $root.matrix_io.vision.v1.AreaConfig.verify(message.area[i]);
                            if (error)
                                return "area." + error;
                        }
                    }
                    if (message.zone != null && message.hasOwnProperty("zone")) {
                        if (!Array.isArray(message.zone))
                            return "zone: array expected";
                        for (var i = 0; i < message.zone.length; ++i) {
                            var error = $root.matrix_io.vision.v1.ZoneConfig.verify(message.zone[i]);
                            if (error)
                                return "zone." + error;
                        }
                    }
                    if (message.regionOfInterest != null && message.hasOwnProperty("regionOfInterest")) {
                        if (!Array.isArray(message.regionOfInterest))
                            return "regionOfInterest: array expected";
                        for (var i = 0; i < message.regionOfInterest.length; ++i) {
                            var error = $root.matrix_io.vision.v1.Rectangle.verify(message.regionOfInterest[i]);
                            if (error)
                                return "regionOfInterest." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates an AreaAndZoneConfig message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof matrix_io.vision.v1.AreaAndZoneConfig
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {matrix_io.vision.v1.AreaAndZoneConfig} AreaAndZoneConfig
                 */
                AreaAndZoneConfig.fromObject = function fromObject(object) {
                    if (object instanceof $root.matrix_io.vision.v1.AreaAndZoneConfig)
                        return object;
                    var message = new $root.matrix_io.vision.v1.AreaAndZoneConfig();
                    if (object.area) {
                        if (!Array.isArray(object.area))
                            throw TypeError(".matrix_io.vision.v1.AreaAndZoneConfig.area: array expected");
                        message.area = [];
                        for (var i = 0; i < object.area.length; ++i) {
                            if (typeof object.area[i] !== "object")
                                throw TypeError(".matrix_io.vision.v1.AreaAndZoneConfig.area: object expected");
                            message.area[i] = $root.matrix_io.vision.v1.AreaConfig.fromObject(object.area[i]);
                        }
                    }
                    if (object.zone) {
                        if (!Array.isArray(object.zone))
                            throw TypeError(".matrix_io.vision.v1.AreaAndZoneConfig.zone: array expected");
                        message.zone = [];
                        for (var i = 0; i < object.zone.length; ++i) {
                            if (typeof object.zone[i] !== "object")
                                throw TypeError(".matrix_io.vision.v1.AreaAndZoneConfig.zone: object expected");
                            message.zone[i] = $root.matrix_io.vision.v1.ZoneConfig.fromObject(object.zone[i]);
                        }
                    }
                    if (object.regionOfInterest) {
                        if (!Array.isArray(object.regionOfInterest))
                            throw TypeError(".matrix_io.vision.v1.AreaAndZoneConfig.regionOfInterest: array expected");
                        message.regionOfInterest = [];
                        for (var i = 0; i < object.regionOfInterest.length; ++i) {
                            if (typeof object.regionOfInterest[i] !== "object")
                                throw TypeError(".matrix_io.vision.v1.AreaAndZoneConfig.regionOfInterest: object expected");
                            message.regionOfInterest[i] = $root.matrix_io.vision.v1.Rectangle.fromObject(object.regionOfInterest[i]);
                        }
                    }
                    return message;
                };

                /**
                 * Creates a plain object from an AreaAndZoneConfig message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof matrix_io.vision.v1.AreaAndZoneConfig
                 * @static
                 * @param {matrix_io.vision.v1.AreaAndZoneConfig} message AreaAndZoneConfig
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                AreaAndZoneConfig.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.area = [];
                        object.zone = [];
                        object.regionOfInterest = [];
                    }
                    if (message.area && message.area.length) {
                        object.area = [];
                        for (var j = 0; j < message.area.length; ++j)
                            object.area[j] = $root.matrix_io.vision.v1.AreaConfig.toObject(message.area[j], options);
                    }
                    if (message.zone && message.zone.length) {
                        object.zone = [];
                        for (var j = 0; j < message.zone.length; ++j)
                            object.zone[j] = $root.matrix_io.vision.v1.ZoneConfig.toObject(message.zone[j], options);
                    }
                    if (message.regionOfInterest && message.regionOfInterest.length) {
                        object.regionOfInterest = [];
                        for (var j = 0; j < message.regionOfInterest.length; ++j)
                            object.regionOfInterest[j] = $root.matrix_io.vision.v1.Rectangle.toObject(message.regionOfInterest[j], options);
                    }
                    return object;
                };

                /**
                 * Converts this AreaAndZoneConfig to JSON.
                 * @function toJSON
                 * @memberof matrix_io.vision.v1.AreaAndZoneConfig
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                AreaAndZoneConfig.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return AreaAndZoneConfig;
            })();

            v1.VehicleConfig = (function() {

                /**
                 * Properties of a VehicleConfig.
                 * @memberof matrix_io.vision.v1
                 * @interface IVehicleConfig
                 * @property {string|null} [cameraUrl] VehicleConfig cameraUrl
                 * @property {matrix_io.vision.v1.IAreaAndZoneConfig|null} [areaAndZone] VehicleConfig areaAndZone
                 */

                /**
                 * Constructs a new VehicleConfig.
                 * @memberof matrix_io.vision.v1
                 * @classdesc Represents a VehicleConfig.
                 * @implements IVehicleConfig
                 * @constructor
                 * @param {matrix_io.vision.v1.IVehicleConfig=} [properties] Properties to set
                 */
                function VehicleConfig(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * VehicleConfig cameraUrl.
                 * @member {string} cameraUrl
                 * @memberof matrix_io.vision.v1.VehicleConfig
                 * @instance
                 */
                VehicleConfig.prototype.cameraUrl = "";

                /**
                 * VehicleConfig areaAndZone.
                 * @member {matrix_io.vision.v1.IAreaAndZoneConfig|null|undefined} areaAndZone
                 * @memberof matrix_io.vision.v1.VehicleConfig
                 * @instance
                 */
                VehicleConfig.prototype.areaAndZone = null;

                /**
                 * Creates a new VehicleConfig instance using the specified properties.
                 * @function create
                 * @memberof matrix_io.vision.v1.VehicleConfig
                 * @static
                 * @param {matrix_io.vision.v1.IVehicleConfig=} [properties] Properties to set
                 * @returns {matrix_io.vision.v1.VehicleConfig} VehicleConfig instance
                 */
                VehicleConfig.create = function create(properties) {
                    return new VehicleConfig(properties);
                };

                /**
                 * Encodes the specified VehicleConfig message. Does not implicitly {@link matrix_io.vision.v1.VehicleConfig.verify|verify} messages.
                 * @function encode
                 * @memberof matrix_io.vision.v1.VehicleConfig
                 * @static
                 * @param {matrix_io.vision.v1.IVehicleConfig} message VehicleConfig message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                VehicleConfig.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.cameraUrl != null && message.hasOwnProperty("cameraUrl"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.cameraUrl);
                    if (message.areaAndZone != null && message.hasOwnProperty("areaAndZone"))
                        $root.matrix_io.vision.v1.AreaAndZoneConfig.encode(message.areaAndZone, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified VehicleConfig message, length delimited. Does not implicitly {@link matrix_io.vision.v1.VehicleConfig.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof matrix_io.vision.v1.VehicleConfig
                 * @static
                 * @param {matrix_io.vision.v1.IVehicleConfig} message VehicleConfig message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                VehicleConfig.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a VehicleConfig message from the specified reader or buffer.
                 * @function decode
                 * @memberof matrix_io.vision.v1.VehicleConfig
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {matrix_io.vision.v1.VehicleConfig} VehicleConfig
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                VehicleConfig.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.vision.v1.VehicleConfig();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.cameraUrl = reader.string();
                            break;
                        case 2:
                            message.areaAndZone = $root.matrix_io.vision.v1.AreaAndZoneConfig.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a VehicleConfig message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof matrix_io.vision.v1.VehicleConfig
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {matrix_io.vision.v1.VehicleConfig} VehicleConfig
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                VehicleConfig.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a VehicleConfig message.
                 * @function verify
                 * @memberof matrix_io.vision.v1.VehicleConfig
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                VehicleConfig.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.cameraUrl != null && message.hasOwnProperty("cameraUrl"))
                        if (!$util.isString(message.cameraUrl))
                            return "cameraUrl: string expected";
                    if (message.areaAndZone != null && message.hasOwnProperty("areaAndZone")) {
                        var error = $root.matrix_io.vision.v1.AreaAndZoneConfig.verify(message.areaAndZone);
                        if (error)
                            return "areaAndZone." + error;
                    }
                    return null;
                };

                /**
                 * Creates a VehicleConfig message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof matrix_io.vision.v1.VehicleConfig
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {matrix_io.vision.v1.VehicleConfig} VehicleConfig
                 */
                VehicleConfig.fromObject = function fromObject(object) {
                    if (object instanceof $root.matrix_io.vision.v1.VehicleConfig)
                        return object;
                    var message = new $root.matrix_io.vision.v1.VehicleConfig();
                    if (object.cameraUrl != null)
                        message.cameraUrl = String(object.cameraUrl);
                    if (object.areaAndZone != null) {
                        if (typeof object.areaAndZone !== "object")
                            throw TypeError(".matrix_io.vision.v1.VehicleConfig.areaAndZone: object expected");
                        message.areaAndZone = $root.matrix_io.vision.v1.AreaAndZoneConfig.fromObject(object.areaAndZone);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a VehicleConfig message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof matrix_io.vision.v1.VehicleConfig
                 * @static
                 * @param {matrix_io.vision.v1.VehicleConfig} message VehicleConfig
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                VehicleConfig.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.cameraUrl = "";
                        object.areaAndZone = null;
                    }
                    if (message.cameraUrl != null && message.hasOwnProperty("cameraUrl"))
                        object.cameraUrl = message.cameraUrl;
                    if (message.areaAndZone != null && message.hasOwnProperty("areaAndZone"))
                        object.areaAndZone = $root.matrix_io.vision.v1.AreaAndZoneConfig.toObject(message.areaAndZone, options);
                    return object;
                };

                /**
                 * Converts this VehicleConfig to JSON.
                 * @function toJSON
                 * @memberof matrix_io.vision.v1.VehicleConfig
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                VehicleConfig.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return VehicleConfig;
            })();

            /**
             * EventTag enum.
             * @name matrix_io.vision.v1.EventTag
             * @enum {string}
             * @property {number} EVENT_NOT_DEFINED=0 EVENT_NOT_DEFINED value
             * @property {number} TRACKING_START=1 TRACKING_START value
             * @property {number} TRACKING_END=2 TRACKING_END value
             * @property {number} AREA_ENTER=3 AREA_ENTER value
             * @property {number} AREA_EXIT=4 AREA_EXIT value
             * @property {number} ZONE_ENTER=5 ZONE_ENTER value
             * @property {number} ZONE_EXIT=6 ZONE_EXIT value
             */
            v1.EventTag = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "EVENT_NOT_DEFINED"] = 0;
                values[valuesById[1] = "TRACKING_START"] = 1;
                values[valuesById[2] = "TRACKING_END"] = 2;
                values[valuesById[3] = "AREA_ENTER"] = 3;
                values[valuesById[4] = "AREA_EXIT"] = 4;
                values[valuesById[5] = "ZONE_ENTER"] = 5;
                values[valuesById[6] = "ZONE_EXIT"] = 6;
                return values;
            })();

            v1.VisionEvent = (function() {

                /**
                 * Properties of a VisionEvent.
                 * @memberof matrix_io.vision.v1
                 * @interface IVisionEvent
                 * @property {matrix_io.vision.v1.EventTag|null} [tag] VisionEvent tag
                 * @property {number|Long|null} [trackingId] VisionEvent trackingId
                 * @property {number|null} [sessionTime] VisionEvent sessionTime
                 * @property {number|null} [dwellTime] VisionEvent dwellTime
                 * @property {number|Long|null} [areaId] VisionEvent areaId
                 * @property {number|Long|null} [zoneId] VisionEvent zoneId
                 * @property {matrix_io.vision.v1.ZoneDirection|null} [zoneDirection] VisionEvent zoneDirection
                 * @property {number|null} [speed] VisionEvent speed
                 * @property {google.protobuf.ITimestamp|null} [timestamp] VisionEvent timestamp
                 */

                /**
                 * Constructs a new VisionEvent.
                 * @memberof matrix_io.vision.v1
                 * @classdesc Represents a VisionEvent.
                 * @implements IVisionEvent
                 * @constructor
                 * @param {matrix_io.vision.v1.IVisionEvent=} [properties] Properties to set
                 */
                function VisionEvent(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * VisionEvent tag.
                 * @member {matrix_io.vision.v1.EventTag} tag
                 * @memberof matrix_io.vision.v1.VisionEvent
                 * @instance
                 */
                VisionEvent.prototype.tag = 0;

                /**
                 * VisionEvent trackingId.
                 * @member {number|Long} trackingId
                 * @memberof matrix_io.vision.v1.VisionEvent
                 * @instance
                 */
                VisionEvent.prototype.trackingId = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * VisionEvent sessionTime.
                 * @member {number} sessionTime
                 * @memberof matrix_io.vision.v1.VisionEvent
                 * @instance
                 */
                VisionEvent.prototype.sessionTime = 0;

                /**
                 * VisionEvent dwellTime.
                 * @member {number} dwellTime
                 * @memberof matrix_io.vision.v1.VisionEvent
                 * @instance
                 */
                VisionEvent.prototype.dwellTime = 0;

                /**
                 * VisionEvent areaId.
                 * @member {number|Long} areaId
                 * @memberof matrix_io.vision.v1.VisionEvent
                 * @instance
                 */
                VisionEvent.prototype.areaId = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * VisionEvent zoneId.
                 * @member {number|Long} zoneId
                 * @memberof matrix_io.vision.v1.VisionEvent
                 * @instance
                 */
                VisionEvent.prototype.zoneId = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * VisionEvent zoneDirection.
                 * @member {matrix_io.vision.v1.ZoneDirection} zoneDirection
                 * @memberof matrix_io.vision.v1.VisionEvent
                 * @instance
                 */
                VisionEvent.prototype.zoneDirection = 0;

                /**
                 * VisionEvent speed.
                 * @member {number} speed
                 * @memberof matrix_io.vision.v1.VisionEvent
                 * @instance
                 */
                VisionEvent.prototype.speed = 0;

                /**
                 * VisionEvent timestamp.
                 * @member {google.protobuf.ITimestamp|null|undefined} timestamp
                 * @memberof matrix_io.vision.v1.VisionEvent
                 * @instance
                 */
                VisionEvent.prototype.timestamp = null;

                /**
                 * Creates a new VisionEvent instance using the specified properties.
                 * @function create
                 * @memberof matrix_io.vision.v1.VisionEvent
                 * @static
                 * @param {matrix_io.vision.v1.IVisionEvent=} [properties] Properties to set
                 * @returns {matrix_io.vision.v1.VisionEvent} VisionEvent instance
                 */
                VisionEvent.create = function create(properties) {
                    return new VisionEvent(properties);
                };

                /**
                 * Encodes the specified VisionEvent message. Does not implicitly {@link matrix_io.vision.v1.VisionEvent.verify|verify} messages.
                 * @function encode
                 * @memberof matrix_io.vision.v1.VisionEvent
                 * @static
                 * @param {matrix_io.vision.v1.IVisionEvent} message VisionEvent message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                VisionEvent.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.tag != null && message.hasOwnProperty("tag"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.tag);
                    if (message.trackingId != null && message.hasOwnProperty("trackingId"))
                        writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.trackingId);
                    if (message.sessionTime != null && message.hasOwnProperty("sessionTime"))
                        writer.uint32(/* id 3, wireType 5 =*/29).float(message.sessionTime);
                    if (message.dwellTime != null && message.hasOwnProperty("dwellTime"))
                        writer.uint32(/* id 4, wireType 5 =*/37).float(message.dwellTime);
                    if (message.areaId != null && message.hasOwnProperty("areaId"))
                        writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.areaId);
                    if (message.zoneId != null && message.hasOwnProperty("zoneId"))
                        writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.zoneId);
                    if (message.zoneDirection != null && message.hasOwnProperty("zoneDirection"))
                        writer.uint32(/* id 7, wireType 0 =*/56).int32(message.zoneDirection);
                    if (message.speed != null && message.hasOwnProperty("speed"))
                        writer.uint32(/* id 8, wireType 5 =*/69).float(message.speed);
                    if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                        $root.google.protobuf.Timestamp.encode(message.timestamp, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified VisionEvent message, length delimited. Does not implicitly {@link matrix_io.vision.v1.VisionEvent.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof matrix_io.vision.v1.VisionEvent
                 * @static
                 * @param {matrix_io.vision.v1.IVisionEvent} message VisionEvent message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                VisionEvent.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a VisionEvent message from the specified reader or buffer.
                 * @function decode
                 * @memberof matrix_io.vision.v1.VisionEvent
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {matrix_io.vision.v1.VisionEvent} VisionEvent
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                VisionEvent.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.vision.v1.VisionEvent();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.tag = reader.int32();
                            break;
                        case 2:
                            message.trackingId = reader.uint64();
                            break;
                        case 3:
                            message.sessionTime = reader.float();
                            break;
                        case 4:
                            message.dwellTime = reader.float();
                            break;
                        case 5:
                            message.areaId = reader.uint64();
                            break;
                        case 6:
                            message.zoneId = reader.uint64();
                            break;
                        case 7:
                            message.zoneDirection = reader.int32();
                            break;
                        case 8:
                            message.speed = reader.float();
                            break;
                        case 9:
                            message.timestamp = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a VisionEvent message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof matrix_io.vision.v1.VisionEvent
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {matrix_io.vision.v1.VisionEvent} VisionEvent
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                VisionEvent.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a VisionEvent message.
                 * @function verify
                 * @memberof matrix_io.vision.v1.VisionEvent
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                VisionEvent.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.tag != null && message.hasOwnProperty("tag"))
                        switch (message.tag) {
                        default:
                            return "tag: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                            break;
                        }
                    if (message.trackingId != null && message.hasOwnProperty("trackingId"))
                        if (!$util.isInteger(message.trackingId) && !(message.trackingId && $util.isInteger(message.trackingId.low) && $util.isInteger(message.trackingId.high)))
                            return "trackingId: integer|Long expected";
                    if (message.sessionTime != null && message.hasOwnProperty("sessionTime"))
                        if (typeof message.sessionTime !== "number")
                            return "sessionTime: number expected";
                    if (message.dwellTime != null && message.hasOwnProperty("dwellTime"))
                        if (typeof message.dwellTime !== "number")
                            return "dwellTime: number expected";
                    if (message.areaId != null && message.hasOwnProperty("areaId"))
                        if (!$util.isInteger(message.areaId) && !(message.areaId && $util.isInteger(message.areaId.low) && $util.isInteger(message.areaId.high)))
                            return "areaId: integer|Long expected";
                    if (message.zoneId != null && message.hasOwnProperty("zoneId"))
                        if (!$util.isInteger(message.zoneId) && !(message.zoneId && $util.isInteger(message.zoneId.low) && $util.isInteger(message.zoneId.high)))
                            return "zoneId: integer|Long expected";
                    if (message.zoneDirection != null && message.hasOwnProperty("zoneDirection"))
                        switch (message.zoneDirection) {
                        default:
                            return "zoneDirection: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.speed != null && message.hasOwnProperty("speed"))
                        if (typeof message.speed !== "number")
                            return "speed: number expected";
                    if (message.timestamp != null && message.hasOwnProperty("timestamp")) {
                        var error = $root.google.protobuf.Timestamp.verify(message.timestamp);
                        if (error)
                            return "timestamp." + error;
                    }
                    return null;
                };

                /**
                 * Creates a VisionEvent message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof matrix_io.vision.v1.VisionEvent
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {matrix_io.vision.v1.VisionEvent} VisionEvent
                 */
                VisionEvent.fromObject = function fromObject(object) {
                    if (object instanceof $root.matrix_io.vision.v1.VisionEvent)
                        return object;
                    var message = new $root.matrix_io.vision.v1.VisionEvent();
                    switch (object.tag) {
                    case "EVENT_NOT_DEFINED":
                    case 0:
                        message.tag = 0;
                        break;
                    case "TRACKING_START":
                    case 1:
                        message.tag = 1;
                        break;
                    case "TRACKING_END":
                    case 2:
                        message.tag = 2;
                        break;
                    case "AREA_ENTER":
                    case 3:
                        message.tag = 3;
                        break;
                    case "AREA_EXIT":
                    case 4:
                        message.tag = 4;
                        break;
                    case "ZONE_ENTER":
                    case 5:
                        message.tag = 5;
                        break;
                    case "ZONE_EXIT":
                    case 6:
                        message.tag = 6;
                        break;
                    }
                    if (object.trackingId != null)
                        if ($util.Long)
                            (message.trackingId = $util.Long.fromValue(object.trackingId)).unsigned = true;
                        else if (typeof object.trackingId === "string")
                            message.trackingId = parseInt(object.trackingId, 10);
                        else if (typeof object.trackingId === "number")
                            message.trackingId = object.trackingId;
                        else if (typeof object.trackingId === "object")
                            message.trackingId = new $util.LongBits(object.trackingId.low >>> 0, object.trackingId.high >>> 0).toNumber(true);
                    if (object.sessionTime != null)
                        message.sessionTime = Number(object.sessionTime);
                    if (object.dwellTime != null)
                        message.dwellTime = Number(object.dwellTime);
                    if (object.areaId != null)
                        if ($util.Long)
                            (message.areaId = $util.Long.fromValue(object.areaId)).unsigned = true;
                        else if (typeof object.areaId === "string")
                            message.areaId = parseInt(object.areaId, 10);
                        else if (typeof object.areaId === "number")
                            message.areaId = object.areaId;
                        else if (typeof object.areaId === "object")
                            message.areaId = new $util.LongBits(object.areaId.low >>> 0, object.areaId.high >>> 0).toNumber(true);
                    if (object.zoneId != null)
                        if ($util.Long)
                            (message.zoneId = $util.Long.fromValue(object.zoneId)).unsigned = true;
                        else if (typeof object.zoneId === "string")
                            message.zoneId = parseInt(object.zoneId, 10);
                        else if (typeof object.zoneId === "number")
                            message.zoneId = object.zoneId;
                        else if (typeof object.zoneId === "object")
                            message.zoneId = new $util.LongBits(object.zoneId.low >>> 0, object.zoneId.high >>> 0).toNumber(true);
                    switch (object.zoneDirection) {
                    case "ZONE_DIRECTION_NOT_DEFINED":
                    case 0:
                        message.zoneDirection = 0;
                        break;
                    case "FORWARD":
                    case 1:
                        message.zoneDirection = 1;
                        break;
                    case "BACKWARD":
                    case 2:
                        message.zoneDirection = 2;
                        break;
                    }
                    if (object.speed != null)
                        message.speed = Number(object.speed);
                    if (object.timestamp != null) {
                        if (typeof object.timestamp !== "object")
                            throw TypeError(".matrix_io.vision.v1.VisionEvent.timestamp: object expected");
                        message.timestamp = $root.google.protobuf.Timestamp.fromObject(object.timestamp);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a VisionEvent message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof matrix_io.vision.v1.VisionEvent
                 * @static
                 * @param {matrix_io.vision.v1.VisionEvent} message VisionEvent
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                VisionEvent.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.tag = options.enums === String ? "EVENT_NOT_DEFINED" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.trackingId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.trackingId = options.longs === String ? "0" : 0;
                        object.sessionTime = 0;
                        object.dwellTime = 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.areaId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.areaId = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.zoneId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.zoneId = options.longs === String ? "0" : 0;
                        object.zoneDirection = options.enums === String ? "ZONE_DIRECTION_NOT_DEFINED" : 0;
                        object.speed = 0;
                        object.timestamp = null;
                    }
                    if (message.tag != null && message.hasOwnProperty("tag"))
                        object.tag = options.enums === String ? $root.matrix_io.vision.v1.EventTag[message.tag] : message.tag;
                    if (message.trackingId != null && message.hasOwnProperty("trackingId"))
                        if (typeof message.trackingId === "number")
                            object.trackingId = options.longs === String ? String(message.trackingId) : message.trackingId;
                        else
                            object.trackingId = options.longs === String ? $util.Long.prototype.toString.call(message.trackingId) : options.longs === Number ? new $util.LongBits(message.trackingId.low >>> 0, message.trackingId.high >>> 0).toNumber(true) : message.trackingId;
                    if (message.sessionTime != null && message.hasOwnProperty("sessionTime"))
                        object.sessionTime = options.json && !isFinite(message.sessionTime) ? String(message.sessionTime) : message.sessionTime;
                    if (message.dwellTime != null && message.hasOwnProperty("dwellTime"))
                        object.dwellTime = options.json && !isFinite(message.dwellTime) ? String(message.dwellTime) : message.dwellTime;
                    if (message.areaId != null && message.hasOwnProperty("areaId"))
                        if (typeof message.areaId === "number")
                            object.areaId = options.longs === String ? String(message.areaId) : message.areaId;
                        else
                            object.areaId = options.longs === String ? $util.Long.prototype.toString.call(message.areaId) : options.longs === Number ? new $util.LongBits(message.areaId.low >>> 0, message.areaId.high >>> 0).toNumber(true) : message.areaId;
                    if (message.zoneId != null && message.hasOwnProperty("zoneId"))
                        if (typeof message.zoneId === "number")
                            object.zoneId = options.longs === String ? String(message.zoneId) : message.zoneId;
                        else
                            object.zoneId = options.longs === String ? $util.Long.prototype.toString.call(message.zoneId) : options.longs === Number ? new $util.LongBits(message.zoneId.low >>> 0, message.zoneId.high >>> 0).toNumber(true) : message.zoneId;
                    if (message.zoneDirection != null && message.hasOwnProperty("zoneDirection"))
                        object.zoneDirection = options.enums === String ? $root.matrix_io.vision.v1.ZoneDirection[message.zoneDirection] : message.zoneDirection;
                    if (message.speed != null && message.hasOwnProperty("speed"))
                        object.speed = options.json && !isFinite(message.speed) ? String(message.speed) : message.speed;
                    if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                        object.timestamp = $root.google.protobuf.Timestamp.toObject(message.timestamp, options);
                    return object;
                };

                /**
                 * Converts this VisionEvent to JSON.
                 * @function toJSON
                 * @memberof matrix_io.vision.v1.VisionEvent
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                VisionEvent.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return VisionEvent;
            })();

            /**
             * EnumDetectionTag enum.
             * @name matrix_io.vision.v1.EnumDetectionTag
             * @enum {string}
             * @property {number} DETECTION_NOT_DEFINED=0 DETECTION_NOT_DEFINED value
             * @property {number} FACE=1 FACE value
             * @property {number} HAND_THUMB=2 HAND_THUMB value
             * @property {number} HAND_PALM=3 HAND_PALM value
             * @property {number} HAND_PINCH=4 HAND_PINCH value
             * @property {number} HAND_FIST=5 HAND_FIST value
             * @property {number} PERSON=6 PERSON value
             */
            v1.EnumDetectionTag = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "DETECTION_NOT_DEFINED"] = 0;
                values[valuesById[1] = "FACE"] = 1;
                values[valuesById[2] = "HAND_THUMB"] = 2;
                values[valuesById[3] = "HAND_PALM"] = 3;
                values[valuesById[4] = "HAND_PINCH"] = 4;
                values[valuesById[5] = "HAND_FIST"] = 5;
                values[valuesById[6] = "PERSON"] = 6;
                return values;
            })();

            /**
             * EnumDetectionAlgorithm enum.
             * @name matrix_io.vision.v1.EnumDetectionAlgorithm
             * @enum {string}
             * @property {number} DETECTION_ALGORITHM_NOT_DEFINED=0 DETECTION_ALGORITHM_NOT_DEFINED value
             * @property {number} DEFAULT=1 DEFAULT value
             * @property {number} FIRST_ALTERNATIVE=2 FIRST_ALTERNATIVE value
             */
            v1.EnumDetectionAlgorithm = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "DETECTION_ALGORITHM_NOT_DEFINED"] = 0;
                values[valuesById[1] = "DEFAULT"] = 1;
                values[valuesById[2] = "FIRST_ALTERNATIVE"] = 2;
                return values;
            })();

            v1.VehicleRecognition = (function() {

                /**
                 * Properties of a VehicleRecognition.
                 * @memberof matrix_io.vision.v1
                 * @interface IVehicleRecognition
                 * @property {string|null} [type] VehicleRecognition type
                 * @property {string|null} [brand] VehicleRecognition brand
                 * @property {string|null} [model] VehicleRecognition model
                 * @property {number|null} [year] VehicleRecognition year
                 */

                /**
                 * Constructs a new VehicleRecognition.
                 * @memberof matrix_io.vision.v1
                 * @classdesc Represents a VehicleRecognition.
                 * @implements IVehicleRecognition
                 * @constructor
                 * @param {matrix_io.vision.v1.IVehicleRecognition=} [properties] Properties to set
                 */
                function VehicleRecognition(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * VehicleRecognition type.
                 * @member {string} type
                 * @memberof matrix_io.vision.v1.VehicleRecognition
                 * @instance
                 */
                VehicleRecognition.prototype.type = "";

                /**
                 * VehicleRecognition brand.
                 * @member {string} brand
                 * @memberof matrix_io.vision.v1.VehicleRecognition
                 * @instance
                 */
                VehicleRecognition.prototype.brand = "";

                /**
                 * VehicleRecognition model.
                 * @member {string} model
                 * @memberof matrix_io.vision.v1.VehicleRecognition
                 * @instance
                 */
                VehicleRecognition.prototype.model = "";

                /**
                 * VehicleRecognition year.
                 * @member {number} year
                 * @memberof matrix_io.vision.v1.VehicleRecognition
                 * @instance
                 */
                VehicleRecognition.prototype.year = 0;

                /**
                 * Creates a new VehicleRecognition instance using the specified properties.
                 * @function create
                 * @memberof matrix_io.vision.v1.VehicleRecognition
                 * @static
                 * @param {matrix_io.vision.v1.IVehicleRecognition=} [properties] Properties to set
                 * @returns {matrix_io.vision.v1.VehicleRecognition} VehicleRecognition instance
                 */
                VehicleRecognition.create = function create(properties) {
                    return new VehicleRecognition(properties);
                };

                /**
                 * Encodes the specified VehicleRecognition message. Does not implicitly {@link matrix_io.vision.v1.VehicleRecognition.verify|verify} messages.
                 * @function encode
                 * @memberof matrix_io.vision.v1.VehicleRecognition
                 * @static
                 * @param {matrix_io.vision.v1.IVehicleRecognition} message VehicleRecognition message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                VehicleRecognition.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.type != null && message.hasOwnProperty("type"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.type);
                    if (message.brand != null && message.hasOwnProperty("brand"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.brand);
                    if (message.model != null && message.hasOwnProperty("model"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.model);
                    if (message.year != null && message.hasOwnProperty("year"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.year);
                    return writer;
                };

                /**
                 * Encodes the specified VehicleRecognition message, length delimited. Does not implicitly {@link matrix_io.vision.v1.VehicleRecognition.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof matrix_io.vision.v1.VehicleRecognition
                 * @static
                 * @param {matrix_io.vision.v1.IVehicleRecognition} message VehicleRecognition message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                VehicleRecognition.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a VehicleRecognition message from the specified reader or buffer.
                 * @function decode
                 * @memberof matrix_io.vision.v1.VehicleRecognition
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {matrix_io.vision.v1.VehicleRecognition} VehicleRecognition
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                VehicleRecognition.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.vision.v1.VehicleRecognition();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.type = reader.string();
                            break;
                        case 2:
                            message.brand = reader.string();
                            break;
                        case 3:
                            message.model = reader.string();
                            break;
                        case 4:
                            message.year = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a VehicleRecognition message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof matrix_io.vision.v1.VehicleRecognition
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {matrix_io.vision.v1.VehicleRecognition} VehicleRecognition
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                VehicleRecognition.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a VehicleRecognition message.
                 * @function verify
                 * @memberof matrix_io.vision.v1.VehicleRecognition
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                VehicleRecognition.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.type != null && message.hasOwnProperty("type"))
                        if (!$util.isString(message.type))
                            return "type: string expected";
                    if (message.brand != null && message.hasOwnProperty("brand"))
                        if (!$util.isString(message.brand))
                            return "brand: string expected";
                    if (message.model != null && message.hasOwnProperty("model"))
                        if (!$util.isString(message.model))
                            return "model: string expected";
                    if (message.year != null && message.hasOwnProperty("year"))
                        if (!$util.isInteger(message.year))
                            return "year: integer expected";
                    return null;
                };

                /**
                 * Creates a VehicleRecognition message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof matrix_io.vision.v1.VehicleRecognition
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {matrix_io.vision.v1.VehicleRecognition} VehicleRecognition
                 */
                VehicleRecognition.fromObject = function fromObject(object) {
                    if (object instanceof $root.matrix_io.vision.v1.VehicleRecognition)
                        return object;
                    var message = new $root.matrix_io.vision.v1.VehicleRecognition();
                    if (object.type != null)
                        message.type = String(object.type);
                    if (object.brand != null)
                        message.brand = String(object.brand);
                    if (object.model != null)
                        message.model = String(object.model);
                    if (object.year != null)
                        message.year = object.year | 0;
                    return message;
                };

                /**
                 * Creates a plain object from a VehicleRecognition message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof matrix_io.vision.v1.VehicleRecognition
                 * @static
                 * @param {matrix_io.vision.v1.VehicleRecognition} message VehicleRecognition
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                VehicleRecognition.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.type = "";
                        object.brand = "";
                        object.model = "";
                        object.year = 0;
                    }
                    if (message.type != null && message.hasOwnProperty("type"))
                        object.type = message.type;
                    if (message.brand != null && message.hasOwnProperty("brand"))
                        object.brand = message.brand;
                    if (message.model != null && message.hasOwnProperty("model"))
                        object.model = message.model;
                    if (message.year != null && message.hasOwnProperty("year"))
                        object.year = message.year;
                    return object;
                };

                /**
                 * Converts this VehicleRecognition to JSON.
                 * @function toJSON
                 * @memberof matrix_io.vision.v1.VehicleRecognition
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                VehicleRecognition.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return VehicleRecognition;
            })();

            v1.RectangularDetection = (function() {

                /**
                 * Properties of a RectangularDetection.
                 * @memberof matrix_io.vision.v1
                 * @interface IRectangularDetection
                 * @property {matrix_io.vision.v1.EnumDetectionAlgorithm|null} [algorithm] RectangularDetection algorithm
                 * @property {matrix_io.vision.v1.IRectangle|null} [location] RectangularDetection location
                 * @property {matrix_io.vision.v1.EnumDetectionTag|null} [tag] RectangularDetection tag
                 * @property {number|null} [confidence] RectangularDetection confidence
                 * @property {Array.<matrix_io.vision.v1.IFacialRecognition>|null} [facialRecognition] RectangularDetection facialRecognition
                 * @property {Array.<matrix_io.vision.v1.IVehicleRecognition>|null} [vehicleRecognition] RectangularDetection vehicleRecognition
                 * @property {number|null} [speed] RectangularDetection speed
                 * @property {Uint8Array|null} [image] RectangularDetection image
                 * @property {Uint8Array|null} [imageSmall] RectangularDetection imageSmall
                 * @property {string|null} [type] RectangularDetection type
                 * @property {number|Long|null} [trackingId] RectangularDetection trackingId
                 * @property {string|null} [uuid] RectangularDetection uuid
                 */

                /**
                 * Constructs a new RectangularDetection.
                 * @memberof matrix_io.vision.v1
                 * @classdesc Represents a RectangularDetection.
                 * @implements IRectangularDetection
                 * @constructor
                 * @param {matrix_io.vision.v1.IRectangularDetection=} [properties] Properties to set
                 */
                function RectangularDetection(properties) {
                    this.facialRecognition = [];
                    this.vehicleRecognition = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RectangularDetection algorithm.
                 * @member {matrix_io.vision.v1.EnumDetectionAlgorithm} algorithm
                 * @memberof matrix_io.vision.v1.RectangularDetection
                 * @instance
                 */
                RectangularDetection.prototype.algorithm = 0;

                /**
                 * RectangularDetection location.
                 * @member {matrix_io.vision.v1.IRectangle|null|undefined} location
                 * @memberof matrix_io.vision.v1.RectangularDetection
                 * @instance
                 */
                RectangularDetection.prototype.location = null;

                /**
                 * RectangularDetection tag.
                 * @member {matrix_io.vision.v1.EnumDetectionTag} tag
                 * @memberof matrix_io.vision.v1.RectangularDetection
                 * @instance
                 */
                RectangularDetection.prototype.tag = 0;

                /**
                 * RectangularDetection confidence.
                 * @member {number} confidence
                 * @memberof matrix_io.vision.v1.RectangularDetection
                 * @instance
                 */
                RectangularDetection.prototype.confidence = 0;

                /**
                 * RectangularDetection facialRecognition.
                 * @member {Array.<matrix_io.vision.v1.IFacialRecognition>} facialRecognition
                 * @memberof matrix_io.vision.v1.RectangularDetection
                 * @instance
                 */
                RectangularDetection.prototype.facialRecognition = $util.emptyArray;

                /**
                 * RectangularDetection vehicleRecognition.
                 * @member {Array.<matrix_io.vision.v1.IVehicleRecognition>} vehicleRecognition
                 * @memberof matrix_io.vision.v1.RectangularDetection
                 * @instance
                 */
                RectangularDetection.prototype.vehicleRecognition = $util.emptyArray;

                /**
                 * RectangularDetection speed.
                 * @member {number} speed
                 * @memberof matrix_io.vision.v1.RectangularDetection
                 * @instance
                 */
                RectangularDetection.prototype.speed = 0;

                /**
                 * RectangularDetection image.
                 * @member {Uint8Array} image
                 * @memberof matrix_io.vision.v1.RectangularDetection
                 * @instance
                 */
                RectangularDetection.prototype.image = $util.newBuffer([]);

                /**
                 * RectangularDetection imageSmall.
                 * @member {Uint8Array} imageSmall
                 * @memberof matrix_io.vision.v1.RectangularDetection
                 * @instance
                 */
                RectangularDetection.prototype.imageSmall = $util.newBuffer([]);

                /**
                 * RectangularDetection type.
                 * @member {string} type
                 * @memberof matrix_io.vision.v1.RectangularDetection
                 * @instance
                 */
                RectangularDetection.prototype.type = "";

                /**
                 * RectangularDetection trackingId.
                 * @member {number|Long} trackingId
                 * @memberof matrix_io.vision.v1.RectangularDetection
                 * @instance
                 */
                RectangularDetection.prototype.trackingId = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * RectangularDetection uuid.
                 * @member {string} uuid
                 * @memberof matrix_io.vision.v1.RectangularDetection
                 * @instance
                 */
                RectangularDetection.prototype.uuid = "";

                /**
                 * Creates a new RectangularDetection instance using the specified properties.
                 * @function create
                 * @memberof matrix_io.vision.v1.RectangularDetection
                 * @static
                 * @param {matrix_io.vision.v1.IRectangularDetection=} [properties] Properties to set
                 * @returns {matrix_io.vision.v1.RectangularDetection} RectangularDetection instance
                 */
                RectangularDetection.create = function create(properties) {
                    return new RectangularDetection(properties);
                };

                /**
                 * Encodes the specified RectangularDetection message. Does not implicitly {@link matrix_io.vision.v1.RectangularDetection.verify|verify} messages.
                 * @function encode
                 * @memberof matrix_io.vision.v1.RectangularDetection
                 * @static
                 * @param {matrix_io.vision.v1.IRectangularDetection} message RectangularDetection message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RectangularDetection.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.algorithm != null && message.hasOwnProperty("algorithm"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.algorithm);
                    if (message.location != null && message.hasOwnProperty("location"))
                        $root.matrix_io.vision.v1.Rectangle.encode(message.location, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.tag != null && message.hasOwnProperty("tag"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.tag);
                    if (message.confidence != null && message.hasOwnProperty("confidence"))
                        writer.uint32(/* id 4, wireType 5 =*/37).float(message.confidence);
                    if (message.facialRecognition != null && message.facialRecognition.length)
                        for (var i = 0; i < message.facialRecognition.length; ++i)
                            $root.matrix_io.vision.v1.FacialRecognition.encode(message.facialRecognition[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.image != null && message.hasOwnProperty("image"))
                        writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.image);
                    if (message.imageSmall != null && message.hasOwnProperty("imageSmall"))
                        writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.imageSmall);
                    if (message.trackingId != null && message.hasOwnProperty("trackingId"))
                        writer.uint32(/* id 8, wireType 0 =*/64).uint64(message.trackingId);
                    if (message.vehicleRecognition != null && message.vehicleRecognition.length)
                        for (var i = 0; i < message.vehicleRecognition.length; ++i)
                            $root.matrix_io.vision.v1.VehicleRecognition.encode(message.vehicleRecognition[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                    if (message.speed != null && message.hasOwnProperty("speed"))
                        writer.uint32(/* id 10, wireType 5 =*/85).float(message.speed);
                    if (message.uuid != null && message.hasOwnProperty("uuid"))
                        writer.uint32(/* id 11, wireType 2 =*/90).string(message.uuid);
                    if (message.type != null && message.hasOwnProperty("type"))
                        writer.uint32(/* id 12, wireType 2 =*/98).string(message.type);
                    return writer;
                };

                /**
                 * Encodes the specified RectangularDetection message, length delimited. Does not implicitly {@link matrix_io.vision.v1.RectangularDetection.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof matrix_io.vision.v1.RectangularDetection
                 * @static
                 * @param {matrix_io.vision.v1.IRectangularDetection} message RectangularDetection message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RectangularDetection.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RectangularDetection message from the specified reader or buffer.
                 * @function decode
                 * @memberof matrix_io.vision.v1.RectangularDetection
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {matrix_io.vision.v1.RectangularDetection} RectangularDetection
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RectangularDetection.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.vision.v1.RectangularDetection();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.algorithm = reader.int32();
                            break;
                        case 2:
                            message.location = $root.matrix_io.vision.v1.Rectangle.decode(reader, reader.uint32());
                            break;
                        case 3:
                            message.tag = reader.int32();
                            break;
                        case 4:
                            message.confidence = reader.float();
                            break;
                        case 5:
                            if (!(message.facialRecognition && message.facialRecognition.length))
                                message.facialRecognition = [];
                            message.facialRecognition.push($root.matrix_io.vision.v1.FacialRecognition.decode(reader, reader.uint32()));
                            break;
                        case 9:
                            if (!(message.vehicleRecognition && message.vehicleRecognition.length))
                                message.vehicleRecognition = [];
                            message.vehicleRecognition.push($root.matrix_io.vision.v1.VehicleRecognition.decode(reader, reader.uint32()));
                            break;
                        case 10:
                            message.speed = reader.float();
                            break;
                        case 6:
                            message.image = reader.bytes();
                            break;
                        case 7:
                            message.imageSmall = reader.bytes();
                            break;
                        case 12:
                            message.type = reader.string();
                            break;
                        case 8:
                            message.trackingId = reader.uint64();
                            break;
                        case 11:
                            message.uuid = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RectangularDetection message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof matrix_io.vision.v1.RectangularDetection
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {matrix_io.vision.v1.RectangularDetection} RectangularDetection
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RectangularDetection.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RectangularDetection message.
                 * @function verify
                 * @memberof matrix_io.vision.v1.RectangularDetection
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RectangularDetection.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.algorithm != null && message.hasOwnProperty("algorithm"))
                        switch (message.algorithm) {
                        default:
                            return "algorithm: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.location != null && message.hasOwnProperty("location")) {
                        var error = $root.matrix_io.vision.v1.Rectangle.verify(message.location);
                        if (error)
                            return "location." + error;
                    }
                    if (message.tag != null && message.hasOwnProperty("tag"))
                        switch (message.tag) {
                        default:
                            return "tag: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                            break;
                        }
                    if (message.confidence != null && message.hasOwnProperty("confidence"))
                        if (typeof message.confidence !== "number")
                            return "confidence: number expected";
                    if (message.facialRecognition != null && message.hasOwnProperty("facialRecognition")) {
                        if (!Array.isArray(message.facialRecognition))
                            return "facialRecognition: array expected";
                        for (var i = 0; i < message.facialRecognition.length; ++i) {
                            var error = $root.matrix_io.vision.v1.FacialRecognition.verify(message.facialRecognition[i]);
                            if (error)
                                return "facialRecognition." + error;
                        }
                    }
                    if (message.vehicleRecognition != null && message.hasOwnProperty("vehicleRecognition")) {
                        if (!Array.isArray(message.vehicleRecognition))
                            return "vehicleRecognition: array expected";
                        for (var i = 0; i < message.vehicleRecognition.length; ++i) {
                            var error = $root.matrix_io.vision.v1.VehicleRecognition.verify(message.vehicleRecognition[i]);
                            if (error)
                                return "vehicleRecognition." + error;
                        }
                    }
                    if (message.speed != null && message.hasOwnProperty("speed"))
                        if (typeof message.speed !== "number")
                            return "speed: number expected";
                    if (message.image != null && message.hasOwnProperty("image"))
                        if (!(message.image && typeof message.image.length === "number" || $util.isString(message.image)))
                            return "image: buffer expected";
                    if (message.imageSmall != null && message.hasOwnProperty("imageSmall"))
                        if (!(message.imageSmall && typeof message.imageSmall.length === "number" || $util.isString(message.imageSmall)))
                            return "imageSmall: buffer expected";
                    if (message.type != null && message.hasOwnProperty("type"))
                        if (!$util.isString(message.type))
                            return "type: string expected";
                    if (message.trackingId != null && message.hasOwnProperty("trackingId"))
                        if (!$util.isInteger(message.trackingId) && !(message.trackingId && $util.isInteger(message.trackingId.low) && $util.isInteger(message.trackingId.high)))
                            return "trackingId: integer|Long expected";
                    if (message.uuid != null && message.hasOwnProperty("uuid"))
                        if (!$util.isString(message.uuid))
                            return "uuid: string expected";
                    return null;
                };

                /**
                 * Creates a RectangularDetection message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof matrix_io.vision.v1.RectangularDetection
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {matrix_io.vision.v1.RectangularDetection} RectangularDetection
                 */
                RectangularDetection.fromObject = function fromObject(object) {
                    if (object instanceof $root.matrix_io.vision.v1.RectangularDetection)
                        return object;
                    var message = new $root.matrix_io.vision.v1.RectangularDetection();
                    switch (object.algorithm) {
                    case "DETECTION_ALGORITHM_NOT_DEFINED":
                    case 0:
                        message.algorithm = 0;
                        break;
                    case "DEFAULT":
                    case 1:
                        message.algorithm = 1;
                        break;
                    case "FIRST_ALTERNATIVE":
                    case 2:
                        message.algorithm = 2;
                        break;
                    }
                    if (object.location != null) {
                        if (typeof object.location !== "object")
                            throw TypeError(".matrix_io.vision.v1.RectangularDetection.location: object expected");
                        message.location = $root.matrix_io.vision.v1.Rectangle.fromObject(object.location);
                    }
                    switch (object.tag) {
                    case "DETECTION_NOT_DEFINED":
                    case 0:
                        message.tag = 0;
                        break;
                    case "FACE":
                    case 1:
                        message.tag = 1;
                        break;
                    case "HAND_THUMB":
                    case 2:
                        message.tag = 2;
                        break;
                    case "HAND_PALM":
                    case 3:
                        message.tag = 3;
                        break;
                    case "HAND_PINCH":
                    case 4:
                        message.tag = 4;
                        break;
                    case "HAND_FIST":
                    case 5:
                        message.tag = 5;
                        break;
                    case "PERSON":
                    case 6:
                        message.tag = 6;
                        break;
                    }
                    if (object.confidence != null)
                        message.confidence = Number(object.confidence);
                    if (object.facialRecognition) {
                        if (!Array.isArray(object.facialRecognition))
                            throw TypeError(".matrix_io.vision.v1.RectangularDetection.facialRecognition: array expected");
                        message.facialRecognition = [];
                        for (var i = 0; i < object.facialRecognition.length; ++i) {
                            if (typeof object.facialRecognition[i] !== "object")
                                throw TypeError(".matrix_io.vision.v1.RectangularDetection.facialRecognition: object expected");
                            message.facialRecognition[i] = $root.matrix_io.vision.v1.FacialRecognition.fromObject(object.facialRecognition[i]);
                        }
                    }
                    if (object.vehicleRecognition) {
                        if (!Array.isArray(object.vehicleRecognition))
                            throw TypeError(".matrix_io.vision.v1.RectangularDetection.vehicleRecognition: array expected");
                        message.vehicleRecognition = [];
                        for (var i = 0; i < object.vehicleRecognition.length; ++i) {
                            if (typeof object.vehicleRecognition[i] !== "object")
                                throw TypeError(".matrix_io.vision.v1.RectangularDetection.vehicleRecognition: object expected");
                            message.vehicleRecognition[i] = $root.matrix_io.vision.v1.VehicleRecognition.fromObject(object.vehicleRecognition[i]);
                        }
                    }
                    if (object.speed != null)
                        message.speed = Number(object.speed);
                    if (object.image != null)
                        if (typeof object.image === "string")
                            $util.base64.decode(object.image, message.image = $util.newBuffer($util.base64.length(object.image)), 0);
                        else if (object.image.length)
                            message.image = object.image;
                    if (object.imageSmall != null)
                        if (typeof object.imageSmall === "string")
                            $util.base64.decode(object.imageSmall, message.imageSmall = $util.newBuffer($util.base64.length(object.imageSmall)), 0);
                        else if (object.imageSmall.length)
                            message.imageSmall = object.imageSmall;
                    if (object.type != null)
                        message.type = String(object.type);
                    if (object.trackingId != null)
                        if ($util.Long)
                            (message.trackingId = $util.Long.fromValue(object.trackingId)).unsigned = true;
                        else if (typeof object.trackingId === "string")
                            message.trackingId = parseInt(object.trackingId, 10);
                        else if (typeof object.trackingId === "number")
                            message.trackingId = object.trackingId;
                        else if (typeof object.trackingId === "object")
                            message.trackingId = new $util.LongBits(object.trackingId.low >>> 0, object.trackingId.high >>> 0).toNumber(true);
                    if (object.uuid != null)
                        message.uuid = String(object.uuid);
                    return message;
                };

                /**
                 * Creates a plain object from a RectangularDetection message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof matrix_io.vision.v1.RectangularDetection
                 * @static
                 * @param {matrix_io.vision.v1.RectangularDetection} message RectangularDetection
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RectangularDetection.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.facialRecognition = [];
                        object.vehicleRecognition = [];
                    }
                    if (options.defaults) {
                        object.algorithm = options.enums === String ? "DETECTION_ALGORITHM_NOT_DEFINED" : 0;
                        object.location = null;
                        object.tag = options.enums === String ? "DETECTION_NOT_DEFINED" : 0;
                        object.confidence = 0;
                        object.image = options.bytes === String ? "" : [];
                        object.imageSmall = options.bytes === String ? "" : [];
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.trackingId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.trackingId = options.longs === String ? "0" : 0;
                        object.speed = 0;
                        object.uuid = "";
                        object.type = "";
                    }
                    if (message.algorithm != null && message.hasOwnProperty("algorithm"))
                        object.algorithm = options.enums === String ? $root.matrix_io.vision.v1.EnumDetectionAlgorithm[message.algorithm] : message.algorithm;
                    if (message.location != null && message.hasOwnProperty("location"))
                        object.location = $root.matrix_io.vision.v1.Rectangle.toObject(message.location, options);
                    if (message.tag != null && message.hasOwnProperty("tag"))
                        object.tag = options.enums === String ? $root.matrix_io.vision.v1.EnumDetectionTag[message.tag] : message.tag;
                    if (message.confidence != null && message.hasOwnProperty("confidence"))
                        object.confidence = options.json && !isFinite(message.confidence) ? String(message.confidence) : message.confidence;
                    if (message.facialRecognition && message.facialRecognition.length) {
                        object.facialRecognition = [];
                        for (var j = 0; j < message.facialRecognition.length; ++j)
                            object.facialRecognition[j] = $root.matrix_io.vision.v1.FacialRecognition.toObject(message.facialRecognition[j], options);
                    }
                    if (message.image != null && message.hasOwnProperty("image"))
                        object.image = options.bytes === String ? $util.base64.encode(message.image, 0, message.image.length) : options.bytes === Array ? Array.prototype.slice.call(message.image) : message.image;
                    if (message.imageSmall != null && message.hasOwnProperty("imageSmall"))
                        object.imageSmall = options.bytes === String ? $util.base64.encode(message.imageSmall, 0, message.imageSmall.length) : options.bytes === Array ? Array.prototype.slice.call(message.imageSmall) : message.imageSmall;
                    if (message.trackingId != null && message.hasOwnProperty("trackingId"))
                        if (typeof message.trackingId === "number")
                            object.trackingId = options.longs === String ? String(message.trackingId) : message.trackingId;
                        else
                            object.trackingId = options.longs === String ? $util.Long.prototype.toString.call(message.trackingId) : options.longs === Number ? new $util.LongBits(message.trackingId.low >>> 0, message.trackingId.high >>> 0).toNumber(true) : message.trackingId;
                    if (message.vehicleRecognition && message.vehicleRecognition.length) {
                        object.vehicleRecognition = [];
                        for (var j = 0; j < message.vehicleRecognition.length; ++j)
                            object.vehicleRecognition[j] = $root.matrix_io.vision.v1.VehicleRecognition.toObject(message.vehicleRecognition[j], options);
                    }
                    if (message.speed != null && message.hasOwnProperty("speed"))
                        object.speed = options.json && !isFinite(message.speed) ? String(message.speed) : message.speed;
                    if (message.uuid != null && message.hasOwnProperty("uuid"))
                        object.uuid = message.uuid;
                    if (message.type != null && message.hasOwnProperty("type"))
                        object.type = message.type;
                    return object;
                };

                /**
                 * Converts this RectangularDetection to JSON.
                 * @function toJSON
                 * @memberof matrix_io.vision.v1.RectangularDetection
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RectangularDetection.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RectangularDetection;
            })();

            v1.ImageList = (function() {

                /**
                 * Properties of an ImageList.
                 * @memberof matrix_io.vision.v1
                 * @interface IImageList
                 * @property {Array.<Uint8Array>|null} [imageData] ImageList imageData
                 * @property {number|null} [framesPerSecond] ImageList framesPerSecond
                 */

                /**
                 * Constructs a new ImageList.
                 * @memberof matrix_io.vision.v1
                 * @classdesc Represents an ImageList.
                 * @implements IImageList
                 * @constructor
                 * @param {matrix_io.vision.v1.IImageList=} [properties] Properties to set
                 */
                function ImageList(properties) {
                    this.imageData = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ImageList imageData.
                 * @member {Array.<Uint8Array>} imageData
                 * @memberof matrix_io.vision.v1.ImageList
                 * @instance
                 */
                ImageList.prototype.imageData = $util.emptyArray;

                /**
                 * ImageList framesPerSecond.
                 * @member {number} framesPerSecond
                 * @memberof matrix_io.vision.v1.ImageList
                 * @instance
                 */
                ImageList.prototype.framesPerSecond = 0;

                /**
                 * Creates a new ImageList instance using the specified properties.
                 * @function create
                 * @memberof matrix_io.vision.v1.ImageList
                 * @static
                 * @param {matrix_io.vision.v1.IImageList=} [properties] Properties to set
                 * @returns {matrix_io.vision.v1.ImageList} ImageList instance
                 */
                ImageList.create = function create(properties) {
                    return new ImageList(properties);
                };

                /**
                 * Encodes the specified ImageList message. Does not implicitly {@link matrix_io.vision.v1.ImageList.verify|verify} messages.
                 * @function encode
                 * @memberof matrix_io.vision.v1.ImageList
                 * @static
                 * @param {matrix_io.vision.v1.IImageList} message ImageList message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ImageList.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.imageData != null && message.imageData.length)
                        for (var i = 0; i < message.imageData.length; ++i)
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.imageData[i]);
                    if (message.framesPerSecond != null && message.hasOwnProperty("framesPerSecond"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.framesPerSecond);
                    return writer;
                };

                /**
                 * Encodes the specified ImageList message, length delimited. Does not implicitly {@link matrix_io.vision.v1.ImageList.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof matrix_io.vision.v1.ImageList
                 * @static
                 * @param {matrix_io.vision.v1.IImageList} message ImageList message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ImageList.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an ImageList message from the specified reader or buffer.
                 * @function decode
                 * @memberof matrix_io.vision.v1.ImageList
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {matrix_io.vision.v1.ImageList} ImageList
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ImageList.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.vision.v1.ImageList();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.imageData && message.imageData.length))
                                message.imageData = [];
                            message.imageData.push(reader.bytes());
                            break;
                        case 2:
                            message.framesPerSecond = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an ImageList message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof matrix_io.vision.v1.ImageList
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {matrix_io.vision.v1.ImageList} ImageList
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ImageList.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an ImageList message.
                 * @function verify
                 * @memberof matrix_io.vision.v1.ImageList
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ImageList.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.imageData != null && message.hasOwnProperty("imageData")) {
                        if (!Array.isArray(message.imageData))
                            return "imageData: array expected";
                        for (var i = 0; i < message.imageData.length; ++i)
                            if (!(message.imageData[i] && typeof message.imageData[i].length === "number" || $util.isString(message.imageData[i])))
                                return "imageData: buffer[] expected";
                    }
                    if (message.framesPerSecond != null && message.hasOwnProperty("framesPerSecond"))
                        if (!$util.isInteger(message.framesPerSecond))
                            return "framesPerSecond: integer expected";
                    return null;
                };

                /**
                 * Creates an ImageList message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof matrix_io.vision.v1.ImageList
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {matrix_io.vision.v1.ImageList} ImageList
                 */
                ImageList.fromObject = function fromObject(object) {
                    if (object instanceof $root.matrix_io.vision.v1.ImageList)
                        return object;
                    var message = new $root.matrix_io.vision.v1.ImageList();
                    if (object.imageData) {
                        if (!Array.isArray(object.imageData))
                            throw TypeError(".matrix_io.vision.v1.ImageList.imageData: array expected");
                        message.imageData = [];
                        for (var i = 0; i < object.imageData.length; ++i)
                            if (typeof object.imageData[i] === "string")
                                $util.base64.decode(object.imageData[i], message.imageData[i] = $util.newBuffer($util.base64.length(object.imageData[i])), 0);
                            else if (object.imageData[i].length)
                                message.imageData[i] = object.imageData[i];
                    }
                    if (object.framesPerSecond != null)
                        message.framesPerSecond = object.framesPerSecond | 0;
                    return message;
                };

                /**
                 * Creates a plain object from an ImageList message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof matrix_io.vision.v1.ImageList
                 * @static
                 * @param {matrix_io.vision.v1.ImageList} message ImageList
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ImageList.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.imageData = [];
                    if (options.defaults)
                        object.framesPerSecond = 0;
                    if (message.imageData && message.imageData.length) {
                        object.imageData = [];
                        for (var j = 0; j < message.imageData.length; ++j)
                            object.imageData[j] = options.bytes === String ? $util.base64.encode(message.imageData[j], 0, message.imageData[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.imageData[j]) : message.imageData[j];
                    }
                    if (message.framesPerSecond != null && message.hasOwnProperty("framesPerSecond"))
                        object.framesPerSecond = message.framesPerSecond;
                    return object;
                };

                /**
                 * Converts this ImageList to JSON.
                 * @function toJSON
                 * @memberof matrix_io.vision.v1.ImageList
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ImageList.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ImageList;
            })();

            /**
             * EnumVideoCodec enum.
             * @name matrix_io.vision.v1.EnumVideoCodec
             * @enum {string}
             * @property {number} VIDEO_CODEC_NOT_DEFINED=0 VIDEO_CODEC_NOT_DEFINED value
             * @property {number} UNDEFINED_VIDEO_CODEC=1 UNDEFINED_VIDEO_CODEC value
             * @property {number} H264=2 H264 value
             * @property {number} MP4V=3 MP4V value
             * @property {number} RV24=4 RV24 value
             * @property {number} VP8=5 VP8 value
             * @property {number} VP9=6 VP9 value
             */
            v1.EnumVideoCodec = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "VIDEO_CODEC_NOT_DEFINED"] = 0;
                values[valuesById[1] = "UNDEFINED_VIDEO_CODEC"] = 1;
                values[valuesById[2] = "H264"] = 2;
                values[valuesById[3] = "MP4V"] = 3;
                values[valuesById[4] = "RV24"] = 4;
                values[valuesById[5] = "VP8"] = 5;
                values[valuesById[6] = "VP9"] = 6;
                return values;
            })();

            v1.Video = (function() {

                /**
                 * Properties of a Video.
                 * @memberof matrix_io.vision.v1
                 * @interface IVideo
                 * @property {Uint8Array|null} [videoData] Video videoData
                 * @property {matrix_io.vision.v1.EnumVideoCodec|null} [codec] Video codec
                 * @property {Array.<string>|null} [tag] Video tag
                 */

                /**
                 * Constructs a new Video.
                 * @memberof matrix_io.vision.v1
                 * @classdesc Represents a Video.
                 * @implements IVideo
                 * @constructor
                 * @param {matrix_io.vision.v1.IVideo=} [properties] Properties to set
                 */
                function Video(properties) {
                    this.tag = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Video videoData.
                 * @member {Uint8Array} videoData
                 * @memberof matrix_io.vision.v1.Video
                 * @instance
                 */
                Video.prototype.videoData = $util.newBuffer([]);

                /**
                 * Video codec.
                 * @member {matrix_io.vision.v1.EnumVideoCodec} codec
                 * @memberof matrix_io.vision.v1.Video
                 * @instance
                 */
                Video.prototype.codec = 0;

                /**
                 * Video tag.
                 * @member {Array.<string>} tag
                 * @memberof matrix_io.vision.v1.Video
                 * @instance
                 */
                Video.prototype.tag = $util.emptyArray;

                /**
                 * Creates a new Video instance using the specified properties.
                 * @function create
                 * @memberof matrix_io.vision.v1.Video
                 * @static
                 * @param {matrix_io.vision.v1.IVideo=} [properties] Properties to set
                 * @returns {matrix_io.vision.v1.Video} Video instance
                 */
                Video.create = function create(properties) {
                    return new Video(properties);
                };

                /**
                 * Encodes the specified Video message. Does not implicitly {@link matrix_io.vision.v1.Video.verify|verify} messages.
                 * @function encode
                 * @memberof matrix_io.vision.v1.Video
                 * @static
                 * @param {matrix_io.vision.v1.IVideo} message Video message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Video.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.videoData != null && message.hasOwnProperty("videoData"))
                        writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.videoData);
                    if (message.codec != null && message.hasOwnProperty("codec"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.codec);
                    if (message.tag != null && message.tag.length)
                        for (var i = 0; i < message.tag.length; ++i)
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.tag[i]);
                    return writer;
                };

                /**
                 * Encodes the specified Video message, length delimited. Does not implicitly {@link matrix_io.vision.v1.Video.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof matrix_io.vision.v1.Video
                 * @static
                 * @param {matrix_io.vision.v1.IVideo} message Video message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Video.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a Video message from the specified reader or buffer.
                 * @function decode
                 * @memberof matrix_io.vision.v1.Video
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {matrix_io.vision.v1.Video} Video
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Video.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.vision.v1.Video();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.videoData = reader.bytes();
                            break;
                        case 2:
                            message.codec = reader.int32();
                            break;
                        case 3:
                            if (!(message.tag && message.tag.length))
                                message.tag = [];
                            message.tag.push(reader.string());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a Video message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof matrix_io.vision.v1.Video
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {matrix_io.vision.v1.Video} Video
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Video.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a Video message.
                 * @function verify
                 * @memberof matrix_io.vision.v1.Video
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Video.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.videoData != null && message.hasOwnProperty("videoData"))
                        if (!(message.videoData && typeof message.videoData.length === "number" || $util.isString(message.videoData)))
                            return "videoData: buffer expected";
                    if (message.codec != null && message.hasOwnProperty("codec"))
                        switch (message.codec) {
                        default:
                            return "codec: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                            break;
                        }
                    if (message.tag != null && message.hasOwnProperty("tag")) {
                        if (!Array.isArray(message.tag))
                            return "tag: array expected";
                        for (var i = 0; i < message.tag.length; ++i)
                            if (!$util.isString(message.tag[i]))
                                return "tag: string[] expected";
                    }
                    return null;
                };

                /**
                 * Creates a Video message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof matrix_io.vision.v1.Video
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {matrix_io.vision.v1.Video} Video
                 */
                Video.fromObject = function fromObject(object) {
                    if (object instanceof $root.matrix_io.vision.v1.Video)
                        return object;
                    var message = new $root.matrix_io.vision.v1.Video();
                    if (object.videoData != null)
                        if (typeof object.videoData === "string")
                            $util.base64.decode(object.videoData, message.videoData = $util.newBuffer($util.base64.length(object.videoData)), 0);
                        else if (object.videoData.length)
                            message.videoData = object.videoData;
                    switch (object.codec) {
                    case "VIDEO_CODEC_NOT_DEFINED":
                    case 0:
                        message.codec = 0;
                        break;
                    case "UNDEFINED_VIDEO_CODEC":
                    case 1:
                        message.codec = 1;
                        break;
                    case "H264":
                    case 2:
                        message.codec = 2;
                        break;
                    case "MP4V":
                    case 3:
                        message.codec = 3;
                        break;
                    case "RV24":
                    case 4:
                        message.codec = 4;
                        break;
                    case "VP8":
                    case 5:
                        message.codec = 5;
                        break;
                    case "VP9":
                    case 6:
                        message.codec = 6;
                        break;
                    }
                    if (object.tag) {
                        if (!Array.isArray(object.tag))
                            throw TypeError(".matrix_io.vision.v1.Video.tag: array expected");
                        message.tag = [];
                        for (var i = 0; i < object.tag.length; ++i)
                            message.tag[i] = String(object.tag[i]);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a Video message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof matrix_io.vision.v1.Video
                 * @static
                 * @param {matrix_io.vision.v1.Video} message Video
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Video.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.tag = [];
                    if (options.defaults) {
                        object.videoData = options.bytes === String ? "" : [];
                        object.codec = options.enums === String ? "VIDEO_CODEC_NOT_DEFINED" : 0;
                    }
                    if (message.videoData != null && message.hasOwnProperty("videoData"))
                        object.videoData = options.bytes === String ? $util.base64.encode(message.videoData, 0, message.videoData.length) : options.bytes === Array ? Array.prototype.slice.call(message.videoData) : message.videoData;
                    if (message.codec != null && message.hasOwnProperty("codec"))
                        object.codec = options.enums === String ? $root.matrix_io.vision.v1.EnumVideoCodec[message.codec] : message.codec;
                    if (message.tag && message.tag.length) {
                        object.tag = [];
                        for (var j = 0; j < message.tag.length; ++j)
                            object.tag[j] = message.tag[j];
                    }
                    return object;
                };

                /**
                 * Converts this Video to JSON.
                 * @function toJSON
                 * @memberof matrix_io.vision.v1.Video
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Video.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return Video;
            })();

            /**
             * ImageFormat enum.
             * @name matrix_io.vision.v1.ImageFormat
             * @enum {string}
             * @property {number} IMAGE_FORMAT_NOT_DEFINED=0 IMAGE_FORMAT_NOT_DEFINED value
             * @property {number} UNSPECIFIED=1 UNSPECIFIED value
             * @property {number} FORMAT_8URGB=2 FORMAT_8URGB value
             * @property {number} FORMAT_8UBGR=3 FORMAT_8UBGR value
             * @property {number} FORMAT_8U=4 FORMAT_8U value
             */
            v1.ImageFormat = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "IMAGE_FORMAT_NOT_DEFINED"] = 0;
                values[valuesById[1] = "UNSPECIFIED"] = 1;
                values[valuesById[2] = "FORMAT_8URGB"] = 2;
                values[valuesById[3] = "FORMAT_8UBGR"] = 3;
                values[valuesById[4] = "FORMAT_8U"] = 4;
                return values;
            })();

            v1.Image = (function() {

                /**
                 * Properties of an Image.
                 * @memberof matrix_io.vision.v1
                 * @interface IImage
                 * @property {Uint8Array|null} [image] Image image
                 * @property {matrix_io.vision.v1.ImageFormat|null} [format] Image format
                 * @property {matrix_io.vision.v1.ISize|null} [size] Image size
                 */

                /**
                 * Constructs a new Image.
                 * @memberof matrix_io.vision.v1
                 * @classdesc Represents an Image.
                 * @implements IImage
                 * @constructor
                 * @param {matrix_io.vision.v1.IImage=} [properties] Properties to set
                 */
                function Image(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Image image.
                 * @member {Uint8Array} image
                 * @memberof matrix_io.vision.v1.Image
                 * @instance
                 */
                Image.prototype.image = $util.newBuffer([]);

                /**
                 * Image format.
                 * @member {matrix_io.vision.v1.ImageFormat} format
                 * @memberof matrix_io.vision.v1.Image
                 * @instance
                 */
                Image.prototype.format = 0;

                /**
                 * Image size.
                 * @member {matrix_io.vision.v1.ISize|null|undefined} size
                 * @memberof matrix_io.vision.v1.Image
                 * @instance
                 */
                Image.prototype.size = null;

                /**
                 * Creates a new Image instance using the specified properties.
                 * @function create
                 * @memberof matrix_io.vision.v1.Image
                 * @static
                 * @param {matrix_io.vision.v1.IImage=} [properties] Properties to set
                 * @returns {matrix_io.vision.v1.Image} Image instance
                 */
                Image.create = function create(properties) {
                    return new Image(properties);
                };

                /**
                 * Encodes the specified Image message. Does not implicitly {@link matrix_io.vision.v1.Image.verify|verify} messages.
                 * @function encode
                 * @memberof matrix_io.vision.v1.Image
                 * @static
                 * @param {matrix_io.vision.v1.IImage} message Image message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Image.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.image != null && message.hasOwnProperty("image"))
                        writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.image);
                    if (message.format != null && message.hasOwnProperty("format"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.format);
                    if (message.size != null && message.hasOwnProperty("size"))
                        $root.matrix_io.vision.v1.Size.encode(message.size, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified Image message, length delimited. Does not implicitly {@link matrix_io.vision.v1.Image.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof matrix_io.vision.v1.Image
                 * @static
                 * @param {matrix_io.vision.v1.IImage} message Image message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Image.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an Image message from the specified reader or buffer.
                 * @function decode
                 * @memberof matrix_io.vision.v1.Image
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {matrix_io.vision.v1.Image} Image
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Image.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.vision.v1.Image();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.image = reader.bytes();
                            break;
                        case 2:
                            message.format = reader.int32();
                            break;
                        case 3:
                            message.size = $root.matrix_io.vision.v1.Size.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an Image message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof matrix_io.vision.v1.Image
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {matrix_io.vision.v1.Image} Image
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Image.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an Image message.
                 * @function verify
                 * @memberof matrix_io.vision.v1.Image
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Image.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.image != null && message.hasOwnProperty("image"))
                        if (!(message.image && typeof message.image.length === "number" || $util.isString(message.image)))
                            return "image: buffer expected";
                    if (message.format != null && message.hasOwnProperty("format"))
                        switch (message.format) {
                        default:
                            return "format: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                            break;
                        }
                    if (message.size != null && message.hasOwnProperty("size")) {
                        var error = $root.matrix_io.vision.v1.Size.verify(message.size);
                        if (error)
                            return "size." + error;
                    }
                    return null;
                };

                /**
                 * Creates an Image message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof matrix_io.vision.v1.Image
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {matrix_io.vision.v1.Image} Image
                 */
                Image.fromObject = function fromObject(object) {
                    if (object instanceof $root.matrix_io.vision.v1.Image)
                        return object;
                    var message = new $root.matrix_io.vision.v1.Image();
                    if (object.image != null)
                        if (typeof object.image === "string")
                            $util.base64.decode(object.image, message.image = $util.newBuffer($util.base64.length(object.image)), 0);
                        else if (object.image.length)
                            message.image = object.image;
                    switch (object.format) {
                    case "IMAGE_FORMAT_NOT_DEFINED":
                    case 0:
                        message.format = 0;
                        break;
                    case "UNSPECIFIED":
                    case 1:
                        message.format = 1;
                        break;
                    case "FORMAT_8URGB":
                    case 2:
                        message.format = 2;
                        break;
                    case "FORMAT_8UBGR":
                    case 3:
                        message.format = 3;
                        break;
                    case "FORMAT_8U":
                    case 4:
                        message.format = 4;
                        break;
                    }
                    if (object.size != null) {
                        if (typeof object.size !== "object")
                            throw TypeError(".matrix_io.vision.v1.Image.size: object expected");
                        message.size = $root.matrix_io.vision.v1.Size.fromObject(object.size);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from an Image message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof matrix_io.vision.v1.Image
                 * @static
                 * @param {matrix_io.vision.v1.Image} message Image
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Image.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.image = options.bytes === String ? "" : [];
                        object.format = options.enums === String ? "IMAGE_FORMAT_NOT_DEFINED" : 0;
                        object.size = null;
                    }
                    if (message.image != null && message.hasOwnProperty("image"))
                        object.image = options.bytes === String ? $util.base64.encode(message.image, 0, message.image.length) : options.bytes === Array ? Array.prototype.slice.call(message.image) : message.image;
                    if (message.format != null && message.hasOwnProperty("format"))
                        object.format = options.enums === String ? $root.matrix_io.vision.v1.ImageFormat[message.format] : message.format;
                    if (message.size != null && message.hasOwnProperty("size"))
                        object.size = $root.matrix_io.vision.v1.Size.toObject(message.size, options);
                    return object;
                };

                /**
                 * Converts this Image to JSON.
                 * @function toJSON
                 * @memberof matrix_io.vision.v1.Image
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Image.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return Image;
            })();

            v1.VisionResult = (function() {

                /**
                 * Properties of a VisionResult.
                 * @memberof matrix_io.vision.v1
                 * @interface IVisionResult
                 * @property {Array.<matrix_io.vision.v1.IRectangularDetection>|null} [rectDetection] VisionResult rectDetection
                 * @property {Array.<matrix_io.vision.v1.IVisionEvent>|null} [visionEvent] VisionResult visionEvent
                 * @property {matrix_io.vision.v1.IImage|null} [resultImage] VisionResult resultImage
                 * @property {matrix_io.vision.v1.IImage|null} [resultImageSmall] VisionResult resultImageSmall
                 * @property {Uint8Array|null} [image] VisionResult image
                 * @property {Uint8Array|null} [imageSmall] VisionResult imageSmall
                 * @property {string|null} [uuid] VisionResult uuid
                 */

                /**
                 * Constructs a new VisionResult.
                 * @memberof matrix_io.vision.v1
                 * @classdesc Represents a VisionResult.
                 * @implements IVisionResult
                 * @constructor
                 * @param {matrix_io.vision.v1.IVisionResult=} [properties] Properties to set
                 */
                function VisionResult(properties) {
                    this.rectDetection = [];
                    this.visionEvent = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * VisionResult rectDetection.
                 * @member {Array.<matrix_io.vision.v1.IRectangularDetection>} rectDetection
                 * @memberof matrix_io.vision.v1.VisionResult
                 * @instance
                 */
                VisionResult.prototype.rectDetection = $util.emptyArray;

                /**
                 * VisionResult visionEvent.
                 * @member {Array.<matrix_io.vision.v1.IVisionEvent>} visionEvent
                 * @memberof matrix_io.vision.v1.VisionResult
                 * @instance
                 */
                VisionResult.prototype.visionEvent = $util.emptyArray;

                /**
                 * VisionResult resultImage.
                 * @member {matrix_io.vision.v1.IImage|null|undefined} resultImage
                 * @memberof matrix_io.vision.v1.VisionResult
                 * @instance
                 */
                VisionResult.prototype.resultImage = null;

                /**
                 * VisionResult resultImageSmall.
                 * @member {matrix_io.vision.v1.IImage|null|undefined} resultImageSmall
                 * @memberof matrix_io.vision.v1.VisionResult
                 * @instance
                 */
                VisionResult.prototype.resultImageSmall = null;

                /**
                 * VisionResult image.
                 * @member {Uint8Array} image
                 * @memberof matrix_io.vision.v1.VisionResult
                 * @instance
                 */
                VisionResult.prototype.image = $util.newBuffer([]);

                /**
                 * VisionResult imageSmall.
                 * @member {Uint8Array} imageSmall
                 * @memberof matrix_io.vision.v1.VisionResult
                 * @instance
                 */
                VisionResult.prototype.imageSmall = $util.newBuffer([]);

                /**
                 * VisionResult uuid.
                 * @member {string} uuid
                 * @memberof matrix_io.vision.v1.VisionResult
                 * @instance
                 */
                VisionResult.prototype.uuid = "";

                /**
                 * Creates a new VisionResult instance using the specified properties.
                 * @function create
                 * @memberof matrix_io.vision.v1.VisionResult
                 * @static
                 * @param {matrix_io.vision.v1.IVisionResult=} [properties] Properties to set
                 * @returns {matrix_io.vision.v1.VisionResult} VisionResult instance
                 */
                VisionResult.create = function create(properties) {
                    return new VisionResult(properties);
                };

                /**
                 * Encodes the specified VisionResult message. Does not implicitly {@link matrix_io.vision.v1.VisionResult.verify|verify} messages.
                 * @function encode
                 * @memberof matrix_io.vision.v1.VisionResult
                 * @static
                 * @param {matrix_io.vision.v1.IVisionResult} message VisionResult message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                VisionResult.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.rectDetection != null && message.rectDetection.length)
                        for (var i = 0; i < message.rectDetection.length; ++i)
                            $root.matrix_io.vision.v1.RectangularDetection.encode(message.rectDetection[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.image != null && message.hasOwnProperty("image"))
                        writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.image);
                    if (message.imageSmall != null && message.hasOwnProperty("imageSmall"))
                        writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.imageSmall);
                    if (message.visionEvent != null && message.visionEvent.length)
                        for (var i = 0; i < message.visionEvent.length; ++i)
                            $root.matrix_io.vision.v1.VisionEvent.encode(message.visionEvent[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.resultImage != null && message.hasOwnProperty("resultImage"))
                        $root.matrix_io.vision.v1.Image.encode(message.resultImage, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.resultImageSmall != null && message.hasOwnProperty("resultImageSmall"))
                        $root.matrix_io.vision.v1.Image.encode(message.resultImageSmall, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.uuid != null && message.hasOwnProperty("uuid"))
                        writer.uint32(/* id 7, wireType 2 =*/58).string(message.uuid);
                    return writer;
                };

                /**
                 * Encodes the specified VisionResult message, length delimited. Does not implicitly {@link matrix_io.vision.v1.VisionResult.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof matrix_io.vision.v1.VisionResult
                 * @static
                 * @param {matrix_io.vision.v1.IVisionResult} message VisionResult message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                VisionResult.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a VisionResult message from the specified reader or buffer.
                 * @function decode
                 * @memberof matrix_io.vision.v1.VisionResult
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {matrix_io.vision.v1.VisionResult} VisionResult
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                VisionResult.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.vision.v1.VisionResult();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.rectDetection && message.rectDetection.length))
                                message.rectDetection = [];
                            message.rectDetection.push($root.matrix_io.vision.v1.RectangularDetection.decode(reader, reader.uint32()));
                            break;
                        case 4:
                            if (!(message.visionEvent && message.visionEvent.length))
                                message.visionEvent = [];
                            message.visionEvent.push($root.matrix_io.vision.v1.VisionEvent.decode(reader, reader.uint32()));
                            break;
                        case 5:
                            message.resultImage = $root.matrix_io.vision.v1.Image.decode(reader, reader.uint32());
                            break;
                        case 6:
                            message.resultImageSmall = $root.matrix_io.vision.v1.Image.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.image = reader.bytes();
                            break;
                        case 3:
                            message.imageSmall = reader.bytes();
                            break;
                        case 7:
                            message.uuid = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a VisionResult message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof matrix_io.vision.v1.VisionResult
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {matrix_io.vision.v1.VisionResult} VisionResult
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                VisionResult.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a VisionResult message.
                 * @function verify
                 * @memberof matrix_io.vision.v1.VisionResult
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                VisionResult.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.rectDetection != null && message.hasOwnProperty("rectDetection")) {
                        if (!Array.isArray(message.rectDetection))
                            return "rectDetection: array expected";
                        for (var i = 0; i < message.rectDetection.length; ++i) {
                            var error = $root.matrix_io.vision.v1.RectangularDetection.verify(message.rectDetection[i]);
                            if (error)
                                return "rectDetection." + error;
                        }
                    }
                    if (message.visionEvent != null && message.hasOwnProperty("visionEvent")) {
                        if (!Array.isArray(message.visionEvent))
                            return "visionEvent: array expected";
                        for (var i = 0; i < message.visionEvent.length; ++i) {
                            var error = $root.matrix_io.vision.v1.VisionEvent.verify(message.visionEvent[i]);
                            if (error)
                                return "visionEvent." + error;
                        }
                    }
                    if (message.resultImage != null && message.hasOwnProperty("resultImage")) {
                        var error = $root.matrix_io.vision.v1.Image.verify(message.resultImage);
                        if (error)
                            return "resultImage." + error;
                    }
                    if (message.resultImageSmall != null && message.hasOwnProperty("resultImageSmall")) {
                        var error = $root.matrix_io.vision.v1.Image.verify(message.resultImageSmall);
                        if (error)
                            return "resultImageSmall." + error;
                    }
                    if (message.image != null && message.hasOwnProperty("image"))
                        if (!(message.image && typeof message.image.length === "number" || $util.isString(message.image)))
                            return "image: buffer expected";
                    if (message.imageSmall != null && message.hasOwnProperty("imageSmall"))
                        if (!(message.imageSmall && typeof message.imageSmall.length === "number" || $util.isString(message.imageSmall)))
                            return "imageSmall: buffer expected";
                    if (message.uuid != null && message.hasOwnProperty("uuid"))
                        if (!$util.isString(message.uuid))
                            return "uuid: string expected";
                    return null;
                };

                /**
                 * Creates a VisionResult message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof matrix_io.vision.v1.VisionResult
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {matrix_io.vision.v1.VisionResult} VisionResult
                 */
                VisionResult.fromObject = function fromObject(object) {
                    if (object instanceof $root.matrix_io.vision.v1.VisionResult)
                        return object;
                    var message = new $root.matrix_io.vision.v1.VisionResult();
                    if (object.rectDetection) {
                        if (!Array.isArray(object.rectDetection))
                            throw TypeError(".matrix_io.vision.v1.VisionResult.rectDetection: array expected");
                        message.rectDetection = [];
                        for (var i = 0; i < object.rectDetection.length; ++i) {
                            if (typeof object.rectDetection[i] !== "object")
                                throw TypeError(".matrix_io.vision.v1.VisionResult.rectDetection: object expected");
                            message.rectDetection[i] = $root.matrix_io.vision.v1.RectangularDetection.fromObject(object.rectDetection[i]);
                        }
                    }
                    if (object.visionEvent) {
                        if (!Array.isArray(object.visionEvent))
                            throw TypeError(".matrix_io.vision.v1.VisionResult.visionEvent: array expected");
                        message.visionEvent = [];
                        for (var i = 0; i < object.visionEvent.length; ++i) {
                            if (typeof object.visionEvent[i] !== "object")
                                throw TypeError(".matrix_io.vision.v1.VisionResult.visionEvent: object expected");
                            message.visionEvent[i] = $root.matrix_io.vision.v1.VisionEvent.fromObject(object.visionEvent[i]);
                        }
                    }
                    if (object.resultImage != null) {
                        if (typeof object.resultImage !== "object")
                            throw TypeError(".matrix_io.vision.v1.VisionResult.resultImage: object expected");
                        message.resultImage = $root.matrix_io.vision.v1.Image.fromObject(object.resultImage);
                    }
                    if (object.resultImageSmall != null) {
                        if (typeof object.resultImageSmall !== "object")
                            throw TypeError(".matrix_io.vision.v1.VisionResult.resultImageSmall: object expected");
                        message.resultImageSmall = $root.matrix_io.vision.v1.Image.fromObject(object.resultImageSmall);
                    }
                    if (object.image != null)
                        if (typeof object.image === "string")
                            $util.base64.decode(object.image, message.image = $util.newBuffer($util.base64.length(object.image)), 0);
                        else if (object.image.length)
                            message.image = object.image;
                    if (object.imageSmall != null)
                        if (typeof object.imageSmall === "string")
                            $util.base64.decode(object.imageSmall, message.imageSmall = $util.newBuffer($util.base64.length(object.imageSmall)), 0);
                        else if (object.imageSmall.length)
                            message.imageSmall = object.imageSmall;
                    if (object.uuid != null)
                        message.uuid = String(object.uuid);
                    return message;
                };

                /**
                 * Creates a plain object from a VisionResult message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof matrix_io.vision.v1.VisionResult
                 * @static
                 * @param {matrix_io.vision.v1.VisionResult} message VisionResult
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                VisionResult.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.rectDetection = [];
                        object.visionEvent = [];
                    }
                    if (options.defaults) {
                        object.image = options.bytes === String ? "" : [];
                        object.imageSmall = options.bytes === String ? "" : [];
                        object.resultImage = null;
                        object.resultImageSmall = null;
                        object.uuid = "";
                    }
                    if (message.rectDetection && message.rectDetection.length) {
                        object.rectDetection = [];
                        for (var j = 0; j < message.rectDetection.length; ++j)
                            object.rectDetection[j] = $root.matrix_io.vision.v1.RectangularDetection.toObject(message.rectDetection[j], options);
                    }
                    if (message.image != null && message.hasOwnProperty("image"))
                        object.image = options.bytes === String ? $util.base64.encode(message.image, 0, message.image.length) : options.bytes === Array ? Array.prototype.slice.call(message.image) : message.image;
                    if (message.imageSmall != null && message.hasOwnProperty("imageSmall"))
                        object.imageSmall = options.bytes === String ? $util.base64.encode(message.imageSmall, 0, message.imageSmall.length) : options.bytes === Array ? Array.prototype.slice.call(message.imageSmall) : message.imageSmall;
                    if (message.visionEvent && message.visionEvent.length) {
                        object.visionEvent = [];
                        for (var j = 0; j < message.visionEvent.length; ++j)
                            object.visionEvent[j] = $root.matrix_io.vision.v1.VisionEvent.toObject(message.visionEvent[j], options);
                    }
                    if (message.resultImage != null && message.hasOwnProperty("resultImage"))
                        object.resultImage = $root.matrix_io.vision.v1.Image.toObject(message.resultImage, options);
                    if (message.resultImageSmall != null && message.hasOwnProperty("resultImageSmall"))
                        object.resultImageSmall = $root.matrix_io.vision.v1.Image.toObject(message.resultImageSmall, options);
                    if (message.uuid != null && message.hasOwnProperty("uuid"))
                        object.uuid = message.uuid;
                    return object;
                };

                /**
                 * Converts this VisionResult to JSON.
                 * @function toJSON
                 * @memberof matrix_io.vision.v1.VisionResult
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                VisionResult.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return VisionResult;
            })();

            v1.VisionRequest = (function() {

                /**
                 * Properties of a VisionRequest.
                 * @memberof matrix_io.vision.v1
                 * @interface IVisionRequest
                 * @property {Uint8Array|null} [image] VisionRequest image
                 * @property {Array.<matrix_io.vision.v1.EnumDetectionTag>|null} [detection] VisionRequest detection
                 * @property {Array.<matrix_io.vision.v1.EnumFacialRecognitionTag>|null} [recognition] VisionRequest recognition
                 * @property {matrix_io.vision.v1.IImageList|null} [imageList] VisionRequest imageList
                 * @property {matrix_io.vision.v1.IVideo|null} [video] VisionRequest video
                 */

                /**
                 * Constructs a new VisionRequest.
                 * @memberof matrix_io.vision.v1
                 * @classdesc Represents a VisionRequest.
                 * @implements IVisionRequest
                 * @constructor
                 * @param {matrix_io.vision.v1.IVisionRequest=} [properties] Properties to set
                 */
                function VisionRequest(properties) {
                    this.detection = [];
                    this.recognition = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * VisionRequest image.
                 * @member {Uint8Array} image
                 * @memberof matrix_io.vision.v1.VisionRequest
                 * @instance
                 */
                VisionRequest.prototype.image = $util.newBuffer([]);

                /**
                 * VisionRequest detection.
                 * @member {Array.<matrix_io.vision.v1.EnumDetectionTag>} detection
                 * @memberof matrix_io.vision.v1.VisionRequest
                 * @instance
                 */
                VisionRequest.prototype.detection = $util.emptyArray;

                /**
                 * VisionRequest recognition.
                 * @member {Array.<matrix_io.vision.v1.EnumFacialRecognitionTag>} recognition
                 * @memberof matrix_io.vision.v1.VisionRequest
                 * @instance
                 */
                VisionRequest.prototype.recognition = $util.emptyArray;

                /**
                 * VisionRequest imageList.
                 * @member {matrix_io.vision.v1.IImageList|null|undefined} imageList
                 * @memberof matrix_io.vision.v1.VisionRequest
                 * @instance
                 */
                VisionRequest.prototype.imageList = null;

                /**
                 * VisionRequest video.
                 * @member {matrix_io.vision.v1.IVideo|null|undefined} video
                 * @memberof matrix_io.vision.v1.VisionRequest
                 * @instance
                 */
                VisionRequest.prototype.video = null;

                /**
                 * Creates a new VisionRequest instance using the specified properties.
                 * @function create
                 * @memberof matrix_io.vision.v1.VisionRequest
                 * @static
                 * @param {matrix_io.vision.v1.IVisionRequest=} [properties] Properties to set
                 * @returns {matrix_io.vision.v1.VisionRequest} VisionRequest instance
                 */
                VisionRequest.create = function create(properties) {
                    return new VisionRequest(properties);
                };

                /**
                 * Encodes the specified VisionRequest message. Does not implicitly {@link matrix_io.vision.v1.VisionRequest.verify|verify} messages.
                 * @function encode
                 * @memberof matrix_io.vision.v1.VisionRequest
                 * @static
                 * @param {matrix_io.vision.v1.IVisionRequest} message VisionRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                VisionRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.image != null && message.hasOwnProperty("image"))
                        writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.image);
                    if (message.detection != null && message.detection.length) {
                        writer.uint32(/* id 2, wireType 2 =*/18).fork();
                        for (var i = 0; i < message.detection.length; ++i)
                            writer.int32(message.detection[i]);
                        writer.ldelim();
                    }
                    if (message.recognition != null && message.recognition.length) {
                        writer.uint32(/* id 3, wireType 2 =*/26).fork();
                        for (var i = 0; i < message.recognition.length; ++i)
                            writer.int32(message.recognition[i]);
                        writer.ldelim();
                    }
                    if (message.imageList != null && message.hasOwnProperty("imageList"))
                        $root.matrix_io.vision.v1.ImageList.encode(message.imageList, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.video != null && message.hasOwnProperty("video"))
                        $root.matrix_io.vision.v1.Video.encode(message.video, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified VisionRequest message, length delimited. Does not implicitly {@link matrix_io.vision.v1.VisionRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof matrix_io.vision.v1.VisionRequest
                 * @static
                 * @param {matrix_io.vision.v1.IVisionRequest} message VisionRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                VisionRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a VisionRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof matrix_io.vision.v1.VisionRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {matrix_io.vision.v1.VisionRequest} VisionRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                VisionRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.vision.v1.VisionRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.image = reader.bytes();
                            break;
                        case 2:
                            if (!(message.detection && message.detection.length))
                                message.detection = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.detection.push(reader.int32());
                            } else
                                message.detection.push(reader.int32());
                            break;
                        case 3:
                            if (!(message.recognition && message.recognition.length))
                                message.recognition = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.recognition.push(reader.int32());
                            } else
                                message.recognition.push(reader.int32());
                            break;
                        case 4:
                            message.imageList = $root.matrix_io.vision.v1.ImageList.decode(reader, reader.uint32());
                            break;
                        case 5:
                            message.video = $root.matrix_io.vision.v1.Video.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a VisionRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof matrix_io.vision.v1.VisionRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {matrix_io.vision.v1.VisionRequest} VisionRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                VisionRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a VisionRequest message.
                 * @function verify
                 * @memberof matrix_io.vision.v1.VisionRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                VisionRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.image != null && message.hasOwnProperty("image"))
                        if (!(message.image && typeof message.image.length === "number" || $util.isString(message.image)))
                            return "image: buffer expected";
                    if (message.detection != null && message.hasOwnProperty("detection")) {
                        if (!Array.isArray(message.detection))
                            return "detection: array expected";
                        for (var i = 0; i < message.detection.length; ++i)
                            switch (message.detection[i]) {
                            default:
                                return "detection: enum value[] expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                            case 4:
                            case 5:
                            case 6:
                                break;
                            }
                    }
                    if (message.recognition != null && message.hasOwnProperty("recognition")) {
                        if (!Array.isArray(message.recognition))
                            return "recognition: array expected";
                        for (var i = 0; i < message.recognition.length; ++i)
                            switch (message.recognition[i]) {
                            default:
                                return "recognition: enum value[] expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                            case 4:
                            case 5:
                            case 6:
                            case 7:
                            case 8:
                                break;
                            }
                    }
                    if (message.imageList != null && message.hasOwnProperty("imageList")) {
                        var error = $root.matrix_io.vision.v1.ImageList.verify(message.imageList);
                        if (error)
                            return "imageList." + error;
                    }
                    if (message.video != null && message.hasOwnProperty("video")) {
                        var error = $root.matrix_io.vision.v1.Video.verify(message.video);
                        if (error)
                            return "video." + error;
                    }
                    return null;
                };

                /**
                 * Creates a VisionRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof matrix_io.vision.v1.VisionRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {matrix_io.vision.v1.VisionRequest} VisionRequest
                 */
                VisionRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.matrix_io.vision.v1.VisionRequest)
                        return object;
                    var message = new $root.matrix_io.vision.v1.VisionRequest();
                    if (object.image != null)
                        if (typeof object.image === "string")
                            $util.base64.decode(object.image, message.image = $util.newBuffer($util.base64.length(object.image)), 0);
                        else if (object.image.length)
                            message.image = object.image;
                    if (object.detection) {
                        if (!Array.isArray(object.detection))
                            throw TypeError(".matrix_io.vision.v1.VisionRequest.detection: array expected");
                        message.detection = [];
                        for (var i = 0; i < object.detection.length; ++i)
                            switch (object.detection[i]) {
                            default:
                            case "DETECTION_NOT_DEFINED":
                            case 0:
                                message.detection[i] = 0;
                                break;
                            case "FACE":
                            case 1:
                                message.detection[i] = 1;
                                break;
                            case "HAND_THUMB":
                            case 2:
                                message.detection[i] = 2;
                                break;
                            case "HAND_PALM":
                            case 3:
                                message.detection[i] = 3;
                                break;
                            case "HAND_PINCH":
                            case 4:
                                message.detection[i] = 4;
                                break;
                            case "HAND_FIST":
                            case 5:
                                message.detection[i] = 5;
                                break;
                            case "PERSON":
                            case 6:
                                message.detection[i] = 6;
                                break;
                            }
                    }
                    if (object.recognition) {
                        if (!Array.isArray(object.recognition))
                            throw TypeError(".matrix_io.vision.v1.VisionRequest.recognition: array expected");
                        message.recognition = [];
                        for (var i = 0; i < object.recognition.length; ++i)
                            switch (object.recognition[i]) {
                            default:
                            case "FACIAL_RECOGNITION_NOT_DEFINED":
                            case 0:
                                message.recognition[i] = 0;
                                break;
                            case "AGE":
                            case 1:
                                message.recognition[i] = 1;
                                break;
                            case "EMOTION":
                            case 2:
                                message.recognition[i] = 2;
                                break;
                            case "GENDER":
                            case 3:
                                message.recognition[i] = 3;
                                break;
                            case "FACE_ID":
                            case 4:
                                message.recognition[i] = 4;
                                break;
                            case "HEAD_POSE":
                            case 5:
                                message.recognition[i] = 5;
                                break;
                            case "FACE_FEATURES":
                            case 6:
                                message.recognition[i] = 6;
                                break;
                            case "FACE_DESCRIPTOR":
                            case 7:
                                message.recognition[i] = 7;
                                break;
                            case "IS_FACE":
                            case 8:
                                message.recognition[i] = 8;
                                break;
                            }
                    }
                    if (object.imageList != null) {
                        if (typeof object.imageList !== "object")
                            throw TypeError(".matrix_io.vision.v1.VisionRequest.imageList: object expected");
                        message.imageList = $root.matrix_io.vision.v1.ImageList.fromObject(object.imageList);
                    }
                    if (object.video != null) {
                        if (typeof object.video !== "object")
                            throw TypeError(".matrix_io.vision.v1.VisionRequest.video: object expected");
                        message.video = $root.matrix_io.vision.v1.Video.fromObject(object.video);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a VisionRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof matrix_io.vision.v1.VisionRequest
                 * @static
                 * @param {matrix_io.vision.v1.VisionRequest} message VisionRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                VisionRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.detection = [];
                        object.recognition = [];
                    }
                    if (options.defaults) {
                        object.image = options.bytes === String ? "" : [];
                        object.imageList = null;
                        object.video = null;
                    }
                    if (message.image != null && message.hasOwnProperty("image"))
                        object.image = options.bytes === String ? $util.base64.encode(message.image, 0, message.image.length) : options.bytes === Array ? Array.prototype.slice.call(message.image) : message.image;
                    if (message.detection && message.detection.length) {
                        object.detection = [];
                        for (var j = 0; j < message.detection.length; ++j)
                            object.detection[j] = options.enums === String ? $root.matrix_io.vision.v1.EnumDetectionTag[message.detection[j]] : message.detection[j];
                    }
                    if (message.recognition && message.recognition.length) {
                        object.recognition = [];
                        for (var j = 0; j < message.recognition.length; ++j)
                            object.recognition[j] = options.enums === String ? $root.matrix_io.vision.v1.EnumFacialRecognitionTag[message.recognition[j]] : message.recognition[j];
                    }
                    if (message.imageList != null && message.hasOwnProperty("imageList"))
                        object.imageList = $root.matrix_io.vision.v1.ImageList.toObject(message.imageList, options);
                    if (message.video != null && message.hasOwnProperty("video"))
                        object.video = $root.matrix_io.vision.v1.Video.toObject(message.video, options);
                    return object;
                };

                /**
                 * Converts this VisionRequest to JSON.
                 * @function toJSON
                 * @memberof matrix_io.vision.v1.VisionRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                VisionRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return VisionRequest;
            })();

            v1.VisionService = (function() {

                /**
                 * Constructs a new VisionService service.
                 * @memberof matrix_io.vision.v1
                 * @classdesc Represents a VisionService
                 * @extends $protobuf.rpc.Service
                 * @constructor
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 */
                function VisionService(rpcImpl, requestDelimited, responseDelimited) {
                    $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                }

                (VisionService.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = VisionService;

                /**
                 * Creates new VisionService service using the specified rpc implementation.
                 * @function create
                 * @memberof matrix_io.vision.v1.VisionService
                 * @static
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 * @returns {VisionService} RPC service. Useful where requests and/or responses are streamed.
                 */
                VisionService.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                    return new this(rpcImpl, requestDelimited, responseDelimited);
                };

                /**
                 * Callback as used by {@link matrix_io.vision.v1.VisionService#processImage}.
                 * @memberof matrix_io.vision.v1.VisionService
                 * @typedef ProcessImageCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {matrix_io.vision.v1.VisionResult} [response] VisionResult
                 */

                /**
                 * Calls ProcessImage.
                 * @function processImage
                 * @memberof matrix_io.vision.v1.VisionService
                 * @instance
                 * @param {matrix_io.vision.v1.IVisionRequest} request VisionRequest message or plain object
                 * @param {matrix_io.vision.v1.VisionService.ProcessImageCallback} callback Node-style callback called with the error, if any, and VisionResult
                 * @returns {undefined}
                 * @variation 1
                 */
                VisionService.prototype.processImage = function processImage(request, callback) {
                    return this.rpcCall(processImage, $root.matrix_io.vision.v1.VisionRequest, $root.matrix_io.vision.v1.VisionResult, request, callback);
                };

                /**
                 * Calls ProcessImage.
                 * @function processImage
                 * @memberof matrix_io.vision.v1.VisionService
                 * @instance
                 * @param {matrix_io.vision.v1.IVisionRequest} request VisionRequest message or plain object
                 * @returns {Promise<matrix_io.vision.v1.VisionResult>} Promise
                 * @variation 2
                 */

                return VisionService;
            })();

            return v1;
        })();

        return vision;
    })();

    matrix_io.common = (function() {

        /**
         * Namespace common.
         * @memberof matrix_io
         * @namespace
         */
        var common = {};

        common.ArrayValue = (function() {

            /**
             * Properties of an ArrayValue.
             * @memberof matrix_io.common
             * @interface IArrayValue
             * @property {Array.<matrix_io.common.IValue>|null} [values] ArrayValue values
             */

            /**
             * Constructs a new ArrayValue.
             * @memberof matrix_io.common
             * @classdesc Represents an ArrayValue.
             * @implements IArrayValue
             * @constructor
             * @param {matrix_io.common.IArrayValue=} [properties] Properties to set
             */
            function ArrayValue(properties) {
                this.values = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ArrayValue values.
             * @member {Array.<matrix_io.common.IValue>} values
             * @memberof matrix_io.common.ArrayValue
             * @instance
             */
            ArrayValue.prototype.values = $util.emptyArray;

            /**
             * Creates a new ArrayValue instance using the specified properties.
             * @function create
             * @memberof matrix_io.common.ArrayValue
             * @static
             * @param {matrix_io.common.IArrayValue=} [properties] Properties to set
             * @returns {matrix_io.common.ArrayValue} ArrayValue instance
             */
            ArrayValue.create = function create(properties) {
                return new ArrayValue(properties);
            };

            /**
             * Encodes the specified ArrayValue message. Does not implicitly {@link matrix_io.common.ArrayValue.verify|verify} messages.
             * @function encode
             * @memberof matrix_io.common.ArrayValue
             * @static
             * @param {matrix_io.common.IArrayValue} message ArrayValue message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ArrayValue.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.values != null && message.values.length)
                    for (var i = 0; i < message.values.length; ++i)
                        $root.matrix_io.common.Value.encode(message.values[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ArrayValue message, length delimited. Does not implicitly {@link matrix_io.common.ArrayValue.verify|verify} messages.
             * @function encodeDelimited
             * @memberof matrix_io.common.ArrayValue
             * @static
             * @param {matrix_io.common.IArrayValue} message ArrayValue message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ArrayValue.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an ArrayValue message from the specified reader or buffer.
             * @function decode
             * @memberof matrix_io.common.ArrayValue
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {matrix_io.common.ArrayValue} ArrayValue
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ArrayValue.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.common.ArrayValue();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.values && message.values.length))
                            message.values = [];
                        message.values.push($root.matrix_io.common.Value.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an ArrayValue message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof matrix_io.common.ArrayValue
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {matrix_io.common.ArrayValue} ArrayValue
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ArrayValue.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an ArrayValue message.
             * @function verify
             * @memberof matrix_io.common.ArrayValue
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ArrayValue.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.values != null && message.hasOwnProperty("values")) {
                    if (!Array.isArray(message.values))
                        return "values: array expected";
                    for (var i = 0; i < message.values.length; ++i) {
                        var error = $root.matrix_io.common.Value.verify(message.values[i]);
                        if (error)
                            return "values." + error;
                    }
                }
                return null;
            };

            /**
             * Creates an ArrayValue message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof matrix_io.common.ArrayValue
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {matrix_io.common.ArrayValue} ArrayValue
             */
            ArrayValue.fromObject = function fromObject(object) {
                if (object instanceof $root.matrix_io.common.ArrayValue)
                    return object;
                var message = new $root.matrix_io.common.ArrayValue();
                if (object.values) {
                    if (!Array.isArray(object.values))
                        throw TypeError(".matrix_io.common.ArrayValue.values: array expected");
                    message.values = [];
                    for (var i = 0; i < object.values.length; ++i) {
                        if (typeof object.values[i] !== "object")
                            throw TypeError(".matrix_io.common.ArrayValue.values: object expected");
                        message.values[i] = $root.matrix_io.common.Value.fromObject(object.values[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from an ArrayValue message. Also converts values to other types if specified.
             * @function toObject
             * @memberof matrix_io.common.ArrayValue
             * @static
             * @param {matrix_io.common.ArrayValue} message ArrayValue
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ArrayValue.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.values = [];
                if (message.values && message.values.length) {
                    object.values = [];
                    for (var j = 0; j < message.values.length; ++j)
                        object.values[j] = $root.matrix_io.common.Value.toObject(message.values[j], options);
                }
                return object;
            };

            /**
             * Converts this ArrayValue to JSON.
             * @function toJSON
             * @memberof matrix_io.common.ArrayValue
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ArrayValue.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ArrayValue;
        })();

        common.Value = (function() {

            /**
             * Properties of a Value.
             * @memberof matrix_io.common
             * @interface IValue
             * @property {boolean|null} [booleanValue] Value booleanValue
             * @property {number|Long|null} [integerValue] Value integerValue
             * @property {number|null} [doubleValue] Value doubleValue
             * @property {matrix_io.common.IEntity|null} [entityValue] Value entityValue
             * @property {matrix_io.common.IArrayValue|null} [arrayValue] Value arrayValue
             * @property {google.protobuf.ITimestamp|null} [timestampValue] Value timestampValue
             * @property {string|null} [stringValue] Value stringValue
             * @property {Uint8Array|null} [blobValue] Value blobValue
             * @property {matrix_io.common.Value.ISize|null} [sizeValue] Value sizeValue
             */

            /**
             * Constructs a new Value.
             * @memberof matrix_io.common
             * @classdesc Represents a Value.
             * @implements IValue
             * @constructor
             * @param {matrix_io.common.IValue=} [properties] Properties to set
             */
            function Value(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Value booleanValue.
             * @member {boolean} booleanValue
             * @memberof matrix_io.common.Value
             * @instance
             */
            Value.prototype.booleanValue = false;

            /**
             * Value integerValue.
             * @member {number|Long} integerValue
             * @memberof matrix_io.common.Value
             * @instance
             */
            Value.prototype.integerValue = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Value doubleValue.
             * @member {number} doubleValue
             * @memberof matrix_io.common.Value
             * @instance
             */
            Value.prototype.doubleValue = 0;

            /**
             * Value entityValue.
             * @member {matrix_io.common.IEntity|null|undefined} entityValue
             * @memberof matrix_io.common.Value
             * @instance
             */
            Value.prototype.entityValue = null;

            /**
             * Value arrayValue.
             * @member {matrix_io.common.IArrayValue|null|undefined} arrayValue
             * @memberof matrix_io.common.Value
             * @instance
             */
            Value.prototype.arrayValue = null;

            /**
             * Value timestampValue.
             * @member {google.protobuf.ITimestamp|null|undefined} timestampValue
             * @memberof matrix_io.common.Value
             * @instance
             */
            Value.prototype.timestampValue = null;

            /**
             * Value stringValue.
             * @member {string} stringValue
             * @memberof matrix_io.common.Value
             * @instance
             */
            Value.prototype.stringValue = "";

            /**
             * Value blobValue.
             * @member {Uint8Array} blobValue
             * @memberof matrix_io.common.Value
             * @instance
             */
            Value.prototype.blobValue = $util.newBuffer([]);

            /**
             * Value sizeValue.
             * @member {matrix_io.common.Value.ISize|null|undefined} sizeValue
             * @memberof matrix_io.common.Value
             * @instance
             */
            Value.prototype.sizeValue = null;

            // OneOf field names bound to virtual getters and setters
            var $oneOfFields;

            /**
             * Value valueType.
             * @member {"booleanValue"|"integerValue"|"doubleValue"|"entityValue"|"arrayValue"|"timestampValue"|"stringValue"|"blobValue"|"sizeValue"|undefined} valueType
             * @memberof matrix_io.common.Value
             * @instance
             */
            Object.defineProperty(Value.prototype, "valueType", {
                get: $util.oneOfGetter($oneOfFields = ["booleanValue", "integerValue", "doubleValue", "entityValue", "arrayValue", "timestampValue", "stringValue", "blobValue", "sizeValue"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Creates a new Value instance using the specified properties.
             * @function create
             * @memberof matrix_io.common.Value
             * @static
             * @param {matrix_io.common.IValue=} [properties] Properties to set
             * @returns {matrix_io.common.Value} Value instance
             */
            Value.create = function create(properties) {
                return new Value(properties);
            };

            /**
             * Encodes the specified Value message. Does not implicitly {@link matrix_io.common.Value.verify|verify} messages.
             * @function encode
             * @memberof matrix_io.common.Value
             * @static
             * @param {matrix_io.common.IValue} message Value message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Value.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.booleanValue != null && message.hasOwnProperty("booleanValue"))
                    writer.uint32(/* id 1, wireType 0 =*/8).bool(message.booleanValue);
                if (message.integerValue != null && message.hasOwnProperty("integerValue"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.integerValue);
                if (message.doubleValue != null && message.hasOwnProperty("doubleValue"))
                    writer.uint32(/* id 3, wireType 1 =*/25).double(message.doubleValue);
                if (message.entityValue != null && message.hasOwnProperty("entityValue"))
                    $root.matrix_io.common.Entity.encode(message.entityValue, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                if (message.arrayValue != null && message.hasOwnProperty("arrayValue"))
                    $root.matrix_io.common.ArrayValue.encode(message.arrayValue, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                if (message.timestampValue != null && message.hasOwnProperty("timestampValue"))
                    $root.google.protobuf.Timestamp.encode(message.timestampValue, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                if (message.stringValue != null && message.hasOwnProperty("stringValue"))
                    writer.uint32(/* id 17, wireType 2 =*/138).string(message.stringValue);
                if (message.blobValue != null && message.hasOwnProperty("blobValue"))
                    writer.uint32(/* id 18, wireType 2 =*/146).bytes(message.blobValue);
                if (message.sizeValue != null && message.hasOwnProperty("sizeValue"))
                    $root.matrix_io.common.Value.Size.encode(message.sizeValue, writer.uint32(/* id 19, wireType 2 =*/154).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified Value message, length delimited. Does not implicitly {@link matrix_io.common.Value.verify|verify} messages.
             * @function encodeDelimited
             * @memberof matrix_io.common.Value
             * @static
             * @param {matrix_io.common.IValue} message Value message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Value.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Value message from the specified reader or buffer.
             * @function decode
             * @memberof matrix_io.common.Value
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {matrix_io.common.Value} Value
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Value.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.common.Value();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.booleanValue = reader.bool();
                        break;
                    case 2:
                        message.integerValue = reader.int64();
                        break;
                    case 3:
                        message.doubleValue = reader.double();
                        break;
                    case 6:
                        message.entityValue = $root.matrix_io.common.Entity.decode(reader, reader.uint32());
                        break;
                    case 9:
                        message.arrayValue = $root.matrix_io.common.ArrayValue.decode(reader, reader.uint32());
                        break;
                    case 10:
                        message.timestampValue = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                        break;
                    case 17:
                        message.stringValue = reader.string();
                        break;
                    case 18:
                        message.blobValue = reader.bytes();
                        break;
                    case 19:
                        message.sizeValue = $root.matrix_io.common.Value.Size.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Value message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof matrix_io.common.Value
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {matrix_io.common.Value} Value
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Value.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Value message.
             * @function verify
             * @memberof matrix_io.common.Value
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Value.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                var properties = {};
                if (message.booleanValue != null && message.hasOwnProperty("booleanValue")) {
                    properties.valueType = 1;
                    if (typeof message.booleanValue !== "boolean")
                        return "booleanValue: boolean expected";
                }
                if (message.integerValue != null && message.hasOwnProperty("integerValue")) {
                    if (properties.valueType === 1)
                        return "valueType: multiple values";
                    properties.valueType = 1;
                    if (!$util.isInteger(message.integerValue) && !(message.integerValue && $util.isInteger(message.integerValue.low) && $util.isInteger(message.integerValue.high)))
                        return "integerValue: integer|Long expected";
                }
                if (message.doubleValue != null && message.hasOwnProperty("doubleValue")) {
                    if (properties.valueType === 1)
                        return "valueType: multiple values";
                    properties.valueType = 1;
                    if (typeof message.doubleValue !== "number")
                        return "doubleValue: number expected";
                }
                if (message.entityValue != null && message.hasOwnProperty("entityValue")) {
                    if (properties.valueType === 1)
                        return "valueType: multiple values";
                    properties.valueType = 1;
                    {
                        var error = $root.matrix_io.common.Entity.verify(message.entityValue);
                        if (error)
                            return "entityValue." + error;
                    }
                }
                if (message.arrayValue != null && message.hasOwnProperty("arrayValue")) {
                    if (properties.valueType === 1)
                        return "valueType: multiple values";
                    properties.valueType = 1;
                    {
                        var error = $root.matrix_io.common.ArrayValue.verify(message.arrayValue);
                        if (error)
                            return "arrayValue." + error;
                    }
                }
                if (message.timestampValue != null && message.hasOwnProperty("timestampValue")) {
                    if (properties.valueType === 1)
                        return "valueType: multiple values";
                    properties.valueType = 1;
                    {
                        var error = $root.google.protobuf.Timestamp.verify(message.timestampValue);
                        if (error)
                            return "timestampValue." + error;
                    }
                }
                if (message.stringValue != null && message.hasOwnProperty("stringValue")) {
                    if (properties.valueType === 1)
                        return "valueType: multiple values";
                    properties.valueType = 1;
                    if (!$util.isString(message.stringValue))
                        return "stringValue: string expected";
                }
                if (message.blobValue != null && message.hasOwnProperty("blobValue")) {
                    if (properties.valueType === 1)
                        return "valueType: multiple values";
                    properties.valueType = 1;
                    if (!(message.blobValue && typeof message.blobValue.length === "number" || $util.isString(message.blobValue)))
                        return "blobValue: buffer expected";
                }
                if (message.sizeValue != null && message.hasOwnProperty("sizeValue")) {
                    if (properties.valueType === 1)
                        return "valueType: multiple values";
                    properties.valueType = 1;
                    {
                        var error = $root.matrix_io.common.Value.Size.verify(message.sizeValue);
                        if (error)
                            return "sizeValue." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a Value message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof matrix_io.common.Value
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {matrix_io.common.Value} Value
             */
            Value.fromObject = function fromObject(object) {
                if (object instanceof $root.matrix_io.common.Value)
                    return object;
                var message = new $root.matrix_io.common.Value();
                if (object.booleanValue != null)
                    message.booleanValue = Boolean(object.booleanValue);
                if (object.integerValue != null)
                    if ($util.Long)
                        (message.integerValue = $util.Long.fromValue(object.integerValue)).unsigned = false;
                    else if (typeof object.integerValue === "string")
                        message.integerValue = parseInt(object.integerValue, 10);
                    else if (typeof object.integerValue === "number")
                        message.integerValue = object.integerValue;
                    else if (typeof object.integerValue === "object")
                        message.integerValue = new $util.LongBits(object.integerValue.low >>> 0, object.integerValue.high >>> 0).toNumber();
                if (object.doubleValue != null)
                    message.doubleValue = Number(object.doubleValue);
                if (object.entityValue != null) {
                    if (typeof object.entityValue !== "object")
                        throw TypeError(".matrix_io.common.Value.entityValue: object expected");
                    message.entityValue = $root.matrix_io.common.Entity.fromObject(object.entityValue);
                }
                if (object.arrayValue != null) {
                    if (typeof object.arrayValue !== "object")
                        throw TypeError(".matrix_io.common.Value.arrayValue: object expected");
                    message.arrayValue = $root.matrix_io.common.ArrayValue.fromObject(object.arrayValue);
                }
                if (object.timestampValue != null) {
                    if (typeof object.timestampValue !== "object")
                        throw TypeError(".matrix_io.common.Value.timestampValue: object expected");
                    message.timestampValue = $root.google.protobuf.Timestamp.fromObject(object.timestampValue);
                }
                if (object.stringValue != null)
                    message.stringValue = String(object.stringValue);
                if (object.blobValue != null)
                    if (typeof object.blobValue === "string")
                        $util.base64.decode(object.blobValue, message.blobValue = $util.newBuffer($util.base64.length(object.blobValue)), 0);
                    else if (object.blobValue.length)
                        message.blobValue = object.blobValue;
                if (object.sizeValue != null) {
                    if (typeof object.sizeValue !== "object")
                        throw TypeError(".matrix_io.common.Value.sizeValue: object expected");
                    message.sizeValue = $root.matrix_io.common.Value.Size.fromObject(object.sizeValue);
                }
                return message;
            };

            /**
             * Creates a plain object from a Value message. Also converts values to other types if specified.
             * @function toObject
             * @memberof matrix_io.common.Value
             * @static
             * @param {matrix_io.common.Value} message Value
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Value.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (message.booleanValue != null && message.hasOwnProperty("booleanValue")) {
                    object.booleanValue = message.booleanValue;
                    if (options.oneofs)
                        object.valueType = "booleanValue";
                }
                if (message.integerValue != null && message.hasOwnProperty("integerValue")) {
                    if (typeof message.integerValue === "number")
                        object.integerValue = options.longs === String ? String(message.integerValue) : message.integerValue;
                    else
                        object.integerValue = options.longs === String ? $util.Long.prototype.toString.call(message.integerValue) : options.longs === Number ? new $util.LongBits(message.integerValue.low >>> 0, message.integerValue.high >>> 0).toNumber() : message.integerValue;
                    if (options.oneofs)
                        object.valueType = "integerValue";
                }
                if (message.doubleValue != null && message.hasOwnProperty("doubleValue")) {
                    object.doubleValue = options.json && !isFinite(message.doubleValue) ? String(message.doubleValue) : message.doubleValue;
                    if (options.oneofs)
                        object.valueType = "doubleValue";
                }
                if (message.entityValue != null && message.hasOwnProperty("entityValue")) {
                    object.entityValue = $root.matrix_io.common.Entity.toObject(message.entityValue, options);
                    if (options.oneofs)
                        object.valueType = "entityValue";
                }
                if (message.arrayValue != null && message.hasOwnProperty("arrayValue")) {
                    object.arrayValue = $root.matrix_io.common.ArrayValue.toObject(message.arrayValue, options);
                    if (options.oneofs)
                        object.valueType = "arrayValue";
                }
                if (message.timestampValue != null && message.hasOwnProperty("timestampValue")) {
                    object.timestampValue = $root.google.protobuf.Timestamp.toObject(message.timestampValue, options);
                    if (options.oneofs)
                        object.valueType = "timestampValue";
                }
                if (message.stringValue != null && message.hasOwnProperty("stringValue")) {
                    object.stringValue = message.stringValue;
                    if (options.oneofs)
                        object.valueType = "stringValue";
                }
                if (message.blobValue != null && message.hasOwnProperty("blobValue")) {
                    object.blobValue = options.bytes === String ? $util.base64.encode(message.blobValue, 0, message.blobValue.length) : options.bytes === Array ? Array.prototype.slice.call(message.blobValue) : message.blobValue;
                    if (options.oneofs)
                        object.valueType = "blobValue";
                }
                if (message.sizeValue != null && message.hasOwnProperty("sizeValue")) {
                    object.sizeValue = $root.matrix_io.common.Value.Size.toObject(message.sizeValue, options);
                    if (options.oneofs)
                        object.valueType = "sizeValue";
                }
                return object;
            };

            /**
             * Converts this Value to JSON.
             * @function toJSON
             * @memberof matrix_io.common.Value
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Value.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            Value.Size = (function() {

                /**
                 * Properties of a Size.
                 * @memberof matrix_io.common.Value
                 * @interface ISize
                 * @property {number|Long|null} [width] Size width
                 * @property {number|Long|null} [height] Size height
                 */

                /**
                 * Constructs a new Size.
                 * @memberof matrix_io.common.Value
                 * @classdesc Represents a Size.
                 * @implements ISize
                 * @constructor
                 * @param {matrix_io.common.Value.ISize=} [properties] Properties to set
                 */
                function Size(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Size width.
                 * @member {number|Long} width
                 * @memberof matrix_io.common.Value.Size
                 * @instance
                 */
                Size.prototype.width = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                /**
                 * Size height.
                 * @member {number|Long} height
                 * @memberof matrix_io.common.Value.Size
                 * @instance
                 */
                Size.prototype.height = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                /**
                 * Creates a new Size instance using the specified properties.
                 * @function create
                 * @memberof matrix_io.common.Value.Size
                 * @static
                 * @param {matrix_io.common.Value.ISize=} [properties] Properties to set
                 * @returns {matrix_io.common.Value.Size} Size instance
                 */
                Size.create = function create(properties) {
                    return new Size(properties);
                };

                /**
                 * Encodes the specified Size message. Does not implicitly {@link matrix_io.common.Value.Size.verify|verify} messages.
                 * @function encode
                 * @memberof matrix_io.common.Value.Size
                 * @static
                 * @param {matrix_io.common.Value.ISize} message Size message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Size.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.width != null && message.hasOwnProperty("width"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.width);
                    if (message.height != null && message.hasOwnProperty("height"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int64(message.height);
                    return writer;
                };

                /**
                 * Encodes the specified Size message, length delimited. Does not implicitly {@link matrix_io.common.Value.Size.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof matrix_io.common.Value.Size
                 * @static
                 * @param {matrix_io.common.Value.ISize} message Size message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Size.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a Size message from the specified reader or buffer.
                 * @function decode
                 * @memberof matrix_io.common.Value.Size
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {matrix_io.common.Value.Size} Size
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Size.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.common.Value.Size();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.width = reader.int64();
                            break;
                        case 2:
                            message.height = reader.int64();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a Size message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof matrix_io.common.Value.Size
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {matrix_io.common.Value.Size} Size
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Size.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a Size message.
                 * @function verify
                 * @memberof matrix_io.common.Value.Size
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Size.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.width != null && message.hasOwnProperty("width"))
                        if (!$util.isInteger(message.width) && !(message.width && $util.isInteger(message.width.low) && $util.isInteger(message.width.high)))
                            return "width: integer|Long expected";
                    if (message.height != null && message.hasOwnProperty("height"))
                        if (!$util.isInteger(message.height) && !(message.height && $util.isInteger(message.height.low) && $util.isInteger(message.height.high)))
                            return "height: integer|Long expected";
                    return null;
                };

                /**
                 * Creates a Size message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof matrix_io.common.Value.Size
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {matrix_io.common.Value.Size} Size
                 */
                Size.fromObject = function fromObject(object) {
                    if (object instanceof $root.matrix_io.common.Value.Size)
                        return object;
                    var message = new $root.matrix_io.common.Value.Size();
                    if (object.width != null)
                        if ($util.Long)
                            (message.width = $util.Long.fromValue(object.width)).unsigned = false;
                        else if (typeof object.width === "string")
                            message.width = parseInt(object.width, 10);
                        else if (typeof object.width === "number")
                            message.width = object.width;
                        else if (typeof object.width === "object")
                            message.width = new $util.LongBits(object.width.low >>> 0, object.width.high >>> 0).toNumber();
                    if (object.height != null)
                        if ($util.Long)
                            (message.height = $util.Long.fromValue(object.height)).unsigned = false;
                        else if (typeof object.height === "string")
                            message.height = parseInt(object.height, 10);
                        else if (typeof object.height === "number")
                            message.height = object.height;
                        else if (typeof object.height === "object")
                            message.height = new $util.LongBits(object.height.low >>> 0, object.height.high >>> 0).toNumber();
                    return message;
                };

                /**
                 * Creates a plain object from a Size message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof matrix_io.common.Value.Size
                 * @static
                 * @param {matrix_io.common.Value.Size} message Size
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Size.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.width = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.width = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.height = options.longs === String ? "0" : 0;
                    }
                    if (message.width != null && message.hasOwnProperty("width"))
                        if (typeof message.width === "number")
                            object.width = options.longs === String ? String(message.width) : message.width;
                        else
                            object.width = options.longs === String ? $util.Long.prototype.toString.call(message.width) : options.longs === Number ? new $util.LongBits(message.width.low >>> 0, message.width.high >>> 0).toNumber() : message.width;
                    if (message.height != null && message.hasOwnProperty("height"))
                        if (typeof message.height === "number")
                            object.height = options.longs === String ? String(message.height) : message.height;
                        else
                            object.height = options.longs === String ? $util.Long.prototype.toString.call(message.height) : options.longs === Number ? new $util.LongBits(message.height.low >>> 0, message.height.high >>> 0).toNumber() : message.height;
                    return object;
                };

                /**
                 * Converts this Size to JSON.
                 * @function toJSON
                 * @memberof matrix_io.common.Value.Size
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Size.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return Size;
            })();

            return Value;
        })();

        common.Entity = (function() {

            /**
             * Properties of an Entity.
             * @memberof matrix_io.common
             * @interface IEntity
             * @property {Object.<string,matrix_io.common.IValue>|null} [properties] Entity properties
             */

            /**
             * Constructs a new Entity.
             * @memberof matrix_io.common
             * @classdesc Represents an Entity.
             * @implements IEntity
             * @constructor
             * @param {matrix_io.common.IEntity=} [properties] Properties to set
             */
            function Entity(properties) {
                this.properties = {};
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Entity properties.
             * @member {Object.<string,matrix_io.common.IValue>} properties
             * @memberof matrix_io.common.Entity
             * @instance
             */
            Entity.prototype.properties = $util.emptyObject;

            /**
             * Creates a new Entity instance using the specified properties.
             * @function create
             * @memberof matrix_io.common.Entity
             * @static
             * @param {matrix_io.common.IEntity=} [properties] Properties to set
             * @returns {matrix_io.common.Entity} Entity instance
             */
            Entity.create = function create(properties) {
                return new Entity(properties);
            };

            /**
             * Encodes the specified Entity message. Does not implicitly {@link matrix_io.common.Entity.verify|verify} messages.
             * @function encode
             * @memberof matrix_io.common.Entity
             * @static
             * @param {matrix_io.common.IEntity} message Entity message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Entity.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.properties != null && message.hasOwnProperty("properties"))
                    for (var keys = Object.keys(message.properties), i = 0; i < keys.length; ++i) {
                        writer.uint32(/* id 1, wireType 2 =*/10).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);
                        $root.matrix_io.common.Value.encode(message.properties[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();
                    }
                return writer;
            };

            /**
             * Encodes the specified Entity message, length delimited. Does not implicitly {@link matrix_io.common.Entity.verify|verify} messages.
             * @function encodeDelimited
             * @memberof matrix_io.common.Entity
             * @static
             * @param {matrix_io.common.IEntity} message Entity message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Entity.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an Entity message from the specified reader or buffer.
             * @function decode
             * @memberof matrix_io.common.Entity
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {matrix_io.common.Entity} Entity
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Entity.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.common.Entity(), key;
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        reader.skip().pos++;
                        if (message.properties === $util.emptyObject)
                            message.properties = {};
                        key = reader.string();
                        reader.pos++;
                        message.properties[key] = $root.matrix_io.common.Value.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an Entity message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof matrix_io.common.Entity
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {matrix_io.common.Entity} Entity
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Entity.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an Entity message.
             * @function verify
             * @memberof matrix_io.common.Entity
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Entity.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.properties != null && message.hasOwnProperty("properties")) {
                    if (!$util.isObject(message.properties))
                        return "properties: object expected";
                    var key = Object.keys(message.properties);
                    for (var i = 0; i < key.length; ++i) {
                        var error = $root.matrix_io.common.Value.verify(message.properties[key[i]]);
                        if (error)
                            return "properties." + error;
                    }
                }
                return null;
            };

            /**
             * Creates an Entity message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof matrix_io.common.Entity
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {matrix_io.common.Entity} Entity
             */
            Entity.fromObject = function fromObject(object) {
                if (object instanceof $root.matrix_io.common.Entity)
                    return object;
                var message = new $root.matrix_io.common.Entity();
                if (object.properties) {
                    if (typeof object.properties !== "object")
                        throw TypeError(".matrix_io.common.Entity.properties: object expected");
                    message.properties = {};
                    for (var keys = Object.keys(object.properties), i = 0; i < keys.length; ++i) {
                        if (typeof object.properties[keys[i]] !== "object")
                            throw TypeError(".matrix_io.common.Entity.properties: object expected");
                        message.properties[keys[i]] = $root.matrix_io.common.Value.fromObject(object.properties[keys[i]]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from an Entity message. Also converts values to other types if specified.
             * @function toObject
             * @memberof matrix_io.common.Entity
             * @static
             * @param {matrix_io.common.Entity} message Entity
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Entity.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.objects || options.defaults)
                    object.properties = {};
                var keys2;
                if (message.properties && (keys2 = Object.keys(message.properties)).length) {
                    object.properties = {};
                    for (var j = 0; j < keys2.length; ++j)
                        object.properties[keys2[j]] = $root.matrix_io.common.Value.toObject(message.properties[keys2[j]], options);
                }
                return object;
            };

            /**
             * Converts this Entity to JSON.
             * @function toJSON
             * @memberof matrix_io.common.Entity
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Entity.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Entity;
        })();

        return common;
    })();

    matrix_io.malos = (function() {

        /**
         * Namespace malos.
         * @memberof matrix_io
         * @namespace
         */
        var malos = {};

        malos.v1 = (function() {

            /**
             * Namespace v1.
             * @memberof matrix_io.malos
             * @namespace
             */
            var v1 = {};

            v1.comm = (function() {

                /**
                 * Namespace comm.
                 * @memberof matrix_io.malos.v1
                 * @namespace
                 */
                var comm = {};

                /**
                 * ZWaveClassType enum.
                 * @name matrix_io.malos.v1.comm.ZWaveClassType
                 * @enum {string}
                 * @property {number} COMMAND_CLASS_NO_OPERATION=0 COMMAND_CLASS_NO_OPERATION value
                 * @property {number} ZWAVE_CMD_CLASS=1 ZWAVE_CMD_CLASS value
                 * @property {number} COMMAND_CLASS_ZENSOR_NET=2 COMMAND_CLASS_ZENSOR_NET value
                 * @property {number} COMMAND_CLASS_BASIC=32 COMMAND_CLASS_BASIC value
                 * @property {number} COMMAND_CLASS_CONTROLLER_REPLICATION=33 COMMAND_CLASS_CONTROLLER_REPLICATION value
                 * @property {number} COMMAND_CLASS_APPLICATION_STATUS=34 COMMAND_CLASS_APPLICATION_STATUS value
                 * @property {number} COMMAND_CLASS_ZIP=35 COMMAND_CLASS_ZIP value
                 * @property {number} COMMAND_CLASS_SECURITY_PANEL_MODE=36 COMMAND_CLASS_SECURITY_PANEL_MODE value
                 * @property {number} COMMAND_CLASS_SWITCH_BINARY=37 COMMAND_CLASS_SWITCH_BINARY value
                 * @property {number} COMMAND_CLASS_SWITCH_MULTILEVEL=38 COMMAND_CLASS_SWITCH_MULTILEVEL value
                 * @property {number} COMMAND_CLASS_SWITCH_ALL=39 COMMAND_CLASS_SWITCH_ALL value
                 * @property {number} COMMAND_CLASS_SWITCH_TOGGLE_BINARY=40 COMMAND_CLASS_SWITCH_TOGGLE_BINARY value
                 * @property {number} COMMAND_CLASS_SWITCH_TOGGLE_MULTILEVEL=41 COMMAND_CLASS_SWITCH_TOGGLE_MULTILEVEL value
                 * @property {number} COMMAND_CLASS_CHIMNEY_FAN=42 COMMAND_CLASS_CHIMNEY_FAN value
                 * @property {number} COMMAND_CLASS_SCENE_ACTIVATION=43 COMMAND_CLASS_SCENE_ACTIVATION value
                 * @property {number} COMMAND_CLASS_SCENE_ACTUATOR_CONF=44 COMMAND_CLASS_SCENE_ACTUATOR_CONF value
                 * @property {number} COMMAND_CLASS_SCENE_CONTROLLER_CONF=45 COMMAND_CLASS_SCENE_CONTROLLER_CONF value
                 * @property {number} COMMAND_CLASS_SECURITY_PANEL_ZONE=46 COMMAND_CLASS_SECURITY_PANEL_ZONE value
                 * @property {number} COMMAND_CLASS_SECURITY_PANEL_ZONE_SENSOR=47 COMMAND_CLASS_SECURITY_PANEL_ZONE_SENSOR value
                 * @property {number} COMMAND_CLASS_SENSOR_BINARY=48 COMMAND_CLASS_SENSOR_BINARY value
                 * @property {number} COMMAND_CLASS_SENSOR_MULTILEVEL=49 COMMAND_CLASS_SENSOR_MULTILEVEL value
                 * @property {number} COMMAND_CLASS_METER=50 COMMAND_CLASS_METER value
                 * @property {number} COMMAND_CLASS_SWITCH_COLOR=51 COMMAND_CLASS_SWITCH_COLOR value
                 * @property {number} COMMAND_CLASS_NETWORK_MANAGEMENT_INCLUSION=52 COMMAND_CLASS_NETWORK_MANAGEMENT_INCLUSION value
                 * @property {number} COMMAND_CLASS_METER_PULSE=53 COMMAND_CLASS_METER_PULSE value
                 * @property {number} COMMAND_CLASS_BASIC_TARIFF_INFO=54 COMMAND_CLASS_BASIC_TARIFF_INFO value
                 * @property {number} COMMAND_CLASS_HRV_STATUS=55 COMMAND_CLASS_HRV_STATUS value
                 * @property {number} COMMAND_CLASS_THERMOSTAT_HEATING=56 COMMAND_CLASS_THERMOSTAT_HEATING value
                 * @property {number} COMMAND_CLASS_HRV_CONTROL=57 COMMAND_CLASS_HRV_CONTROL value
                 * @property {number} COMMAND_CLASS_DCP_CONFIG=58 COMMAND_CLASS_DCP_CONFIG value
                 * @property {number} COMMAND_CLASS_DCP_MONITOR=59 COMMAND_CLASS_DCP_MONITOR value
                 * @property {number} COMMAND_CLASS_METER_TBL_CONFIG=60 COMMAND_CLASS_METER_TBL_CONFIG value
                 * @property {number} COMMAND_CLASS_METER_TBL_MONITOR=61 COMMAND_CLASS_METER_TBL_MONITOR value
                 * @property {number} COMMAND_CLASS_METER_TBL_PUSH=62 COMMAND_CLASS_METER_TBL_PUSH value
                 * @property {number} COMMAND_CLASS_PREPAYMENT=63 COMMAND_CLASS_PREPAYMENT value
                 * @property {number} COMMAND_CLASS_THERMOSTAT_MODE=64 COMMAND_CLASS_THERMOSTAT_MODE value
                 * @property {number} COMMAND_CLASS_PREPAYMENT_ENCAPSULATION=65 COMMAND_CLASS_PREPAYMENT_ENCAPSULATION value
                 * @property {number} COMMAND_CLASS_THERMOSTAT_OPERATING_STATE=66 COMMAND_CLASS_THERMOSTAT_OPERATING_STATE value
                 * @property {number} COMMAND_CLASS_THERMOSTAT_SETPOINT=67 COMMAND_CLASS_THERMOSTAT_SETPOINT value
                 * @property {number} COMMAND_CLASS_THERMOSTAT_FAN_MODE=68 COMMAND_CLASS_THERMOSTAT_FAN_MODE value
                 * @property {number} COMMAND_CLASS_THERMOSTAT_FAN_STATE=69 COMMAND_CLASS_THERMOSTAT_FAN_STATE value
                 * @property {number} COMMAND_CLASS_CLIMATE_CONTROL_SCHEDULE=70 COMMAND_CLASS_CLIMATE_CONTROL_SCHEDULE value
                 * @property {number} COMMAND_CLASS_THERMOSTAT_SETBACK=71 COMMAND_CLASS_THERMOSTAT_SETBACK value
                 * @property {number} COMMAND_CLASS_RATE_TBL_CONFIG=72 COMMAND_CLASS_RATE_TBL_CONFIG value
                 * @property {number} COMMAND_CLASS_RATE_TBL_MONITOR=73 COMMAND_CLASS_RATE_TBL_MONITOR value
                 * @property {number} COMMAND_CLASS_TARIFF_CONFIG=74 COMMAND_CLASS_TARIFF_CONFIG value
                 * @property {number} COMMAND_CLASS_TARIFF_TBL_MONITOR=75 COMMAND_CLASS_TARIFF_TBL_MONITOR value
                 * @property {number} COMMAND_CLASS_DOOR_LOCK_LOGGING=76 COMMAND_CLASS_DOOR_LOCK_LOGGING value
                 * @property {number} COMMAND_CLASS_NETWORK_MANAGEMENT_BASIC=77 COMMAND_CLASS_NETWORK_MANAGEMENT_BASIC value
                 * @property {number} COMMAND_CLASS_SCHEDULE_ENTRY_LOCK=78 COMMAND_CLASS_SCHEDULE_ENTRY_LOCK value
                 * @property {number} COMMAND_CLASS_ZIP_6LOWPAN=79 COMMAND_CLASS_ZIP_6LOWPAN value
                 * @property {number} COMMAND_CLASS_BASIC_WINDOW_COVERING=80 COMMAND_CLASS_BASIC_WINDOW_COVERING value
                 * @property {number} COMMAND_CLASS_MTP_WINDOW_COVERING=81 COMMAND_CLASS_MTP_WINDOW_COVERING value
                 * @property {number} COMMAND_CLASS_NETWORK_MANAGEMENT_PROXY=82 COMMAND_CLASS_NETWORK_MANAGEMENT_PROXY value
                 * @property {number} COMMAND_CLASS_SCHEDULE=83 COMMAND_CLASS_SCHEDULE value
                 * @property {number} COMMAND_CLASS_NETWORK_MANAGEMENT_PRIMARY=84 COMMAND_CLASS_NETWORK_MANAGEMENT_PRIMARY value
                 * @property {number} COMMAND_CLASS_TRANSPORT_SERVICE=85 COMMAND_CLASS_TRANSPORT_SERVICE value
                 * @property {number} COMMAND_CLASS_CRC_16_ENCAP=86 COMMAND_CLASS_CRC_16_ENCAP value
                 * @property {number} COMMAND_CLASS_APPLICATION_CAPABILITY=87 COMMAND_CLASS_APPLICATION_CAPABILITY value
                 * @property {number} COMMAND_CLASS_ZIP_ND=88 COMMAND_CLASS_ZIP_ND value
                 * @property {number} COMMAND_CLASS_ASSOCIATION_GRP_INFO=89 COMMAND_CLASS_ASSOCIATION_GRP_INFO value
                 * @property {number} COMMAND_CLASS_DEVICE_RESET_LOCALLY=90 COMMAND_CLASS_DEVICE_RESET_LOCALLY value
                 * @property {number} COMMAND_CLASS_CENTRAL_SCENE=91 COMMAND_CLASS_CENTRAL_SCENE value
                 * @property {number} COMMAND_CLASS_IP_ASSOCIATION=92 COMMAND_CLASS_IP_ASSOCIATION value
                 * @property {number} COMMAND_CLASS_ANTITHEFT=93 COMMAND_CLASS_ANTITHEFT value
                 * @property {number} COMMAND_CLASS_ZWAVEPLUS_INFO=94 COMMAND_CLASS_ZWAVEPLUS_INFO value
                 * @property {number} COMMAND_CLASS_ZIP_GATEWAY=95 COMMAND_CLASS_ZIP_GATEWAY value
                 * @property {number} COMMAND_CLASS_MULTI_CHANNEL=96 COMMAND_CLASS_MULTI_CHANNEL value
                 * @property {number} COMMAND_CLASS_MULTI_INSTANCE=96 COMMAND_CLASS_MULTI_INSTANCE value
                 * @property {number} COMMAND_CLASS_ZIP_PORTAL=97 COMMAND_CLASS_ZIP_PORTAL value
                 * @property {number} COMMAND_CLASS_DOOR_LOCK=98 COMMAND_CLASS_DOOR_LOCK value
                 * @property {number} COMMAND_CLASS_USER_CODE=99 COMMAND_CLASS_USER_CODE value
                 * @property {number} COMMAND_CLASS_HUMIDITY_CONTROL_SETPOINT=100 COMMAND_CLASS_HUMIDITY_CONTROL_SETPOINT value
                 * @property {number} COMMAND_CLASS_DMX=101 COMMAND_CLASS_DMX value
                 * @property {number} COMMAND_CLASS_BARRIER_OPERATOR=102 COMMAND_CLASS_BARRIER_OPERATOR value
                 * @property {number} COMMAND_CLASS_NETWORK_MANAGEMENT_INSTALLATION_MAINTENANCE=103 COMMAND_CLASS_NETWORK_MANAGEMENT_INSTALLATION_MAINTENANCE value
                 * @property {number} COMMAND_CLASS_ZIP_NAMING=104 COMMAND_CLASS_ZIP_NAMING value
                 * @property {number} COMMAND_CLASS_MAILBOX=105 COMMAND_CLASS_MAILBOX value
                 * @property {number} COMMAND_CLASS_WINDOW_COVERING=106 COMMAND_CLASS_WINDOW_COVERING value
                 * @property {number} COMMAND_CLASS_IRRIGATION=107 COMMAND_CLASS_IRRIGATION value
                 * @property {number} COMMAND_CLASS_SUPERVISION=108 COMMAND_CLASS_SUPERVISION value
                 * @property {number} COMMAND_CLASS_HUMIDITY_CONTROL_MODE=109 COMMAND_CLASS_HUMIDITY_CONTROL_MODE value
                 * @property {number} COMMAND_CLASS_HUMIDITY_CONTROL_OPERATING_STATE=110 COMMAND_CLASS_HUMIDITY_CONTROL_OPERATING_STATE value
                 * @property {number} COMMAND_CLASS_ENTRY_CONTROL=111 COMMAND_CLASS_ENTRY_CONTROL value
                 * @property {number} COMMAND_CLASS_CONFIGURATION=112 COMMAND_CLASS_CONFIGURATION value
                 * @property {number} COMMAND_CLASS_ALARM=113 COMMAND_CLASS_ALARM value
                 * @property {number} COMMAND_CLASS_NOTIFICATION=113 COMMAND_CLASS_NOTIFICATION value
                 * @property {number} COMMAND_CLASS_MANUFACTURER_SPECIFIC=114 COMMAND_CLASS_MANUFACTURER_SPECIFIC value
                 * @property {number} COMMAND_CLASS_POWERLEVEL=115 COMMAND_CLASS_POWERLEVEL value
                 * @property {number} COMMAND_CLASS_INCLUSION_CONTROLLER=116 COMMAND_CLASS_INCLUSION_CONTROLLER value
                 * @property {number} COMMAND_CLASS_PROTECTION=117 COMMAND_CLASS_PROTECTION value
                 * @property {number} COMMAND_CLASS_LOCK=118 COMMAND_CLASS_LOCK value
                 * @property {number} COMMAND_CLASS_NODE_NAMING=119 COMMAND_CLASS_NODE_NAMING value
                 * @property {number} COMMAND_CLASS_FIRMWARE_UPDATE_MD=122 COMMAND_CLASS_FIRMWARE_UPDATE_MD value
                 * @property {number} COMMAND_CLASS_GROUPING_NAME=123 COMMAND_CLASS_GROUPING_NAME value
                 * @property {number} COMMAND_CLASS_REMOTE_ASSOCIATION_ACTIVATE=124 COMMAND_CLASS_REMOTE_ASSOCIATION_ACTIVATE value
                 * @property {number} COMMAND_CLASS_REMOTE_ASSOCIATION=125 COMMAND_CLASS_REMOTE_ASSOCIATION value
                 * @property {number} COMMAND_CLASS_BATTERY=128 COMMAND_CLASS_BATTERY value
                 * @property {number} COMMAND_CLASS_CLOCK=129 COMMAND_CLASS_CLOCK value
                 * @property {number} COMMAND_CLASS_HAIL=130 COMMAND_CLASS_HAIL value
                 * @property {number} COMMAND_CLASS_WAKE_UP=132 COMMAND_CLASS_WAKE_UP value
                 * @property {number} COMMAND_CLASS_ASSOCIATION=133 COMMAND_CLASS_ASSOCIATION value
                 * @property {number} COMMAND_CLASS_VERSION=134 COMMAND_CLASS_VERSION value
                 * @property {number} COMMAND_CLASS_INDICATOR=135 COMMAND_CLASS_INDICATOR value
                 * @property {number} COMMAND_CLASS_PROPRIETARY=136 COMMAND_CLASS_PROPRIETARY value
                 * @property {number} COMMAND_CLASS_LANGUAGE=137 COMMAND_CLASS_LANGUAGE value
                 * @property {number} COMMAND_CLASS_TIME=138 COMMAND_CLASS_TIME value
                 * @property {number} COMMAND_CLASS_TIME_PARAMETERS=139 COMMAND_CLASS_TIME_PARAMETERS value
                 * @property {number} COMMAND_CLASS_GEOGRAPHIC_LOCATION=140 COMMAND_CLASS_GEOGRAPHIC_LOCATION value
                 * @property {number} COMMAND_CLASS_MULTI_CHANNEL_ASSOCIATION=142 COMMAND_CLASS_MULTI_CHANNEL_ASSOCIATION value
                 * @property {number} COMMAND_CLASS_MULTI_INSTANCE_ASSOCIATION=142 COMMAND_CLASS_MULTI_INSTANCE_ASSOCIATION value
                 * @property {number} COMMAND_CLASS_MULTI_CMD=143 COMMAND_CLASS_MULTI_CMD value
                 * @property {number} COMMAND_CLASS_ENERGY_PRODUCTION=144 COMMAND_CLASS_ENERGY_PRODUCTION value
                 * @property {number} COMMAND_CLASS_MANUFACTURER_PROPRIETARY=145 COMMAND_CLASS_MANUFACTURER_PROPRIETARY value
                 * @property {number} COMMAND_CLASS_SCREEN_MD=146 COMMAND_CLASS_SCREEN_MD value
                 * @property {number} COMMAND_CLASS_SCREEN_ATTRIBUTES=147 COMMAND_CLASS_SCREEN_ATTRIBUTES value
                 * @property {number} COMMAND_CLASS_SIMPLE_AV_CONTROL=148 COMMAND_CLASS_SIMPLE_AV_CONTROL value
                 * @property {number} COMMAND_CLASS_AV_CONTENT_DIRECTORY_MD=149 COMMAND_CLASS_AV_CONTENT_DIRECTORY_MD value
                 * @property {number} COMMAND_CLASS_AV_RENDERER_STATUS=150 COMMAND_CLASS_AV_RENDERER_STATUS value
                 * @property {number} COMMAND_CLASS_AV_CONTENT_SEARCH_MD=151 COMMAND_CLASS_AV_CONTENT_SEARCH_MD value
                 * @property {number} COMMAND_CLASS_SECURITY=152 COMMAND_CLASS_SECURITY value
                 * @property {number} COMMAND_CLASS_AV_TAGGING_MD=153 COMMAND_CLASS_AV_TAGGING_MD value
                 * @property {number} COMMAND_CLASS_IP_CONFIGURATION=154 COMMAND_CLASS_IP_CONFIGURATION value
                 * @property {number} COMMAND_CLASS_ASSOCIATION_COMMAND_CONFIGURATION=155 COMMAND_CLASS_ASSOCIATION_COMMAND_CONFIGURATION value
                 * @property {number} COMMAND_CLASS_SENSOR_ALARM=156 COMMAND_CLASS_SENSOR_ALARM value
                 * @property {number} COMMAND_CLASS_SILENCE_ALARM=157 COMMAND_CLASS_SILENCE_ALARM value
                 * @property {number} COMMAND_CLASS_SENSOR_CONFIGURATION=158 COMMAND_CLASS_SENSOR_CONFIGURATION value
                 * @property {number} COMMAND_CLASS_SECURITY_2=159 COMMAND_CLASS_SECURITY_2 value
                 * @property {number} COMMAND_CLASS_MARK=239 COMMAND_CLASS_MARK value
                 * @property {number} COMMAND_CLASS_NON_INTEROPERABLE=240 COMMAND_CLASS_NON_INTEROPERABLE value
                 */
                comm.ZWaveClassType = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "COMMAND_CLASS_NO_OPERATION"] = 0;
                    values[valuesById[1] = "ZWAVE_CMD_CLASS"] = 1;
                    values[valuesById[2] = "COMMAND_CLASS_ZENSOR_NET"] = 2;
                    values[valuesById[32] = "COMMAND_CLASS_BASIC"] = 32;
                    values[valuesById[33] = "COMMAND_CLASS_CONTROLLER_REPLICATION"] = 33;
                    values[valuesById[34] = "COMMAND_CLASS_APPLICATION_STATUS"] = 34;
                    values[valuesById[35] = "COMMAND_CLASS_ZIP"] = 35;
                    values[valuesById[36] = "COMMAND_CLASS_SECURITY_PANEL_MODE"] = 36;
                    values[valuesById[37] = "COMMAND_CLASS_SWITCH_BINARY"] = 37;
                    values[valuesById[38] = "COMMAND_CLASS_SWITCH_MULTILEVEL"] = 38;
                    values[valuesById[39] = "COMMAND_CLASS_SWITCH_ALL"] = 39;
                    values[valuesById[40] = "COMMAND_CLASS_SWITCH_TOGGLE_BINARY"] = 40;
                    values[valuesById[41] = "COMMAND_CLASS_SWITCH_TOGGLE_MULTILEVEL"] = 41;
                    values[valuesById[42] = "COMMAND_CLASS_CHIMNEY_FAN"] = 42;
                    values[valuesById[43] = "COMMAND_CLASS_SCENE_ACTIVATION"] = 43;
                    values[valuesById[44] = "COMMAND_CLASS_SCENE_ACTUATOR_CONF"] = 44;
                    values[valuesById[45] = "COMMAND_CLASS_SCENE_CONTROLLER_CONF"] = 45;
                    values[valuesById[46] = "COMMAND_CLASS_SECURITY_PANEL_ZONE"] = 46;
                    values[valuesById[47] = "COMMAND_CLASS_SECURITY_PANEL_ZONE_SENSOR"] = 47;
                    values[valuesById[48] = "COMMAND_CLASS_SENSOR_BINARY"] = 48;
                    values[valuesById[49] = "COMMAND_CLASS_SENSOR_MULTILEVEL"] = 49;
                    values[valuesById[50] = "COMMAND_CLASS_METER"] = 50;
                    values[valuesById[51] = "COMMAND_CLASS_SWITCH_COLOR"] = 51;
                    values[valuesById[52] = "COMMAND_CLASS_NETWORK_MANAGEMENT_INCLUSION"] = 52;
                    values[valuesById[53] = "COMMAND_CLASS_METER_PULSE"] = 53;
                    values[valuesById[54] = "COMMAND_CLASS_BASIC_TARIFF_INFO"] = 54;
                    values[valuesById[55] = "COMMAND_CLASS_HRV_STATUS"] = 55;
                    values[valuesById[56] = "COMMAND_CLASS_THERMOSTAT_HEATING"] = 56;
                    values[valuesById[57] = "COMMAND_CLASS_HRV_CONTROL"] = 57;
                    values[valuesById[58] = "COMMAND_CLASS_DCP_CONFIG"] = 58;
                    values[valuesById[59] = "COMMAND_CLASS_DCP_MONITOR"] = 59;
                    values[valuesById[60] = "COMMAND_CLASS_METER_TBL_CONFIG"] = 60;
                    values[valuesById[61] = "COMMAND_CLASS_METER_TBL_MONITOR"] = 61;
                    values[valuesById[62] = "COMMAND_CLASS_METER_TBL_PUSH"] = 62;
                    values[valuesById[63] = "COMMAND_CLASS_PREPAYMENT"] = 63;
                    values[valuesById[64] = "COMMAND_CLASS_THERMOSTAT_MODE"] = 64;
                    values[valuesById[65] = "COMMAND_CLASS_PREPAYMENT_ENCAPSULATION"] = 65;
                    values[valuesById[66] = "COMMAND_CLASS_THERMOSTAT_OPERATING_STATE"] = 66;
                    values[valuesById[67] = "COMMAND_CLASS_THERMOSTAT_SETPOINT"] = 67;
                    values[valuesById[68] = "COMMAND_CLASS_THERMOSTAT_FAN_MODE"] = 68;
                    values[valuesById[69] = "COMMAND_CLASS_THERMOSTAT_FAN_STATE"] = 69;
                    values[valuesById[70] = "COMMAND_CLASS_CLIMATE_CONTROL_SCHEDULE"] = 70;
                    values[valuesById[71] = "COMMAND_CLASS_THERMOSTAT_SETBACK"] = 71;
                    values[valuesById[72] = "COMMAND_CLASS_RATE_TBL_CONFIG"] = 72;
                    values[valuesById[73] = "COMMAND_CLASS_RATE_TBL_MONITOR"] = 73;
                    values[valuesById[74] = "COMMAND_CLASS_TARIFF_CONFIG"] = 74;
                    values[valuesById[75] = "COMMAND_CLASS_TARIFF_TBL_MONITOR"] = 75;
                    values[valuesById[76] = "COMMAND_CLASS_DOOR_LOCK_LOGGING"] = 76;
                    values[valuesById[77] = "COMMAND_CLASS_NETWORK_MANAGEMENT_BASIC"] = 77;
                    values[valuesById[78] = "COMMAND_CLASS_SCHEDULE_ENTRY_LOCK"] = 78;
                    values[valuesById[79] = "COMMAND_CLASS_ZIP_6LOWPAN"] = 79;
                    values[valuesById[80] = "COMMAND_CLASS_BASIC_WINDOW_COVERING"] = 80;
                    values[valuesById[81] = "COMMAND_CLASS_MTP_WINDOW_COVERING"] = 81;
                    values[valuesById[82] = "COMMAND_CLASS_NETWORK_MANAGEMENT_PROXY"] = 82;
                    values[valuesById[83] = "COMMAND_CLASS_SCHEDULE"] = 83;
                    values[valuesById[84] = "COMMAND_CLASS_NETWORK_MANAGEMENT_PRIMARY"] = 84;
                    values[valuesById[85] = "COMMAND_CLASS_TRANSPORT_SERVICE"] = 85;
                    values[valuesById[86] = "COMMAND_CLASS_CRC_16_ENCAP"] = 86;
                    values[valuesById[87] = "COMMAND_CLASS_APPLICATION_CAPABILITY"] = 87;
                    values[valuesById[88] = "COMMAND_CLASS_ZIP_ND"] = 88;
                    values[valuesById[89] = "COMMAND_CLASS_ASSOCIATION_GRP_INFO"] = 89;
                    values[valuesById[90] = "COMMAND_CLASS_DEVICE_RESET_LOCALLY"] = 90;
                    values[valuesById[91] = "COMMAND_CLASS_CENTRAL_SCENE"] = 91;
                    values[valuesById[92] = "COMMAND_CLASS_IP_ASSOCIATION"] = 92;
                    values[valuesById[93] = "COMMAND_CLASS_ANTITHEFT"] = 93;
                    values[valuesById[94] = "COMMAND_CLASS_ZWAVEPLUS_INFO"] = 94;
                    values[valuesById[95] = "COMMAND_CLASS_ZIP_GATEWAY"] = 95;
                    values[valuesById[96] = "COMMAND_CLASS_MULTI_CHANNEL"] = 96;
                    values["COMMAND_CLASS_MULTI_INSTANCE"] = 96;
                    values[valuesById[97] = "COMMAND_CLASS_ZIP_PORTAL"] = 97;
                    values[valuesById[98] = "COMMAND_CLASS_DOOR_LOCK"] = 98;
                    values[valuesById[99] = "COMMAND_CLASS_USER_CODE"] = 99;
                    values[valuesById[100] = "COMMAND_CLASS_HUMIDITY_CONTROL_SETPOINT"] = 100;
                    values[valuesById[101] = "COMMAND_CLASS_DMX"] = 101;
                    values[valuesById[102] = "COMMAND_CLASS_BARRIER_OPERATOR"] = 102;
                    values[valuesById[103] = "COMMAND_CLASS_NETWORK_MANAGEMENT_INSTALLATION_MAINTENANCE"] = 103;
                    values[valuesById[104] = "COMMAND_CLASS_ZIP_NAMING"] = 104;
                    values[valuesById[105] = "COMMAND_CLASS_MAILBOX"] = 105;
                    values[valuesById[106] = "COMMAND_CLASS_WINDOW_COVERING"] = 106;
                    values[valuesById[107] = "COMMAND_CLASS_IRRIGATION"] = 107;
                    values[valuesById[108] = "COMMAND_CLASS_SUPERVISION"] = 108;
                    values[valuesById[109] = "COMMAND_CLASS_HUMIDITY_CONTROL_MODE"] = 109;
                    values[valuesById[110] = "COMMAND_CLASS_HUMIDITY_CONTROL_OPERATING_STATE"] = 110;
                    values[valuesById[111] = "COMMAND_CLASS_ENTRY_CONTROL"] = 111;
                    values[valuesById[112] = "COMMAND_CLASS_CONFIGURATION"] = 112;
                    values[valuesById[113] = "COMMAND_CLASS_ALARM"] = 113;
                    values["COMMAND_CLASS_NOTIFICATION"] = 113;
                    values[valuesById[114] = "COMMAND_CLASS_MANUFACTURER_SPECIFIC"] = 114;
                    values[valuesById[115] = "COMMAND_CLASS_POWERLEVEL"] = 115;
                    values[valuesById[116] = "COMMAND_CLASS_INCLUSION_CONTROLLER"] = 116;
                    values[valuesById[117] = "COMMAND_CLASS_PROTECTION"] = 117;
                    values[valuesById[118] = "COMMAND_CLASS_LOCK"] = 118;
                    values[valuesById[119] = "COMMAND_CLASS_NODE_NAMING"] = 119;
                    values[valuesById[122] = "COMMAND_CLASS_FIRMWARE_UPDATE_MD"] = 122;
                    values[valuesById[123] = "COMMAND_CLASS_GROUPING_NAME"] = 123;
                    values[valuesById[124] = "COMMAND_CLASS_REMOTE_ASSOCIATION_ACTIVATE"] = 124;
                    values[valuesById[125] = "COMMAND_CLASS_REMOTE_ASSOCIATION"] = 125;
                    values[valuesById[128] = "COMMAND_CLASS_BATTERY"] = 128;
                    values[valuesById[129] = "COMMAND_CLASS_CLOCK"] = 129;
                    values[valuesById[130] = "COMMAND_CLASS_HAIL"] = 130;
                    values[valuesById[132] = "COMMAND_CLASS_WAKE_UP"] = 132;
                    values[valuesById[133] = "COMMAND_CLASS_ASSOCIATION"] = 133;
                    values[valuesById[134] = "COMMAND_CLASS_VERSION"] = 134;
                    values[valuesById[135] = "COMMAND_CLASS_INDICATOR"] = 135;
                    values[valuesById[136] = "COMMAND_CLASS_PROPRIETARY"] = 136;
                    values[valuesById[137] = "COMMAND_CLASS_LANGUAGE"] = 137;
                    values[valuesById[138] = "COMMAND_CLASS_TIME"] = 138;
                    values[valuesById[139] = "COMMAND_CLASS_TIME_PARAMETERS"] = 139;
                    values[valuesById[140] = "COMMAND_CLASS_GEOGRAPHIC_LOCATION"] = 140;
                    values[valuesById[142] = "COMMAND_CLASS_MULTI_CHANNEL_ASSOCIATION"] = 142;
                    values["COMMAND_CLASS_MULTI_INSTANCE_ASSOCIATION"] = 142;
                    values[valuesById[143] = "COMMAND_CLASS_MULTI_CMD"] = 143;
                    values[valuesById[144] = "COMMAND_CLASS_ENERGY_PRODUCTION"] = 144;
                    values[valuesById[145] = "COMMAND_CLASS_MANUFACTURER_PROPRIETARY"] = 145;
                    values[valuesById[146] = "COMMAND_CLASS_SCREEN_MD"] = 146;
                    values[valuesById[147] = "COMMAND_CLASS_SCREEN_ATTRIBUTES"] = 147;
                    values[valuesById[148] = "COMMAND_CLASS_SIMPLE_AV_CONTROL"] = 148;
                    values[valuesById[149] = "COMMAND_CLASS_AV_CONTENT_DIRECTORY_MD"] = 149;
                    values[valuesById[150] = "COMMAND_CLASS_AV_RENDERER_STATUS"] = 150;
                    values[valuesById[151] = "COMMAND_CLASS_AV_CONTENT_SEARCH_MD"] = 151;
                    values[valuesById[152] = "COMMAND_CLASS_SECURITY"] = 152;
                    values[valuesById[153] = "COMMAND_CLASS_AV_TAGGING_MD"] = 153;
                    values[valuesById[154] = "COMMAND_CLASS_IP_CONFIGURATION"] = 154;
                    values[valuesById[155] = "COMMAND_CLASS_ASSOCIATION_COMMAND_CONFIGURATION"] = 155;
                    values[valuesById[156] = "COMMAND_CLASS_SENSOR_ALARM"] = 156;
                    values[valuesById[157] = "COMMAND_CLASS_SILENCE_ALARM"] = 157;
                    values[valuesById[158] = "COMMAND_CLASS_SENSOR_CONFIGURATION"] = 158;
                    values[valuesById[159] = "COMMAND_CLASS_SECURITY_2"] = 159;
                    values[valuesById[239] = "COMMAND_CLASS_MARK"] = 239;
                    values[valuesById[240] = "COMMAND_CLASS_NON_INTEROPERABLE"] = 240;
                    return values;
                })();

                /**
                 * ZWaveCmdType enum.
                 * @name matrix_io.malos.v1.comm.ZWaveCmdType
                 * @enum {string}
                 * @property {number} CMD_UNDEFINED=0 CMD_UNDEFINED value
                 * @property {number} ACCEPT_LOST=1 ACCEPT_LOST value
                 * @property {number} ALARM_GET=2 ALARM_GET value
                 * @property {number} ALARM_REPORT=3 ALARM_REPORT value
                 * @property {number} ANTITHEFT_GET=4 ANTITHEFT_GET value
                 * @property {number} ANTITHEFT_REPORT=5 ANTITHEFT_REPORT value
                 * @property {number} ANTITHEFT_SET=6 ANTITHEFT_SET value
                 * @property {number} APPLICATION_BUSY=7 APPLICATION_BUSY value
                 * @property {number} APPLICATION_REJECTED_REQUEST=8 APPLICATION_REJECTED_REQUEST value
                 * @property {number} ASSIGN_ID=9 ASSIGN_ID value
                 * @property {number} ASSIGN_RETURN_ROUTE=10 ASSIGN_RETURN_ROUTE value
                 * @property {number} ASSIGN_RETURN_ROUTE_PRIORITY=11 ASSIGN_RETURN_ROUTE_PRIORITY value
                 * @property {number} ASSIGN_SUC_RETURN_ROUTE_PRIORITY=12 ASSIGN_SUC_RETURN_ROUTE_PRIORITY value
                 * @property {number} ASSOCIATION_GET=13 ASSOCIATION_GET value
                 * @property {number} ASSOCIATION_GROUPINGS_GET=14 ASSOCIATION_GROUPINGS_GET value
                 * @property {number} ASSOCIATION_GROUPINGS_REPORT=15 ASSOCIATION_GROUPINGS_REPORT value
                 * @property {number} ASSOCIATION_GROUP_COMMAND_LIST_GET=16 ASSOCIATION_GROUP_COMMAND_LIST_GET value
                 * @property {number} ASSOCIATION_GROUP_COMMAND_LIST_REPORT=17 ASSOCIATION_GROUP_COMMAND_LIST_REPORT value
                 * @property {number} ASSOCIATION_GROUP_INFO_GET=18 ASSOCIATION_GROUP_INFO_GET value
                 * @property {number} ASSOCIATION_GROUP_INFO_REPORT=19 ASSOCIATION_GROUP_INFO_REPORT value
                 * @property {number} ASSOCIATION_GROUP_NAME_GET=20 ASSOCIATION_GROUP_NAME_GET value
                 * @property {number} ASSOCIATION_GROUP_NAME_REPORT=21 ASSOCIATION_GROUP_NAME_REPORT value
                 * @property {number} ASSOCIATION_REMOVE=22 ASSOCIATION_REMOVE value
                 * @property {number} ASSOCIATION_REPORT=23 ASSOCIATION_REPORT value
                 * @property {number} ASSOCIATION_SET=24 ASSOCIATION_SET value
                 * @property {number} AV_CONTENT_BROWSE_MD_BY_LETTER_GET=25 AV_CONTENT_BROWSE_MD_BY_LETTER_GET value
                 * @property {number} AV_CONTENT_BROWSE_MD_BY_LETTER_REPORT=26 AV_CONTENT_BROWSE_MD_BY_LETTER_REPORT value
                 * @property {number} AV_CONTENT_BROWSE_MD_CHILD_COUNT_GET=27 AV_CONTENT_BROWSE_MD_CHILD_COUNT_GET value
                 * @property {number} AV_CONTENT_BROWSE_MD_CHILD_COUNT_REPORT=28 AV_CONTENT_BROWSE_MD_CHILD_COUNT_REPORT value
                 * @property {number} AV_CONTENT_BROWSE_MD_GET=29 AV_CONTENT_BROWSE_MD_GET value
                 * @property {number} AV_CONTENT_BROWSE_MD_REPORT=30 AV_CONTENT_BROWSE_MD_REPORT value
                 * @property {number} AV_CONTENT_SEARCH_MD_GET=31 AV_CONTENT_SEARCH_MD_GET value
                 * @property {number} AV_CONTENT_SEARCH_MD_REPORT=32 AV_CONTENT_SEARCH_MD_REPORT value
                 * @property {number} AV_MATCH_ITEM_TO_RENDERER_MD_GET=33 AV_MATCH_ITEM_TO_RENDERER_MD_GET value
                 * @property {number} AV_MATCH_ITEM_TO_RENDERER_MD_REPORT=34 AV_MATCH_ITEM_TO_RENDERER_MD_REPORT value
                 * @property {number} AV_RENDERER_STATUS_GET=35 AV_RENDERER_STATUS_GET value
                 * @property {number} AV_RENDERER_STATUS_REPORT=36 AV_RENDERER_STATUS_REPORT value
                 * @property {number} AV_TAGGING_MD_GET=37 AV_TAGGING_MD_GET value
                 * @property {number} AV_TAGGING_MD_REPORT=38 AV_TAGGING_MD_REPORT value
                 * @property {number} BARRIER_OPERATOR_GET=39 BARRIER_OPERATOR_GET value
                 * @property {number} BARRIER_OPERATOR_REPORT=40 BARRIER_OPERATOR_REPORT value
                 * @property {number} BARRIER_OPERATOR_SET=41 BARRIER_OPERATOR_SET value
                 * @property {number} BARRIER_OPERATOR_SIGNAL_GET=42 BARRIER_OPERATOR_SIGNAL_GET value
                 * @property {number} BARRIER_OPERATOR_SIGNAL_REPORT=43 BARRIER_OPERATOR_SIGNAL_REPORT value
                 * @property {number} BARRIER_OPERATOR_SIGNAL_SET=44 BARRIER_OPERATOR_SIGNAL_SET value
                 * @property {number} BARRIER_OPERATOR_SIGNAL_SUPPORTED_GET=45 BARRIER_OPERATOR_SIGNAL_SUPPORTED_GET value
                 * @property {number} BARRIER_OPERATOR_SIGNAL_SUPPORTED_REPORT=46 BARRIER_OPERATOR_SIGNAL_SUPPORTED_REPORT value
                 * @property {number} BASIC_GET=47 BASIC_GET value
                 * @property {number} BASIC_REPORT=48 BASIC_REPORT value
                 * @property {number} BASIC_SET=49 BASIC_SET value
                 * @property {number} BASIC_TARIFF_INFO_GET=50 BASIC_TARIFF_INFO_GET value
                 * @property {number} BASIC_TARIFF_INFO_REPORT=51 BASIC_TARIFF_INFO_REPORT value
                 * @property {number} BASIC_WINDOW_COVERING_START_LEVEL_CHANGE=52 BASIC_WINDOW_COVERING_START_LEVEL_CHANGE value
                 * @property {number} BASIC_WINDOW_COVERING_STOP_LEVEL_CHANGE=53 BASIC_WINDOW_COVERING_STOP_LEVEL_CHANGE value
                 * @property {number} BATTERY_GET=54 BATTERY_GET value
                 * @property {number} BATTERY_REPORT=55 BATTERY_REPORT value
                 * @property {number} BIND_ACCEPT=56 BIND_ACCEPT value
                 * @property {number} BIND_COMPLETE=57 BIND_COMPLETE value
                 * @property {number} BIND_REQUEST=58 BIND_REQUEST value
                 * @property {number} CENTRAL_SCENE_NOTIFICATION=59 CENTRAL_SCENE_NOTIFICATION value
                 * @property {number} CENTRAL_SCENE_SUPPORTED_GET=60 CENTRAL_SCENE_SUPPORTED_GET value
                 * @property {number} CENTRAL_SCENE_SUPPORTED_REPORT=61 CENTRAL_SCENE_SUPPORTED_REPORT value
                 * @property {number} CHIMNEY_FAN_ALARM_LOG_GET=62 CHIMNEY_FAN_ALARM_LOG_GET value
                 * @property {number} CHIMNEY_FAN_ALARM_LOG_REPORT=63 CHIMNEY_FAN_ALARM_LOG_REPORT value
                 * @property {number} CHIMNEY_FAN_ALARM_LOG_SET=64 CHIMNEY_FAN_ALARM_LOG_SET value
                 * @property {number} CHIMNEY_FAN_ALARM_STATUS_GET=65 CHIMNEY_FAN_ALARM_STATUS_GET value
                 * @property {number} CHIMNEY_FAN_ALARM_STATUS_REPORT=66 CHIMNEY_FAN_ALARM_STATUS_REPORT value
                 * @property {number} CHIMNEY_FAN_ALARM_STATUS_SET=67 CHIMNEY_FAN_ALARM_STATUS_SET value
                 * @property {number} CHIMNEY_FAN_ALARM_TEMP_GET=68 CHIMNEY_FAN_ALARM_TEMP_GET value
                 * @property {number} CHIMNEY_FAN_ALARM_TEMP_REPORT=69 CHIMNEY_FAN_ALARM_TEMP_REPORT value
                 * @property {number} CHIMNEY_FAN_ALARM_TEMP_SET=70 CHIMNEY_FAN_ALARM_TEMP_SET value
                 * @property {number} CHIMNEY_FAN_BOOST_TIME_GET=71 CHIMNEY_FAN_BOOST_TIME_GET value
                 * @property {number} CHIMNEY_FAN_BOOST_TIME_REPORT=72 CHIMNEY_FAN_BOOST_TIME_REPORT value
                 * @property {number} CHIMNEY_FAN_BOOST_TIME_SET=73 CHIMNEY_FAN_BOOST_TIME_SET value
                 * @property {number} CHIMNEY_FAN_DEFAULT_SET=74 CHIMNEY_FAN_DEFAULT_SET value
                 * @property {number} CHIMNEY_FAN_MIN_SPEED_GET=75 CHIMNEY_FAN_MIN_SPEED_GET value
                 * @property {number} CHIMNEY_FAN_MIN_SPEED_REPORT=76 CHIMNEY_FAN_MIN_SPEED_REPORT value
                 * @property {number} CHIMNEY_FAN_MIN_SPEED_SET=77 CHIMNEY_FAN_MIN_SPEED_SET value
                 * @property {number} CHIMNEY_FAN_MODE_GET=78 CHIMNEY_FAN_MODE_GET value
                 * @property {number} CHIMNEY_FAN_MODE_REPORT=79 CHIMNEY_FAN_MODE_REPORT value
                 * @property {number} CHIMNEY_FAN_MODE_SET=80 CHIMNEY_FAN_MODE_SET value
                 * @property {number} CHIMNEY_FAN_SETUP_GET=81 CHIMNEY_FAN_SETUP_GET value
                 * @property {number} CHIMNEY_FAN_SETUP_REPORT=82 CHIMNEY_FAN_SETUP_REPORT value
                 * @property {number} CHIMNEY_FAN_SETUP_SET=83 CHIMNEY_FAN_SETUP_SET value
                 * @property {number} CHIMNEY_FAN_SPEED_GET=84 CHIMNEY_FAN_SPEED_GET value
                 * @property {number} CHIMNEY_FAN_SPEED_REPORT=85 CHIMNEY_FAN_SPEED_REPORT value
                 * @property {number} CHIMNEY_FAN_SPEED_SET=86 CHIMNEY_FAN_SPEED_SET value
                 * @property {number} CHIMNEY_FAN_START_TEMP_GET=87 CHIMNEY_FAN_START_TEMP_GET value
                 * @property {number} CHIMNEY_FAN_START_TEMP_REPORT=88 CHIMNEY_FAN_START_TEMP_REPORT value
                 * @property {number} CHIMNEY_FAN_START_TEMP_SET=89 CHIMNEY_FAN_START_TEMP_SET value
                 * @property {number} CHIMNEY_FAN_STATE_GET=90 CHIMNEY_FAN_STATE_GET value
                 * @property {number} CHIMNEY_FAN_STATE_REPORT=91 CHIMNEY_FAN_STATE_REPORT value
                 * @property {number} CHIMNEY_FAN_STATE_SET=92 CHIMNEY_FAN_STATE_SET value
                 * @property {number} CHIMNEY_FAN_STATUS_GET=93 CHIMNEY_FAN_STATUS_GET value
                 * @property {number} CHIMNEY_FAN_STATUS_REPORT=94 CHIMNEY_FAN_STATUS_REPORT value
                 * @property {number} CHIMNEY_FAN_STOP_TEMP_GET=95 CHIMNEY_FAN_STOP_TEMP_GET value
                 * @property {number} CHIMNEY_FAN_STOP_TEMP_REPORT=96 CHIMNEY_FAN_STOP_TEMP_REPORT value
                 * @property {number} CHIMNEY_FAN_STOP_TEMP_SET=97 CHIMNEY_FAN_STOP_TEMP_SET value
                 * @property {number} CHIMNEY_FAN_STOP_TIME_GET=98 CHIMNEY_FAN_STOP_TIME_GET value
                 * @property {number} CHIMNEY_FAN_STOP_TIME_REPORT=99 CHIMNEY_FAN_STOP_TIME_REPORT value
                 * @property {number} CHIMNEY_FAN_STOP_TIME_SET=100 CHIMNEY_FAN_STOP_TIME_SET value
                 * @property {number} CLOCK_GET=101 CLOCK_GET value
                 * @property {number} CLOCK_REPORT=102 CLOCK_REPORT value
                 * @property {number} CLOCK_SET=103 CLOCK_SET value
                 * @property {number} CMD_ASSIGN_SUC_RETURN_ROUTE=104 CMD_ASSIGN_SUC_RETURN_ROUTE value
                 * @property {number} CMD_AUTOMATIC_CONTROLLER_UPDATE_START=105 CMD_AUTOMATIC_CONTROLLER_UPDATE_START value
                 * @property {number} CMD_ENCAPSULATION=106 CMD_ENCAPSULATION value
                 * @property {number} CMD_NODES_EXIST=107 CMD_NODES_EXIST value
                 * @property {number} CMD_NODES_EXIST_REPLY=108 CMD_NODES_EXIST_REPLY value
                 * @property {number} CMD_NOP_POWER=109 CMD_NOP_POWER value
                 * @property {number} CMD_RESERVED_IDS=110 CMD_RESERVED_IDS value
                 * @property {number} CMD_SET_NWI_MODE=111 CMD_SET_NWI_MODE value
                 * @property {number} CMD_SET_SUC=112 CMD_SET_SUC value
                 * @property {number} CMD_SET_SUC_ACK=113 CMD_SET_SUC_ACK value
                 * @property {number} CMD_STATIC_ROUTE_REQUEST=114 CMD_STATIC_ROUTE_REQUEST value
                 * @property {number} CMD_SUC_NODE_ID=115 CMD_SUC_NODE_ID value
                 * @property {number} COMMAND_APPLICATION_NODE_INFO_GET=116 COMMAND_APPLICATION_NODE_INFO_GET value
                 * @property {number} COMMAND_APPLICATION_NODE_INFO_REPORT=117 COMMAND_APPLICATION_NODE_INFO_REPORT value
                 * @property {number} COMMAND_APPLICATION_NODE_INFO_SET=118 COMMAND_APPLICATION_NODE_INFO_SET value
                 * @property {number} COMMAND_CLASS_SECURITY_PANEL_ZONE_SENSOR_INSTALLED_REPORT=119 COMMAND_CLASS_SECURITY_PANEL_ZONE_SENSOR_INSTALLED_REPORT value
                 * @property {number} COMMAND_COMMAND_CLASS_NOT_SUPPORTED=120 COMMAND_COMMAND_CLASS_NOT_SUPPORTED value
                 * @property {number} COMMAND_COMPLETE=121 COMMAND_COMPLETE value
                 * @property {number} COMMAND_CONFIGURATION_GET=122 COMMAND_CONFIGURATION_GET value
                 * @property {number} COMMAND_CONFIGURATION_REPORT=123 COMMAND_CONFIGURATION_REPORT value
                 * @property {number} COMMAND_CONFIGURATION_SET=124 COMMAND_CONFIGURATION_SET value
                 * @property {number} COMMAND_FIRST_SEGMENT=125 COMMAND_FIRST_SEGMENT value
                 * @property {number} COMMAND_RECORDS_SUPPORTED_GET=126 COMMAND_RECORDS_SUPPORTED_GET value
                 * @property {number} COMMAND_RECORDS_SUPPORTED_REPORT=127 COMMAND_RECORDS_SUPPORTED_REPORT value
                 * @property {number} COMMAND_SCHEDULE_GET=128 COMMAND_SCHEDULE_GET value
                 * @property {number} COMMAND_SCHEDULE_REPORT=129 COMMAND_SCHEDULE_REPORT value
                 * @property {number} COMMAND_SCHEDULE_SET=130 COMMAND_SCHEDULE_SET value
                 * @property {number} COMMAND_SEGMENT_COMPLETE=131 COMMAND_SEGMENT_COMPLETE value
                 * @property {number} COMMAND_SEGMENT_REQUEST=132 COMMAND_SEGMENT_REQUEST value
                 * @property {number} COMMAND_SEGMENT_WAIT=133 COMMAND_SEGMENT_WAIT value
                 * @property {number} COMMAND_SUBSEQUENT_SEGMENT=134 COMMAND_SUBSEQUENT_SEGMENT value
                 * @property {number} COMMAND_ZIP_PACKET=135 COMMAND_ZIP_PACKET value
                 * @property {number} COMPLETE=136 COMPLETE value
                 * @property {number} CONFIGURATION_GET=137 CONFIGURATION_GET value
                 * @property {number} CONFIGURATION_REPORT=138 CONFIGURATION_REPORT value
                 * @property {number} CONFIGURATION_SET=139 CONFIGURATION_SET value
                 * @property {number} CONTROLLER_CHANGE=140 CONTROLLER_CHANGE value
                 * @property {number} CONTROLLER_CHANGE_STATUS=141 CONTROLLER_CHANGE_STATUS value
                 * @property {number} CRC_16_ENCAP=142 CRC_16_ENCAP value
                 * @property {number} CTRL_REPLICATION_TRANSFER_GROUP=143 CTRL_REPLICATION_TRANSFER_GROUP value
                 * @property {number} CTRL_REPLICATION_TRANSFER_GROUP_NAME=144 CTRL_REPLICATION_TRANSFER_GROUP_NAME value
                 * @property {number} CTRL_REPLICATION_TRANSFER_SCENE=145 CTRL_REPLICATION_TRANSFER_SCENE value
                 * @property {number} CTRL_REPLICATION_TRANSFER_SCENE_NAME=146 CTRL_REPLICATION_TRANSFER_SCENE_NAME value
                 * @property {number} DATE_GET=147 DATE_GET value
                 * @property {number} DATE_REPORT=148 DATE_REPORT value
                 * @property {number} DCP_EVENT_STATUS_GET=149 DCP_EVENT_STATUS_GET value
                 * @property {number} DCP_EVENT_STATUS_REPORT=150 DCP_EVENT_STATUS_REPORT value
                 * @property {number} DCP_LIST_GET=151 DCP_LIST_GET value
                 * @property {number} DCP_LIST_REMOVE=152 DCP_LIST_REMOVE value
                 * @property {number} DCP_LIST_REPORT=153 DCP_LIST_REPORT value
                 * @property {number} DCP_LIST_SET=154 DCP_LIST_SET value
                 * @property {number} DCP_LIST_SUPPORTED_GET=155 DCP_LIST_SUPPORTED_GET value
                 * @property {number} DCP_LIST_SUPPORTED_REPORT=156 DCP_LIST_SUPPORTED_REPORT value
                 * @property {number} DEFAULT_SET=157 DEFAULT_SET value
                 * @property {number} DEFAULT_SET_COMPLETE=158 DEFAULT_SET_COMPLETE value
                 * @property {number} DEVICE_RESET_LOCALLY_NOTIFICATION=159 DEVICE_RESET_LOCALLY_NOTIFICATION value
                 * @property {number} DMX_ADDRESS_GET=160 DMX_ADDRESS_GET value
                 * @property {number} DMX_ADDRESS_REPORT=161 DMX_ADDRESS_REPORT value
                 * @property {number} DMX_ADDRESS_SET=162 DMX_ADDRESS_SET value
                 * @property {number} DMX_CAPABILITY_GET=163 DMX_CAPABILITY_GET value
                 * @property {number} DMX_CAPABILITY_REPORT=164 DMX_CAPABILITY_REPORT value
                 * @property {number} DMX_DATA=165 DMX_DATA value
                 * @property {number} DOOR_LOCK_CONFIGURATION_GET=166 DOOR_LOCK_CONFIGURATION_GET value
                 * @property {number} DOOR_LOCK_CONFIGURATION_REPORT=167 DOOR_LOCK_CONFIGURATION_REPORT value
                 * @property {number} DOOR_LOCK_CONFIGURATION_SET=168 DOOR_LOCK_CONFIGURATION_SET value
                 * @property {number} DOOR_LOCK_LOGGING_RECORDS_SUPPORTED_GET=169 DOOR_LOCK_LOGGING_RECORDS_SUPPORTED_GET value
                 * @property {number} DOOR_LOCK_LOGGING_RECORDS_SUPPORTED_REPORT=170 DOOR_LOCK_LOGGING_RECORDS_SUPPORTED_REPORT value
                 * @property {number} DOOR_LOCK_OPERATION_GET=171 DOOR_LOCK_OPERATION_GET value
                 * @property {number} DOOR_LOCK_OPERATION_REPORT=172 DOOR_LOCK_OPERATION_REPORT value
                 * @property {number} DOOR_LOCK_OPERATION_SET=173 DOOR_LOCK_OPERATION_SET value
                 * @property {number} ENERGY_PRODUCTION_GET=174 ENERGY_PRODUCTION_GET value
                 * @property {number} ENERGY_PRODUCTION_REPORT=175 ENERGY_PRODUCTION_REPORT value
                 * @property {number} ENTRY_CONTROL_CONFIGURATION_GET=176 ENTRY_CONTROL_CONFIGURATION_GET value
                 * @property {number} ENTRY_CONTROL_CONFIGURATION_REPORT=177 ENTRY_CONTROL_CONFIGURATION_REPORT value
                 * @property {number} ENTRY_CONTROL_CONFIGURATION_SET=178 ENTRY_CONTROL_CONFIGURATION_SET value
                 * @property {number} ENTRY_CONTROL_EVENT_SUPPORTED_GET=179 ENTRY_CONTROL_EVENT_SUPPORTED_GET value
                 * @property {number} ENTRY_CONTROL_EVENT_SUPPORTED_REPORT=180 ENTRY_CONTROL_EVENT_SUPPORTED_REPORT value
                 * @property {number} ENTRY_CONTROL_KEY_SUPPORTED_GET=181 ENTRY_CONTROL_KEY_SUPPORTED_GET value
                 * @property {number} ENTRY_CONTROL_KEY_SUPPORTED_REPORT=182 ENTRY_CONTROL_KEY_SUPPORTED_REPORT value
                 * @property {number} ENTRY_CONTROL_NOTIFICATION=183 ENTRY_CONTROL_NOTIFICATION value
                 * @property {number} EVENT_SUPPORTED_GET=184 EVENT_SUPPORTED_GET value
                 * @property {number} EVENT_SUPPORTED_REPORT=185 EVENT_SUPPORTED_REPORT value
                 * @property {number} EXCLUDE_REQUEST=186 EXCLUDE_REQUEST value
                 * @property {number} FAILED_NODE_REMOVE=187 FAILED_NODE_REMOVE value
                 * @property {number} FAILED_NODE_REMOVE_STATUS=188 FAILED_NODE_REMOVE_STATUS value
                 * @property {number} FAILED_NODE_REPLACE=189 FAILED_NODE_REPLACE value
                 * @property {number} FAILED_NODE_REPLACE_STATUS=190 FAILED_NODE_REPLACE_STATUS value
                 * @property {number} FIND_NODES_IN_RANGE=191 FIND_NODES_IN_RANGE value
                 * @property {number} FIRMWARE_MD_GET=192 FIRMWARE_MD_GET value
                 * @property {number} FIRMWARE_MD_REPORT=193 FIRMWARE_MD_REPORT value
                 * @property {number} FIRMWARE_UPDATE_MD_GET=194 FIRMWARE_UPDATE_MD_GET value
                 * @property {number} FIRMWARE_UPDATE_MD_REPORT=195 FIRMWARE_UPDATE_MD_REPORT value
                 * @property {number} FIRMWARE_UPDATE_MD_REQUEST_GET=196 FIRMWARE_UPDATE_MD_REQUEST_GET value
                 * @property {number} FIRMWARE_UPDATE_MD_REQUEST_REPORT=197 FIRMWARE_UPDATE_MD_REQUEST_REPORT value
                 * @property {number} FIRMWARE_UPDATE_MD_STATUS_REPORT=198 FIRMWARE_UPDATE_MD_STATUS_REPORT value
                 * @property {number} GATEWAY_CONFIGURATION_GET=199 GATEWAY_CONFIGURATION_GET value
                 * @property {number} GATEWAY_CONFIGURATION_REPORT=200 GATEWAY_CONFIGURATION_REPORT value
                 * @property {number} GATEWAY_CONFIGURATION_SET=201 GATEWAY_CONFIGURATION_SET value
                 * @property {number} GATEWAY_CONFIGURATION_STATUS=202 GATEWAY_CONFIGURATION_STATUS value
                 * @property {number} GATEWAY_LOCK_SET=203 GATEWAY_LOCK_SET value
                 * @property {number} GATEWAY_MODE_GET=204 GATEWAY_MODE_GET value
                 * @property {number} GATEWAY_MODE_REPORT=205 GATEWAY_MODE_REPORT value
                 * @property {number} GATEWAY_MODE_SET=206 GATEWAY_MODE_SET value
                 * @property {number} GATEWAY_PEER_GET=207 GATEWAY_PEER_GET value
                 * @property {number} GATEWAY_PEER_REPORT=208 GATEWAY_PEER_REPORT value
                 * @property {number} GATEWAY_PEER_SET=209 GATEWAY_PEER_SET value
                 * @property {number} GEOGRAPHIC_LOCATION_GET=210 GEOGRAPHIC_LOCATION_GET value
                 * @property {number} GEOGRAPHIC_LOCATION_REPORT=211 GEOGRAPHIC_LOCATION_REPORT value
                 * @property {number} GEOGRAPHIC_LOCATION_SET=212 GEOGRAPHIC_LOCATION_SET value
                 * @property {number} GET_NODES_IN_RANGE=213 GET_NODES_IN_RANGE value
                 * @property {number} GROUPING_NAME_GET=214 GROUPING_NAME_GET value
                 * @property {number} GROUPING_NAME_REPORT=215 GROUPING_NAME_REPORT value
                 * @property {number} GROUPING_NAME_SET=216 GROUPING_NAME_SET value
                 * @property {number} HAIL=217 HAIL value
                 * @property {number} HRV_CONTROL_BYPASS_GET=218 HRV_CONTROL_BYPASS_GET value
                 * @property {number} HRV_CONTROL_BYPASS_REPORT=219 HRV_CONTROL_BYPASS_REPORT value
                 * @property {number} HRV_CONTROL_BYPASS_SET=220 HRV_CONTROL_BYPASS_SET value
                 * @property {number} HRV_CONTROL_MODE_GET=221 HRV_CONTROL_MODE_GET value
                 * @property {number} HRV_CONTROL_MODE_REPORT=222 HRV_CONTROL_MODE_REPORT value
                 * @property {number} HRV_CONTROL_MODE_SET=223 HRV_CONTROL_MODE_SET value
                 * @property {number} HRV_CONTROL_MODE_SUPPORTED_GET=224 HRV_CONTROL_MODE_SUPPORTED_GET value
                 * @property {number} HRV_CONTROL_MODE_SUPPORTED_REPORT=225 HRV_CONTROL_MODE_SUPPORTED_REPORT value
                 * @property {number} HRV_CONTROL_VENTILATION_RATE_GET=226 HRV_CONTROL_VENTILATION_RATE_GET value
                 * @property {number} HRV_CONTROL_VENTILATION_RATE_REPORT=227 HRV_CONTROL_VENTILATION_RATE_REPORT value
                 * @property {number} HRV_CONTROL_VENTILATION_RATE_SET=228 HRV_CONTROL_VENTILATION_RATE_SET value
                 * @property {number} HRV_STATUS_GET=229 HRV_STATUS_GET value
                 * @property {number} HRV_STATUS_REPORT=230 HRV_STATUS_REPORT value
                 * @property {number} HRV_STATUS_SUPPORTED_GET=231 HRV_STATUS_SUPPORTED_GET value
                 * @property {number} HRV_STATUS_SUPPORTED_REPORT=232 HRV_STATUS_SUPPORTED_REPORT value
                 * @property {number} HUMIDITY_CONTROL_MODE_GET=233 HUMIDITY_CONTROL_MODE_GET value
                 * @property {number} HUMIDITY_CONTROL_MODE_REPORT=234 HUMIDITY_CONTROL_MODE_REPORT value
                 * @property {number} HUMIDITY_CONTROL_MODE_SET=235 HUMIDITY_CONTROL_MODE_SET value
                 * @property {number} HUMIDITY_CONTROL_MODE_SUPPORTED_GET=236 HUMIDITY_CONTROL_MODE_SUPPORTED_GET value
                 * @property {number} HUMIDITY_CONTROL_MODE_SUPPORTED_REPORT=237 HUMIDITY_CONTROL_MODE_SUPPORTED_REPORT value
                 * @property {number} HUMIDITY_CONTROL_OPERATING_STATE_GET=238 HUMIDITY_CONTROL_OPERATING_STATE_GET value
                 * @property {number} HUMIDITY_CONTROL_OPERATING_STATE_REPORT=239 HUMIDITY_CONTROL_OPERATING_STATE_REPORT value
                 * @property {number} HUMIDITY_CONTROL_SETPOINT_CAPABILITIES_GET=240 HUMIDITY_CONTROL_SETPOINT_CAPABILITIES_GET value
                 * @property {number} HUMIDITY_CONTROL_SETPOINT_CAPABILITIES_REPORT=241 HUMIDITY_CONTROL_SETPOINT_CAPABILITIES_REPORT value
                 * @property {number} HUMIDITY_CONTROL_SETPOINT_GET=242 HUMIDITY_CONTROL_SETPOINT_GET value
                 * @property {number} HUMIDITY_CONTROL_SETPOINT_REPORT=243 HUMIDITY_CONTROL_SETPOINT_REPORT value
                 * @property {number} HUMIDITY_CONTROL_SETPOINT_SCALE_SUPPORTED_GET=244 HUMIDITY_CONTROL_SETPOINT_SCALE_SUPPORTED_GET value
                 * @property {number} HUMIDITY_CONTROL_SETPOINT_SCALE_SUPPORTED_REPORT=245 HUMIDITY_CONTROL_SETPOINT_SCALE_SUPPORTED_REPORT value
                 * @property {number} HUMIDITY_CONTROL_SETPOINT_SET=246 HUMIDITY_CONTROL_SETPOINT_SET value
                 * @property {number} HUMIDITY_CONTROL_SETPOINT_SUPPORTED_GET=247 HUMIDITY_CONTROL_SETPOINT_SUPPORTED_GET value
                 * @property {number} HUMIDITY_CONTROL_SETPOINT_SUPPORTED_REPORT=248 HUMIDITY_CONTROL_SETPOINT_SUPPORTED_REPORT value
                 * @property {number} INDICATOR_GET=249 INDICATOR_GET value
                 * @property {number} INDICATOR_REPORT=250 INDICATOR_REPORT value
                 * @property {number} INDICATOR_SET=251 INDICATOR_SET value
                 * @property {number} INITIATE=252 INITIATE value
                 * @property {number} IP_ASSOCIATION_GET=253 IP_ASSOCIATION_GET value
                 * @property {number} IP_ASSOCIATION_REMOVE=254 IP_ASSOCIATION_REMOVE value
                 * @property {number} IP_ASSOCIATION_REPORT=255 IP_ASSOCIATION_REPORT value
                 * @property {number} IP_ASSOCIATION_SET=256 IP_ASSOCIATION_SET value
                 * @property {number} IP_CONFIGURATION_GET=257 IP_CONFIGURATION_GET value
                 * @property {number} IP_CONFIGURATION_RELEASE=258 IP_CONFIGURATION_RELEASE value
                 * @property {number} IP_CONFIGURATION_RENEW=259 IP_CONFIGURATION_RENEW value
                 * @property {number} IP_CONFIGURATION_REPORT=260 IP_CONFIGURATION_REPORT value
                 * @property {number} IP_CONFIGURATION_SET=261 IP_CONFIGURATION_SET value
                 * @property {number} IRRIGATION_SYSTEM_CONFIG_GET=262 IRRIGATION_SYSTEM_CONFIG_GET value
                 * @property {number} IRRIGATION_SYSTEM_CONFIG_REPORT=263 IRRIGATION_SYSTEM_CONFIG_REPORT value
                 * @property {number} IRRIGATION_SYSTEM_CONFIG_SET=264 IRRIGATION_SYSTEM_CONFIG_SET value
                 * @property {number} IRRIGATION_SYSTEM_INFO_GET=265 IRRIGATION_SYSTEM_INFO_GET value
                 * @property {number} IRRIGATION_SYSTEM_INFO_REPORT=266 IRRIGATION_SYSTEM_INFO_REPORT value
                 * @property {number} IRRIGATION_SYSTEM_SHUTOFF=267 IRRIGATION_SYSTEM_SHUTOFF value
                 * @property {number} IRRIGATION_SYSTEM_STATUS_GET=268 IRRIGATION_SYSTEM_STATUS_GET value
                 * @property {number} IRRIGATION_SYSTEM_STATUS_REPORT=269 IRRIGATION_SYSTEM_STATUS_REPORT value
                 * @property {number} IRRIGATION_VALVE_CONFIG_GET=270 IRRIGATION_VALVE_CONFIG_GET value
                 * @property {number} IRRIGATION_VALVE_CONFIG_REPORT=271 IRRIGATION_VALVE_CONFIG_REPORT value
                 * @property {number} IRRIGATION_VALVE_CONFIG_SET=272 IRRIGATION_VALVE_CONFIG_SET value
                 * @property {number} IRRIGATION_VALVE_INFO_GET=273 IRRIGATION_VALVE_INFO_GET value
                 * @property {number} IRRIGATION_VALVE_INFO_REPORT=274 IRRIGATION_VALVE_INFO_REPORT value
                 * @property {number} IRRIGATION_VALVE_RUN=275 IRRIGATION_VALVE_RUN value
                 * @property {number} IRRIGATION_VALVE_TABLE_GET=276 IRRIGATION_VALVE_TABLE_GET value
                 * @property {number} IRRIGATION_VALVE_TABLE_REPORT=277 IRRIGATION_VALVE_TABLE_REPORT value
                 * @property {number} IRRIGATION_VALVE_TABLE_RUN=278 IRRIGATION_VALVE_TABLE_RUN value
                 * @property {number} IRRIGATION_VALVE_TABLE_SET=279 IRRIGATION_VALVE_TABLE_SET value
                 * @property {number} KEX_FAIL=280 KEX_FAIL value
                 * @property {number} KEX_GET=281 KEX_GET value
                 * @property {number} KEX_REPORT=282 KEX_REPORT value
                 * @property {number} KEX_SET=283 KEX_SET value
                 * @property {number} LANGUAGE_GET=284 LANGUAGE_GET value
                 * @property {number} LANGUAGE_REPORT=285 LANGUAGE_REPORT value
                 * @property {number} LANGUAGE_SET=286 LANGUAGE_SET value
                 * @property {number} LAST_WORKING_ROUTE_GET=287 LAST_WORKING_ROUTE_GET value
                 * @property {number} LAST_WORKING_ROUTE_REPORT=288 LAST_WORKING_ROUTE_REPORT value
                 * @property {number} LAST_WORKING_ROUTE_SET=289 LAST_WORKING_ROUTE_SET value
                 * @property {number} LEARN_MODE_SET=290 LEARN_MODE_SET value
                 * @property {number} LEARN_MODE_SET_STATUS=291 LEARN_MODE_SET_STATUS value
                 * @property {number} LOCK_GET=292 LOCK_GET value
                 * @property {number} LOCK_REPORT=293 LOCK_REPORT value
                 * @property {number} LOCK_SET=294 LOCK_SET value
                 * @property {number} LOST=295 LOST value
                 * @property {number} LOWPAN_FIRST_FRAGMENT=296 LOWPAN_FIRST_FRAGMENT value
                 * @property {number} LOWPAN_SUBSEQUENT_FRAGMENT=297 LOWPAN_SUBSEQUENT_FRAGMENT value
                 * @property {number} MAILBOX_CONFIGURATION_GET=298 MAILBOX_CONFIGURATION_GET value
                 * @property {number} MAILBOX_CONFIGURATION_REPORT=299 MAILBOX_CONFIGURATION_REPORT value
                 * @property {number} MAILBOX_CONFIGURATION_SET=300 MAILBOX_CONFIGURATION_SET value
                 * @property {number} MAILBOX_NODE_FAILING=301 MAILBOX_NODE_FAILING value
                 * @property {number} MAILBOX_QUEUE=302 MAILBOX_QUEUE value
                 * @property {number} MAILBOX_WAKEUP_NOTIFICATION=303 MAILBOX_WAKEUP_NOTIFICATION value
                 * @property {number} MANUFACTURER_SPECIFIC_GET=304 MANUFACTURER_SPECIFIC_GET value
                 * @property {number} MANUFACTURER_SPECIFIC_REPORT=305 MANUFACTURER_SPECIFIC_REPORT value
                 * @property {number} METER_GET=306 METER_GET value
                 * @property {number} METER_PULSE_GET=307 METER_PULSE_GET value
                 * @property {number} METER_PULSE_REPORT=308 METER_PULSE_REPORT value
                 * @property {number} METER_REPORT=309 METER_REPORT value
                 * @property {number} METER_TBL_CURRENT_DATA_GET=310 METER_TBL_CURRENT_DATA_GET value
                 * @property {number} METER_TBL_CURRENT_DATA_REPORT=311 METER_TBL_CURRENT_DATA_REPORT value
                 * @property {number} METER_TBL_HISTORICAL_DATA_GET=312 METER_TBL_HISTORICAL_DATA_GET value
                 * @property {number} METER_TBL_HISTORICAL_DATA_REPORT=313 METER_TBL_HISTORICAL_DATA_REPORT value
                 * @property {number} METER_TBL_PUSH_CONFIGURATION_GET=314 METER_TBL_PUSH_CONFIGURATION_GET value
                 * @property {number} METER_TBL_PUSH_CONFIGURATION_REPORT=315 METER_TBL_PUSH_CONFIGURATION_REPORT value
                 * @property {number} METER_TBL_PUSH_CONFIGURATION_SET=316 METER_TBL_PUSH_CONFIGURATION_SET value
                 * @property {number} METER_TBL_REPORT=317 METER_TBL_REPORT value
                 * @property {number} METER_TBL_STATUS_DATE_GET=318 METER_TBL_STATUS_DATE_GET value
                 * @property {number} METER_TBL_STATUS_DEPTH_GET=319 METER_TBL_STATUS_DEPTH_GET value
                 * @property {number} METER_TBL_STATUS_REPORT=320 METER_TBL_STATUS_REPORT value
                 * @property {number} METER_TBL_STATUS_SUPPORTED_GET=321 METER_TBL_STATUS_SUPPORTED_GET value
                 * @property {number} METER_TBL_STATUS_SUPPORTED_REPORT=322 METER_TBL_STATUS_SUPPORTED_REPORT value
                 * @property {number} METER_TBL_TABLE_CAPABILITY_GET=323 METER_TBL_TABLE_CAPABILITY_GET value
                 * @property {number} METER_TBL_TABLE_ID_GET=324 METER_TBL_TABLE_ID_GET value
                 * @property {number} METER_TBL_TABLE_ID_REPORT=325 METER_TBL_TABLE_ID_REPORT value
                 * @property {number} METER_TBL_TABLE_POINT_ADM_NO_GET=326 METER_TBL_TABLE_POINT_ADM_NO_GET value
                 * @property {number} METER_TBL_TABLE_POINT_ADM_NO_REPORT=327 METER_TBL_TABLE_POINT_ADM_NO_REPORT value
                 * @property {number} METER_TBL_TABLE_POINT_ADM_NO_SET=328 METER_TBL_TABLE_POINT_ADM_NO_SET value
                 * @property {number} MOVE_TO_POSITION_GET=329 MOVE_TO_POSITION_GET value
                 * @property {number} MOVE_TO_POSITION_REPORT=330 MOVE_TO_POSITION_REPORT value
                 * @property {number} MOVE_TO_POSITION_SET=331 MOVE_TO_POSITION_SET value
                 * @property {number} MULTI_CHANNEL_ASSOCIATION_GET=332 MULTI_CHANNEL_ASSOCIATION_GET value
                 * @property {number} MULTI_CHANNEL_ASSOCIATION_GROUPINGS_GET=333 MULTI_CHANNEL_ASSOCIATION_GROUPINGS_GET value
                 * @property {number} MULTI_CHANNEL_ASSOCIATION_GROUPINGS_REPORT=334 MULTI_CHANNEL_ASSOCIATION_GROUPINGS_REPORT value
                 * @property {number} MULTI_CHANNEL_ASSOCIATION_REMOVE=335 MULTI_CHANNEL_ASSOCIATION_REMOVE value
                 * @property {number} MULTI_CHANNEL_ASSOCIATION_REPORT=336 MULTI_CHANNEL_ASSOCIATION_REPORT value
                 * @property {number} MULTI_CHANNEL_ASSOCIATION_SET=337 MULTI_CHANNEL_ASSOCIATION_SET value
                 * @property {number} MULTI_CHANNEL_CAPABILITY_GET=338 MULTI_CHANNEL_CAPABILITY_GET value
                 * @property {number} MULTI_CHANNEL_CAPABILITY_REPORT=339 MULTI_CHANNEL_CAPABILITY_REPORT value
                 * @property {number} MULTI_CHANNEL_CMD_ENCAP=340 MULTI_CHANNEL_CMD_ENCAP value
                 * @property {number} MULTI_CHANNEL_END_POINT_FIND=341 MULTI_CHANNEL_END_POINT_FIND value
                 * @property {number} MULTI_CHANNEL_END_POINT_FIND_REPORT=342 MULTI_CHANNEL_END_POINT_FIND_REPORT value
                 * @property {number} MULTI_CHANNEL_END_POINT_GET=343 MULTI_CHANNEL_END_POINT_GET value
                 * @property {number} MULTI_CHANNEL_END_POINT_REPORT=344 MULTI_CHANNEL_END_POINT_REPORT value
                 * @property {number} MULTI_CMD_ENCAP=345 MULTI_CMD_ENCAP value
                 * @property {number} MULTI_INSTANCE_ASSOCIATION_GET=346 MULTI_INSTANCE_ASSOCIATION_GET value
                 * @property {number} MULTI_INSTANCE_ASSOCIATION_GROUPINGS_GET=347 MULTI_INSTANCE_ASSOCIATION_GROUPINGS_GET value
                 * @property {number} MULTI_INSTANCE_ASSOCIATION_GROUPINGS_REPORT=348 MULTI_INSTANCE_ASSOCIATION_GROUPINGS_REPORT value
                 * @property {number} MULTI_INSTANCE_ASSOCIATION_REMOVE=349 MULTI_INSTANCE_ASSOCIATION_REMOVE value
                 * @property {number} MULTI_INSTANCE_ASSOCIATION_REPORT=350 MULTI_INSTANCE_ASSOCIATION_REPORT value
                 * @property {number} MULTI_INSTANCE_ASSOCIATION_SET=351 MULTI_INSTANCE_ASSOCIATION_SET value
                 * @property {number} MULTI_INSTANCE_CMD_ENCAP=352 MULTI_INSTANCE_CMD_ENCAP value
                 * @property {number} MULTI_INSTANCE_GET=353 MULTI_INSTANCE_GET value
                 * @property {number} MULTI_INSTANCE_REPORT=354 MULTI_INSTANCE_REPORT value
                 * @property {number} NETWORK_KEY_SET=355 NETWORK_KEY_SET value
                 * @property {number} NETWORK_KEY_VERIFY=356 NETWORK_KEY_VERIFY value
                 * @property {number} NETWORK_UPDATE_REQUEST=357 NETWORK_UPDATE_REQUEST value
                 * @property {number} NETWORK_UPDATE_REQUEST_STATUS=358 NETWORK_UPDATE_REQUEST_STATUS value
                 * @property {number} NEW_NODE_REGISTERED=359 NEW_NODE_REGISTERED value
                 * @property {number} NEW_RANGE_REGISTERED=360 NEW_RANGE_REGISTERED value
                 * @property {number} NODE_ADD=361 NODE_ADD value
                 * @property {number} NODE_ADD_STATUS=362 NODE_ADD_STATUS value
                 * @property {number} NODE_INFO=363 NODE_INFO value
                 * @property {number} NODE_INFORMATION_SEND=364 NODE_INFORMATION_SEND value
                 * @property {number} NODE_INFO_CACHED_GET=365 NODE_INFO_CACHED_GET value
                 * @property {number} NODE_INFO_CACHED_REPORT=366 NODE_INFO_CACHED_REPORT value
                 * @property {number} NODE_LIST_GET=367 NODE_LIST_GET value
                 * @property {number} NODE_LIST_REPORT=368 NODE_LIST_REPORT value
                 * @property {number} NODE_NAMING_NODE_LOCATION_GET=369 NODE_NAMING_NODE_LOCATION_GET value
                 * @property {number} NODE_NAMING_NODE_LOCATION_REPORT=370 NODE_NAMING_NODE_LOCATION_REPORT value
                 * @property {number} NODE_NAMING_NODE_LOCATION_SET=371 NODE_NAMING_NODE_LOCATION_SET value
                 * @property {number} NODE_NAMING_NODE_NAME_GET=372 NODE_NAMING_NODE_NAME_GET value
                 * @property {number} NODE_NAMING_NODE_NAME_REPORT=373 NODE_NAMING_NODE_NAME_REPORT value
                 * @property {number} NODE_NAMING_NODE_NAME_SET=374 NODE_NAMING_NODE_NAME_SET value
                 * @property {number} NODE_NEIGHBOR_UPDATE_REQUEST=375 NODE_NEIGHBOR_UPDATE_REQUEST value
                 * @property {number} NODE_NEIGHBOR_UPDATE_STATUS=376 NODE_NEIGHBOR_UPDATE_STATUS value
                 * @property {number} NODE_RANGE_INFO=377 NODE_RANGE_INFO value
                 * @property {number} NODE_REMOVE=378 NODE_REMOVE value
                 * @property {number} NODE_REMOVE_STATUS=379 NODE_REMOVE_STATUS value
                 * @property {number} NOTIFICATION_GET=380 NOTIFICATION_GET value
                 * @property {number} NOTIFICATION_REPORT=381 NOTIFICATION_REPORT value
                 * @property {number} NOTIFICATION_SET=382 NOTIFICATION_SET value
                 * @property {number} NOTIFICATION_SUPPORTED_GET=383 NOTIFICATION_SUPPORTED_GET value
                 * @property {number} NOTIFICATION_SUPPORTED_REPORT=384 NOTIFICATION_SUPPORTED_REPORT value
                 * @property {number} POWERLEVEL_GET=385 POWERLEVEL_GET value
                 * @property {number} POWERLEVEL_REPORT=386 POWERLEVEL_REPORT value
                 * @property {number} POWERLEVEL_SET=387 POWERLEVEL_SET value
                 * @property {number} POWERLEVEL_TEST_NODE_GET=388 POWERLEVEL_TEST_NODE_GET value
                 * @property {number} POWERLEVEL_TEST_NODE_REPORT=389 POWERLEVEL_TEST_NODE_REPORT value
                 * @property {number} POWERLEVEL_TEST_NODE_SET=390 POWERLEVEL_TEST_NODE_SET value
                 * @property {number} PREPAYMENT_BALANCE_GET=391 PREPAYMENT_BALANCE_GET value
                 * @property {number} PREPAYMENT_BALANCE_REPORT=392 PREPAYMENT_BALANCE_REPORT value
                 * @property {number} PREPAYMENT_SUPPORTED_GET=393 PREPAYMENT_SUPPORTED_GET value
                 * @property {number} PREPAYMENT_SUPPORTED_REPORT=394 PREPAYMENT_SUPPORTED_REPORT value
                 * @property {number} PROPRIETARY_GET=395 PROPRIETARY_GET value
                 * @property {number} PROPRIETARY_REPORT=396 PROPRIETARY_REPORT value
                 * @property {number} PROPRIETARY_SET=397 PROPRIETARY_SET value
                 * @property {number} PROTECTION_GET=398 PROTECTION_GET value
                 * @property {number} PROTECTION_REPORT=399 PROTECTION_REPORT value
                 * @property {number} PROTECTION_SET=400 PROTECTION_SET value
                 * @property {number} PUBLIC_KEY_REPORT=401 PUBLIC_KEY_REPORT value
                 * @property {number} RATE_TBL_ACTIVE_RATE_GET=402 RATE_TBL_ACTIVE_RATE_GET value
                 * @property {number} RATE_TBL_ACTIVE_RATE_REPORT=403 RATE_TBL_ACTIVE_RATE_REPORT value
                 * @property {number} RATE_TBL_CURRENT_DATA_GET=404 RATE_TBL_CURRENT_DATA_GET value
                 * @property {number} RATE_TBL_CURRENT_DATA_REPORT=405 RATE_TBL_CURRENT_DATA_REPORT value
                 * @property {number} RATE_TBL_GET=406 RATE_TBL_GET value
                 * @property {number} RATE_TBL_HISTORICAL_DATA_GET=407 RATE_TBL_HISTORICAL_DATA_GET value
                 * @property {number} RATE_TBL_HISTORICAL_DATA_REPORT=408 RATE_TBL_HISTORICAL_DATA_REPORT value
                 * @property {number} RATE_TBL_REMOVE=409 RATE_TBL_REMOVE value
                 * @property {number} RATE_TBL_REPORT=410 RATE_TBL_REPORT value
                 * @property {number} RATE_TBL_SET=411 RATE_TBL_SET value
                 * @property {number} RATE_TBL_SUPPORTED_GET=412 RATE_TBL_SUPPORTED_GET value
                 * @property {number} RATE_TBL_SUPPORTED_REPORT=413 RATE_TBL_SUPPORTED_REPORT value
                 * @property {number} RECORD_GET=414 RECORD_GET value
                 * @property {number} RECORD_REPORT=415 RECORD_REPORT value
                 * @property {number} REMOTE_ASSOCIATION_ACTIVATE=416 REMOTE_ASSOCIATION_ACTIVATE value
                 * @property {number} REMOTE_ASSOCIATION_CONFIGURATION_GET=417 REMOTE_ASSOCIATION_CONFIGURATION_GET value
                 * @property {number} REMOTE_ASSOCIATION_CONFIGURATION_REPORT=418 REMOTE_ASSOCIATION_CONFIGURATION_REPORT value
                 * @property {number} REMOTE_ASSOCIATION_CONFIGURATION_SET=419 REMOTE_ASSOCIATION_CONFIGURATION_SET value
                 * @property {number} REQUEST_NODE_INFO=420 REQUEST_NODE_INFO value
                 * @property {number} RETURN_ROUTE_ASSIGN=421 RETURN_ROUTE_ASSIGN value
                 * @property {number} RETURN_ROUTE_ASSIGN_COMPLETE=422 RETURN_ROUTE_ASSIGN_COMPLETE value
                 * @property {number} RETURN_ROUTE_DELETE=423 RETURN_ROUTE_DELETE value
                 * @property {number} RETURN_ROUTE_DELETE_COMPLETE=424 RETURN_ROUTE_DELETE_COMPLETE value
                 * @property {number} SCENE_ACTIVATION_SET=425 SCENE_ACTIVATION_SET value
                 * @property {number} SCENE_ACTUATOR_CONF_GET=426 SCENE_ACTUATOR_CONF_GET value
                 * @property {number} SCENE_ACTUATOR_CONF_REPORT=427 SCENE_ACTUATOR_CONF_REPORT value
                 * @property {number} SCENE_ACTUATOR_CONF_SET=428 SCENE_ACTUATOR_CONF_SET value
                 * @property {number} SCENE_CONTROLLER_CONF_GET=429 SCENE_CONTROLLER_CONF_GET value
                 * @property {number} SCENE_CONTROLLER_CONF_REPORT=430 SCENE_CONTROLLER_CONF_REPORT value
                 * @property {number} SCENE_CONTROLLER_CONF_SET=431 SCENE_CONTROLLER_CONF_SET value
                 * @property {number} SCHEDULE_CHANGED_GET=432 SCHEDULE_CHANGED_GET value
                 * @property {number} SCHEDULE_CHANGED_REPORT=433 SCHEDULE_CHANGED_REPORT value
                 * @property {number} SCHEDULE_ENTRY_LOCK_ENABLE_ALL_SET=434 SCHEDULE_ENTRY_LOCK_ENABLE_ALL_SET value
                 * @property {number} SCHEDULE_ENTRY_LOCK_ENABLE_SET=435 SCHEDULE_ENTRY_LOCK_ENABLE_SET value
                 * @property {number} SCHEDULE_ENTRY_LOCK_WEEK_DAY_GET=436 SCHEDULE_ENTRY_LOCK_WEEK_DAY_GET value
                 * @property {number} SCHEDULE_ENTRY_LOCK_WEEK_DAY_REPORT=437 SCHEDULE_ENTRY_LOCK_WEEK_DAY_REPORT value
                 * @property {number} SCHEDULE_ENTRY_LOCK_WEEK_DAY_SET=438 SCHEDULE_ENTRY_LOCK_WEEK_DAY_SET value
                 * @property {number} SCHEDULE_ENTRY_LOCK_YEAR_DAY_GET=439 SCHEDULE_ENTRY_LOCK_YEAR_DAY_GET value
                 * @property {number} SCHEDULE_ENTRY_LOCK_YEAR_DAY_REPORT=440 SCHEDULE_ENTRY_LOCK_YEAR_DAY_REPORT value
                 * @property {number} SCHEDULE_ENTRY_LOCK_YEAR_DAY_SET=441 SCHEDULE_ENTRY_LOCK_YEAR_DAY_SET value
                 * @property {number} SCHEDULE_ENTRY_TYPE_SUPPORTED_GET=442 SCHEDULE_ENTRY_TYPE_SUPPORTED_GET value
                 * @property {number} SCHEDULE_ENTRY_TYPE_SUPPORTED_REPORT=443 SCHEDULE_ENTRY_TYPE_SUPPORTED_REPORT value
                 * @property {number} SCHEDULE_GET=444 SCHEDULE_GET value
                 * @property {number} SCHEDULE_OVERRIDE_GET=445 SCHEDULE_OVERRIDE_GET value
                 * @property {number} SCHEDULE_OVERRIDE_REPORT=446 SCHEDULE_OVERRIDE_REPORT value
                 * @property {number} SCHEDULE_OVERRIDE_SET=447 SCHEDULE_OVERRIDE_SET value
                 * @property {number} SCHEDULE_REMOVE=448 SCHEDULE_REMOVE value
                 * @property {number} SCHEDULE_REPORT=449 SCHEDULE_REPORT value
                 * @property {number} SCHEDULE_SET=450 SCHEDULE_SET value
                 * @property {number} SCHEDULE_STATE_GET=451 SCHEDULE_STATE_GET value
                 * @property {number} SCHEDULE_STATE_REPORT=452 SCHEDULE_STATE_REPORT value
                 * @property {number} SCHEDULE_STATE_SET=453 SCHEDULE_STATE_SET value
                 * @property {number} SCHEDULE_SUPPORTED_GET=454 SCHEDULE_SUPPORTED_GET value
                 * @property {number} SCHEDULE_SUPPORTED_REPORT=455 SCHEDULE_SUPPORTED_REPORT value
                 * @property {number} SCREEN_ATTRIBUTES_GET=456 SCREEN_ATTRIBUTES_GET value
                 * @property {number} SCREEN_ATTRIBUTES_REPORT=457 SCREEN_ATTRIBUTES_REPORT value
                 * @property {number} SCREEN_MD_GET=458 SCREEN_MD_GET value
                 * @property {number} SCREEN_MD_REPORT=459 SCREEN_MD_REPORT value
                 * @property {number} SECURITY_2_CAPABILITIES_GET=460 SECURITY_2_CAPABILITIES_GET value
                 * @property {number} SECURITY_2_CAPABILITIES_REPORT=461 SECURITY_2_CAPABILITIES_REPORT value
                 * @property {number} SECURITY_2_COMMANDS_SUPPORTED_GET=462 SECURITY_2_COMMANDS_SUPPORTED_GET value
                 * @property {number} SECURITY_2_COMMANDS_SUPPORTED_REPORT=463 SECURITY_2_COMMANDS_SUPPORTED_REPORT value
                 * @property {number} SECURITY_2_MESSAGE_ENCAPSULATION=464 SECURITY_2_MESSAGE_ENCAPSULATION value
                 * @property {number} SECURITY_2_NETWORK_KEY_GET=465 SECURITY_2_NETWORK_KEY_GET value
                 * @property {number} SECURITY_2_NETWORK_KEY_REPORT=466 SECURITY_2_NETWORK_KEY_REPORT value
                 * @property {number} SECURITY_2_NETWORK_KEY_VERIFY=467 SECURITY_2_NETWORK_KEY_VERIFY value
                 * @property {number} SECURITY_2_NONCE_GET=468 SECURITY_2_NONCE_GET value
                 * @property {number} SECURITY_2_NONCE_REPORT=469 SECURITY_2_NONCE_REPORT value
                 * @property {number} SECURITY_2_TRANSFER_END=470 SECURITY_2_TRANSFER_END value
                 * @property {number} SECURITY_COMMANDS_SUPPORTED_GET=471 SECURITY_COMMANDS_SUPPORTED_GET value
                 * @property {number} SECURITY_COMMANDS_SUPPORTED_REPORT=472 SECURITY_COMMANDS_SUPPORTED_REPORT value
                 * @property {number} SECURITY_MESSAGE_ENCAPSULATION=473 SECURITY_MESSAGE_ENCAPSULATION value
                 * @property {number} SECURITY_MESSAGE_ENCAPSULATION_NONCE_GET=474 SECURITY_MESSAGE_ENCAPSULATION_NONCE_GET value
                 * @property {number} SECURITY_NONCE_GET=475 SECURITY_NONCE_GET value
                 * @property {number} SECURITY_NONCE_REPORT=476 SECURITY_NONCE_REPORT value
                 * @property {number} SECURITY_PANEL_MODE_GET=477 SECURITY_PANEL_MODE_GET value
                 * @property {number} SECURITY_PANEL_MODE_REPORT=478 SECURITY_PANEL_MODE_REPORT value
                 * @property {number} SECURITY_PANEL_MODE_SET=479 SECURITY_PANEL_MODE_SET value
                 * @property {number} SECURITY_PANEL_MODE_SUPPORTED_GET=480 SECURITY_PANEL_MODE_SUPPORTED_GET value
                 * @property {number} SECURITY_PANEL_MODE_SUPPORTED_REPORT=481 SECURITY_PANEL_MODE_SUPPORTED_REPORT value
                 * @property {number} SECURITY_PANEL_ZONE_NUMBER_SUPPORTED_GET=482 SECURITY_PANEL_ZONE_NUMBER_SUPPORTED_GET value
                 * @property {number} SECURITY_PANEL_ZONE_SENSOR_INSTALLED_GET=483 SECURITY_PANEL_ZONE_SENSOR_INSTALLED_GET value
                 * @property {number} SECURITY_PANEL_ZONE_SENSOR_STATE_GET=484 SECURITY_PANEL_ZONE_SENSOR_STATE_GET value
                 * @property {number} SECURITY_PANEL_ZONE_SENSOR_STATE_REPORT=485 SECURITY_PANEL_ZONE_SENSOR_STATE_REPORT value
                 * @property {number} SECURITY_PANEL_ZONE_SENSOR_TYPE_GET=486 SECURITY_PANEL_ZONE_SENSOR_TYPE_GET value
                 * @property {number} SECURITY_PANEL_ZONE_SENSOR_TYPE_REPORT=487 SECURITY_PANEL_ZONE_SENSOR_TYPE_REPORT value
                 * @property {number} SECURITY_PANEL_ZONE_STATE_GET=488 SECURITY_PANEL_ZONE_STATE_GET value
                 * @property {number} SECURITY_PANEL_ZONE_STATE_REPORT=489 SECURITY_PANEL_ZONE_STATE_REPORT value
                 * @property {number} SECURITY_PANEL_ZONE_SUPPORTED_REPORT=490 SECURITY_PANEL_ZONE_SUPPORTED_REPORT value
                 * @property {number} SECURITY_PANEL_ZONE_TYPE_GET=491 SECURITY_PANEL_ZONE_TYPE_GET value
                 * @property {number} SECURITY_PANEL_ZONE_TYPE_REPORT=492 SECURITY_PANEL_ZONE_TYPE_REPORT value
                 * @property {number} SECURITY_SCHEME_GET=493 SECURITY_SCHEME_GET value
                 * @property {number} SECURITY_SCHEME_INHERIT=494 SECURITY_SCHEME_INHERIT value
                 * @property {number} SECURITY_SCHEME_REPORT=495 SECURITY_SCHEME_REPORT value
                 * @property {number} SENSOR_ALARM_GET=496 SENSOR_ALARM_GET value
                 * @property {number} SENSOR_ALARM_REPORT=497 SENSOR_ALARM_REPORT value
                 * @property {number} SENSOR_ALARM_SET=498 SENSOR_ALARM_SET value
                 * @property {number} SENSOR_ALARM_SUPPORTED_GET=499 SENSOR_ALARM_SUPPORTED_GET value
                 * @property {number} SENSOR_ALARM_SUPPORTED_REPORT=500 SENSOR_ALARM_SUPPORTED_REPORT value
                 * @property {number} SENSOR_BINARY_GET=501 SENSOR_BINARY_GET value
                 * @property {number} SENSOR_BINARY_REPORT=502 SENSOR_BINARY_REPORT value
                 * @property {number} SENSOR_MULTILEVEL_GET=503 SENSOR_MULTILEVEL_GET value
                 * @property {number} SENSOR_MULTILEVEL_REPORT=504 SENSOR_MULTILEVEL_REPORT value
                 * @property {number} SENSOR_TRIGGER_LEVEL_GET=505 SENSOR_TRIGGER_LEVEL_GET value
                 * @property {number} SENSOR_TRIGGER_LEVEL_REPORT=506 SENSOR_TRIGGER_LEVEL_REPORT value
                 * @property {number} SENSOR_TRIGGER_LEVEL_SET=507 SENSOR_TRIGGER_LEVEL_SET value
                 * @property {number} SIMPLE_AV_CONTROL_GET=508 SIMPLE_AV_CONTROL_GET value
                 * @property {number} SIMPLE_AV_CONTROL_REPORT=509 SIMPLE_AV_CONTROL_REPORT value
                 * @property {number} SIMPLE_AV_CONTROL_SET=510 SIMPLE_AV_CONTROL_SET value
                 * @property {number} SIMPLE_AV_CONTROL_SUPPORTED_GET=511 SIMPLE_AV_CONTROL_SUPPORTED_GET value
                 * @property {number} SIMPLE_AV_CONTROL_SUPPORTED_REPORT=512 SIMPLE_AV_CONTROL_SUPPORTED_REPORT value
                 * @property {number} STATISTICS_CLEAR=513 STATISTICS_CLEAR value
                 * @property {number} STATISTICS_GET=514 STATISTICS_GET value
                 * @property {number} STATISTICS_REPORT=515 STATISTICS_REPORT value
                 * @property {number} SUPERVISION_GET=516 SUPERVISION_GET value
                 * @property {number} SUPERVISION_REPORT=517 SUPERVISION_REPORT value
                 * @property {number} SWITCH_ALL_GET=518 SWITCH_ALL_GET value
                 * @property {number} SWITCH_ALL_OFF=519 SWITCH_ALL_OFF value
                 * @property {number} SWITCH_ALL_ON=520 SWITCH_ALL_ON value
                 * @property {number} SWITCH_ALL_REPORT=521 SWITCH_ALL_REPORT value
                 * @property {number} SWITCH_ALL_SET=522 SWITCH_ALL_SET value
                 * @property {number} SWITCH_BINARY_GET=523 SWITCH_BINARY_GET value
                 * @property {number} SWITCH_BINARY_REPORT=524 SWITCH_BINARY_REPORT value
                 * @property {number} SWITCH_BINARY_SET=525 SWITCH_BINARY_SET value
                 * @property {number} SWITCH_COLOR_GET=526 SWITCH_COLOR_GET value
                 * @property {number} SWITCH_COLOR_REPORT=527 SWITCH_COLOR_REPORT value
                 * @property {number} SWITCH_COLOR_SET=528 SWITCH_COLOR_SET value
                 * @property {number} SWITCH_COLOR_START_LEVEL_CHANGE=529 SWITCH_COLOR_START_LEVEL_CHANGE value
                 * @property {number} SWITCH_COLOR_STOP_LEVEL_CHANGE=530 SWITCH_COLOR_STOP_LEVEL_CHANGE value
                 * @property {number} SWITCH_COLOR_SUPPORTED_GET=531 SWITCH_COLOR_SUPPORTED_GET value
                 * @property {number} SWITCH_COLOR_SUPPORTED_REPORT=532 SWITCH_COLOR_SUPPORTED_REPORT value
                 * @property {number} SWITCH_MULTILEVEL_GET=533 SWITCH_MULTILEVEL_GET value
                 * @property {number} SWITCH_MULTILEVEL_REPORT=534 SWITCH_MULTILEVEL_REPORT value
                 * @property {number} SWITCH_MULTILEVEL_SET=535 SWITCH_MULTILEVEL_SET value
                 * @property {number} SWITCH_MULTILEVEL_START_LEVEL_CHANGE=536 SWITCH_MULTILEVEL_START_LEVEL_CHANGE value
                 * @property {number} SWITCH_MULTILEVEL_STOP_LEVEL_CHANGE=537 SWITCH_MULTILEVEL_STOP_LEVEL_CHANGE value
                 * @property {number} SWITCH_TOGGLE_BINARY_GET=538 SWITCH_TOGGLE_BINARY_GET value
                 * @property {number} SWITCH_TOGGLE_BINARY_REPORT=539 SWITCH_TOGGLE_BINARY_REPORT value
                 * @property {number} SWITCH_TOGGLE_BINARY_SET=540 SWITCH_TOGGLE_BINARY_SET value
                 * @property {number} SWITCH_TOGGLE_MULTILEVEL_GET=541 SWITCH_TOGGLE_MULTILEVEL_GET value
                 * @property {number} SWITCH_TOGGLE_MULTILEVEL_REPORT=542 SWITCH_TOGGLE_MULTILEVEL_REPORT value
                 * @property {number} SWITCH_TOGGLE_MULTILEVEL_SET=543 SWITCH_TOGGLE_MULTILEVEL_SET value
                 * @property {number} SWITCH_TOGGLE_MULTILEVEL_START_LEVEL_CHANGE=544 SWITCH_TOGGLE_MULTILEVEL_START_LEVEL_CHANGE value
                 * @property {number} SWITCH_TOGGLE_MULTILEVEL_STOP_LEVEL_CHANGE=545 SWITCH_TOGGLE_MULTILEVEL_STOP_LEVEL_CHANGE value
                 * @property {number} TARIFF_TBL_COST_GET=546 TARIFF_TBL_COST_GET value
                 * @property {number} TARIFF_TBL_COST_REPORT=547 TARIFF_TBL_COST_REPORT value
                 * @property {number} TARIFF_TBL_GET=548 TARIFF_TBL_GET value
                 * @property {number} TARIFF_TBL_REMOVE=549 TARIFF_TBL_REMOVE value
                 * @property {number} TARIFF_TBL_REPORT=550 TARIFF_TBL_REPORT value
                 * @property {number} TARIFF_TBL_SET=551 TARIFF_TBL_SET value
                 * @property {number} TARIFF_TBL_SUPPLIER_GET=552 TARIFF_TBL_SUPPLIER_GET value
                 * @property {number} TARIFF_TBL_SUPPLIER_REPORT=553 TARIFF_TBL_SUPPLIER_REPORT value
                 * @property {number} TARIFF_TBL_SUPPLIER_SET=554 TARIFF_TBL_SUPPLIER_SET value
                 * @property {number} THERMOSTAT_FAN_MODE_GET=555 THERMOSTAT_FAN_MODE_GET value
                 * @property {number} THERMOSTAT_FAN_MODE_REPORT=556 THERMOSTAT_FAN_MODE_REPORT value
                 * @property {number} THERMOSTAT_FAN_MODE_SET=557 THERMOSTAT_FAN_MODE_SET value
                 * @property {number} THERMOSTAT_FAN_MODE_SUPPORTED_GET=558 THERMOSTAT_FAN_MODE_SUPPORTED_GET value
                 * @property {number} THERMOSTAT_FAN_MODE_SUPPORTED_REPORT=559 THERMOSTAT_FAN_MODE_SUPPORTED_REPORT value
                 * @property {number} THERMOSTAT_FAN_STATE_GET=560 THERMOSTAT_FAN_STATE_GET value
                 * @property {number} THERMOSTAT_FAN_STATE_REPORT=561 THERMOSTAT_FAN_STATE_REPORT value
                 * @property {number} THERMOSTAT_HEATING_MODE_GET=562 THERMOSTAT_HEATING_MODE_GET value
                 * @property {number} THERMOSTAT_HEATING_MODE_REPORT=563 THERMOSTAT_HEATING_MODE_REPORT value
                 * @property {number} THERMOSTAT_HEATING_MODE_SET=564 THERMOSTAT_HEATING_MODE_SET value
                 * @property {number} THERMOSTAT_HEATING_RELAY_STATUS_GET=565 THERMOSTAT_HEATING_RELAY_STATUS_GET value
                 * @property {number} THERMOSTAT_HEATING_RELAY_STATUS_REPORT=566 THERMOSTAT_HEATING_RELAY_STATUS_REPORT value
                 * @property {number} THERMOSTAT_HEATING_SETPOINT_GET=567 THERMOSTAT_HEATING_SETPOINT_GET value
                 * @property {number} THERMOSTAT_HEATING_SETPOINT_REPORT=568 THERMOSTAT_HEATING_SETPOINT_REPORT value
                 * @property {number} THERMOSTAT_HEATING_SETPOINT_SET=569 THERMOSTAT_HEATING_SETPOINT_SET value
                 * @property {number} THERMOSTAT_HEATING_STATUS_GET=570 THERMOSTAT_HEATING_STATUS_GET value
                 * @property {number} THERMOSTAT_HEATING_STATUS_REPORT=571 THERMOSTAT_HEATING_STATUS_REPORT value
                 * @property {number} THERMOSTAT_HEATING_STATUS_SET=572 THERMOSTAT_HEATING_STATUS_SET value
                 * @property {number} THERMOSTAT_HEATING_TIMED_OFF_SET=573 THERMOSTAT_HEATING_TIMED_OFF_SET value
                 * @property {number} THERMOSTAT_MODE_GET=574 THERMOSTAT_MODE_GET value
                 * @property {number} THERMOSTAT_MODE_REPORT=575 THERMOSTAT_MODE_REPORT value
                 * @property {number} THERMOSTAT_MODE_SET=576 THERMOSTAT_MODE_SET value
                 * @property {number} THERMOSTAT_MODE_SUPPORTED_GET=577 THERMOSTAT_MODE_SUPPORTED_GET value
                 * @property {number} THERMOSTAT_MODE_SUPPORTED_REPORT=578 THERMOSTAT_MODE_SUPPORTED_REPORT value
                 * @property {number} THERMOSTAT_OPERATING_STATE_GET=579 THERMOSTAT_OPERATING_STATE_GET value
                 * @property {number} THERMOSTAT_OPERATING_STATE_REPORT=580 THERMOSTAT_OPERATING_STATE_REPORT value
                 * @property {number} THERMOSTAT_SETBACK_GET=581 THERMOSTAT_SETBACK_GET value
                 * @property {number} THERMOSTAT_SETBACK_REPORT=582 THERMOSTAT_SETBACK_REPORT value
                 * @property {number} THERMOSTAT_SETBACK_SET=583 THERMOSTAT_SETBACK_SET value
                 * @property {number} THERMOSTAT_SETPOINT_GET=584 THERMOSTAT_SETPOINT_GET value
                 * @property {number} THERMOSTAT_SETPOINT_REPORT=585 THERMOSTAT_SETPOINT_REPORT value
                 * @property {number} THERMOSTAT_SETPOINT_SET=586 THERMOSTAT_SETPOINT_SET value
                 * @property {number} THERMOSTAT_SETPOINT_SUPPORTED_GET=587 THERMOSTAT_SETPOINT_SUPPORTED_GET value
                 * @property {number} THERMOSTAT_SETPOINT_SUPPORTED_REPORT=588 THERMOSTAT_SETPOINT_SUPPORTED_REPORT value
                 * @property {number} TIME_GET=589 TIME_GET value
                 * @property {number} TIME_PARAMETERS_GET=590 TIME_PARAMETERS_GET value
                 * @property {number} TIME_PARAMETERS_REPORT=591 TIME_PARAMETERS_REPORT value
                 * @property {number} TIME_PARAMETERS_SET=592 TIME_PARAMETERS_SET value
                 * @property {number} TIME_REPORT=593 TIME_REPORT value
                 * @property {number} TRANSFER_END=594 TRANSFER_END value
                 * @property {number} TRANSFER_NEW_PRIMARY_COMPLETE=595 TRANSFER_NEW_PRIMARY_COMPLETE value
                 * @property {number} TRANSFER_NODE_INFO=596 TRANSFER_NODE_INFO value
                 * @property {number} TRANSFER_PRESENTATION=597 TRANSFER_PRESENTATION value
                 * @property {number} TRANSFER_RANGE_INFO=598 TRANSFER_RANGE_INFO value
                 * @property {number} UNSOLICITED_DESTINATION_GET=599 UNSOLICITED_DESTINATION_GET value
                 * @property {number} UNSOLICITED_DESTINATION_REPORT=600 UNSOLICITED_DESTINATION_REPORT value
                 * @property {number} UNSOLICITED_DESTINATION_SET=601 UNSOLICITED_DESTINATION_SET value
                 * @property {number} USERS_NUMBER_GET=602 USERS_NUMBER_GET value
                 * @property {number} USERS_NUMBER_REPORT=603 USERS_NUMBER_REPORT value
                 * @property {number} USER_CODE_GET=604 USER_CODE_GET value
                 * @property {number} USER_CODE_REPORT=605 USER_CODE_REPORT value
                 * @property {number} USER_CODE_SET=606 USER_CODE_SET value
                 * @property {number} VERSION_COMMAND_CLASS_GET=607 VERSION_COMMAND_CLASS_GET value
                 * @property {number} VERSION_COMMAND_CLASS_REPORT=608 VERSION_COMMAND_CLASS_REPORT value
                 * @property {number} VERSION_GET=609 VERSION_GET value
                 * @property {number} VERSION_REPORT=610 VERSION_REPORT value
                 * @property {number} WAKE_UP_INTERVAL_GET=611 WAKE_UP_INTERVAL_GET value
                 * @property {number} WAKE_UP_INTERVAL_REPORT=612 WAKE_UP_INTERVAL_REPORT value
                 * @property {number} WAKE_UP_INTERVAL_SET=613 WAKE_UP_INTERVAL_SET value
                 * @property {number} WAKE_UP_NOTIFICATION=614 WAKE_UP_NOTIFICATION value
                 * @property {number} WAKE_UP_NO_MORE_INFORMATION=615 WAKE_UP_NO_MORE_INFORMATION value
                 * @property {number} WINDOW_COVERING_GET=616 WINDOW_COVERING_GET value
                 * @property {number} WINDOW_COVERING_REPORT=617 WINDOW_COVERING_REPORT value
                 * @property {number} WINDOW_COVERING_SET=618 WINDOW_COVERING_SET value
                 * @property {number} WINDOW_COVERING_START_LEVEL_CHANGE=619 WINDOW_COVERING_START_LEVEL_CHANGE value
                 * @property {number} WINDOW_COVERING_STOP_LEVEL_CHANGE=620 WINDOW_COVERING_STOP_LEVEL_CHANGE value
                 * @property {number} WINDOW_COVERING_SUPPORTED_GET=621 WINDOW_COVERING_SUPPORTED_GET value
                 * @property {number} WINDOW_COVERING_SUPPORTED_REPORT=622 WINDOW_COVERING_SUPPORTED_REPORT value
                 * @property {number} ZIP_INV_NODE_SOLICITATION=623 ZIP_INV_NODE_SOLICITATION value
                 * @property {number} ZIP_NAMING_LOCATION_GET=624 ZIP_NAMING_LOCATION_GET value
                 * @property {number} ZIP_NAMING_LOCATION_REPORT=625 ZIP_NAMING_LOCATION_REPORT value
                 * @property {number} ZIP_NAMING_LOCATION_SET=626 ZIP_NAMING_LOCATION_SET value
                 * @property {number} ZIP_NAMING_NAME_GET=627 ZIP_NAMING_NAME_GET value
                 * @property {number} ZIP_NAMING_NAME_REPORT=628 ZIP_NAMING_NAME_REPORT value
                 * @property {number} ZIP_NAMING_NAME_SET=629 ZIP_NAMING_NAME_SET value
                 * @property {number} ZIP_NODE_ADVERTISEMENT=630 ZIP_NODE_ADVERTISEMENT value
                 * @property {number} ZIP_NODE_SOLICITATION=631 ZIP_NODE_SOLICITATION value
                 * @property {number} ZWAVEPLUS_INFO_GET=632 ZWAVEPLUS_INFO_GET value
                 * @property {number} ZWAVEPLUS_INFO_REPORT=633 ZWAVEPLUS_INFO_REPORT value
                 * @property {number} ZWAVE_CMD_NOP=634 ZWAVE_CMD_NOP value
                 * @property {number} ZWAVE_CMD_RESERVE_NODE_IDS=635 ZWAVE_CMD_RESERVE_NODE_IDS value
                 */
                comm.ZWaveCmdType = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "CMD_UNDEFINED"] = 0;
                    values[valuesById[1] = "ACCEPT_LOST"] = 1;
                    values[valuesById[2] = "ALARM_GET"] = 2;
                    values[valuesById[3] = "ALARM_REPORT"] = 3;
                    values[valuesById[4] = "ANTITHEFT_GET"] = 4;
                    values[valuesById[5] = "ANTITHEFT_REPORT"] = 5;
                    values[valuesById[6] = "ANTITHEFT_SET"] = 6;
                    values[valuesById[7] = "APPLICATION_BUSY"] = 7;
                    values[valuesById[8] = "APPLICATION_REJECTED_REQUEST"] = 8;
                    values[valuesById[9] = "ASSIGN_ID"] = 9;
                    values[valuesById[10] = "ASSIGN_RETURN_ROUTE"] = 10;
                    values[valuesById[11] = "ASSIGN_RETURN_ROUTE_PRIORITY"] = 11;
                    values[valuesById[12] = "ASSIGN_SUC_RETURN_ROUTE_PRIORITY"] = 12;
                    values[valuesById[13] = "ASSOCIATION_GET"] = 13;
                    values[valuesById[14] = "ASSOCIATION_GROUPINGS_GET"] = 14;
                    values[valuesById[15] = "ASSOCIATION_GROUPINGS_REPORT"] = 15;
                    values[valuesById[16] = "ASSOCIATION_GROUP_COMMAND_LIST_GET"] = 16;
                    values[valuesById[17] = "ASSOCIATION_GROUP_COMMAND_LIST_REPORT"] = 17;
                    values[valuesById[18] = "ASSOCIATION_GROUP_INFO_GET"] = 18;
                    values[valuesById[19] = "ASSOCIATION_GROUP_INFO_REPORT"] = 19;
                    values[valuesById[20] = "ASSOCIATION_GROUP_NAME_GET"] = 20;
                    values[valuesById[21] = "ASSOCIATION_GROUP_NAME_REPORT"] = 21;
                    values[valuesById[22] = "ASSOCIATION_REMOVE"] = 22;
                    values[valuesById[23] = "ASSOCIATION_REPORT"] = 23;
                    values[valuesById[24] = "ASSOCIATION_SET"] = 24;
                    values[valuesById[25] = "AV_CONTENT_BROWSE_MD_BY_LETTER_GET"] = 25;
                    values[valuesById[26] = "AV_CONTENT_BROWSE_MD_BY_LETTER_REPORT"] = 26;
                    values[valuesById[27] = "AV_CONTENT_BROWSE_MD_CHILD_COUNT_GET"] = 27;
                    values[valuesById[28] = "AV_CONTENT_BROWSE_MD_CHILD_COUNT_REPORT"] = 28;
                    values[valuesById[29] = "AV_CONTENT_BROWSE_MD_GET"] = 29;
                    values[valuesById[30] = "AV_CONTENT_BROWSE_MD_REPORT"] = 30;
                    values[valuesById[31] = "AV_CONTENT_SEARCH_MD_GET"] = 31;
                    values[valuesById[32] = "AV_CONTENT_SEARCH_MD_REPORT"] = 32;
                    values[valuesById[33] = "AV_MATCH_ITEM_TO_RENDERER_MD_GET"] = 33;
                    values[valuesById[34] = "AV_MATCH_ITEM_TO_RENDERER_MD_REPORT"] = 34;
                    values[valuesById[35] = "AV_RENDERER_STATUS_GET"] = 35;
                    values[valuesById[36] = "AV_RENDERER_STATUS_REPORT"] = 36;
                    values[valuesById[37] = "AV_TAGGING_MD_GET"] = 37;
                    values[valuesById[38] = "AV_TAGGING_MD_REPORT"] = 38;
                    values[valuesById[39] = "BARRIER_OPERATOR_GET"] = 39;
                    values[valuesById[40] = "BARRIER_OPERATOR_REPORT"] = 40;
                    values[valuesById[41] = "BARRIER_OPERATOR_SET"] = 41;
                    values[valuesById[42] = "BARRIER_OPERATOR_SIGNAL_GET"] = 42;
                    values[valuesById[43] = "BARRIER_OPERATOR_SIGNAL_REPORT"] = 43;
                    values[valuesById[44] = "BARRIER_OPERATOR_SIGNAL_SET"] = 44;
                    values[valuesById[45] = "BARRIER_OPERATOR_SIGNAL_SUPPORTED_GET"] = 45;
                    values[valuesById[46] = "BARRIER_OPERATOR_SIGNAL_SUPPORTED_REPORT"] = 46;
                    values[valuesById[47] = "BASIC_GET"] = 47;
                    values[valuesById[48] = "BASIC_REPORT"] = 48;
                    values[valuesById[49] = "BASIC_SET"] = 49;
                    values[valuesById[50] = "BASIC_TARIFF_INFO_GET"] = 50;
                    values[valuesById[51] = "BASIC_TARIFF_INFO_REPORT"] = 51;
                    values[valuesById[52] = "BASIC_WINDOW_COVERING_START_LEVEL_CHANGE"] = 52;
                    values[valuesById[53] = "BASIC_WINDOW_COVERING_STOP_LEVEL_CHANGE"] = 53;
                    values[valuesById[54] = "BATTERY_GET"] = 54;
                    values[valuesById[55] = "BATTERY_REPORT"] = 55;
                    values[valuesById[56] = "BIND_ACCEPT"] = 56;
                    values[valuesById[57] = "BIND_COMPLETE"] = 57;
                    values[valuesById[58] = "BIND_REQUEST"] = 58;
                    values[valuesById[59] = "CENTRAL_SCENE_NOTIFICATION"] = 59;
                    values[valuesById[60] = "CENTRAL_SCENE_SUPPORTED_GET"] = 60;
                    values[valuesById[61] = "CENTRAL_SCENE_SUPPORTED_REPORT"] = 61;
                    values[valuesById[62] = "CHIMNEY_FAN_ALARM_LOG_GET"] = 62;
                    values[valuesById[63] = "CHIMNEY_FAN_ALARM_LOG_REPORT"] = 63;
                    values[valuesById[64] = "CHIMNEY_FAN_ALARM_LOG_SET"] = 64;
                    values[valuesById[65] = "CHIMNEY_FAN_ALARM_STATUS_GET"] = 65;
                    values[valuesById[66] = "CHIMNEY_FAN_ALARM_STATUS_REPORT"] = 66;
                    values[valuesById[67] = "CHIMNEY_FAN_ALARM_STATUS_SET"] = 67;
                    values[valuesById[68] = "CHIMNEY_FAN_ALARM_TEMP_GET"] = 68;
                    values[valuesById[69] = "CHIMNEY_FAN_ALARM_TEMP_REPORT"] = 69;
                    values[valuesById[70] = "CHIMNEY_FAN_ALARM_TEMP_SET"] = 70;
                    values[valuesById[71] = "CHIMNEY_FAN_BOOST_TIME_GET"] = 71;
                    values[valuesById[72] = "CHIMNEY_FAN_BOOST_TIME_REPORT"] = 72;
                    values[valuesById[73] = "CHIMNEY_FAN_BOOST_TIME_SET"] = 73;
                    values[valuesById[74] = "CHIMNEY_FAN_DEFAULT_SET"] = 74;
                    values[valuesById[75] = "CHIMNEY_FAN_MIN_SPEED_GET"] = 75;
                    values[valuesById[76] = "CHIMNEY_FAN_MIN_SPEED_REPORT"] = 76;
                    values[valuesById[77] = "CHIMNEY_FAN_MIN_SPEED_SET"] = 77;
                    values[valuesById[78] = "CHIMNEY_FAN_MODE_GET"] = 78;
                    values[valuesById[79] = "CHIMNEY_FAN_MODE_REPORT"] = 79;
                    values[valuesById[80] = "CHIMNEY_FAN_MODE_SET"] = 80;
                    values[valuesById[81] = "CHIMNEY_FAN_SETUP_GET"] = 81;
                    values[valuesById[82] = "CHIMNEY_FAN_SETUP_REPORT"] = 82;
                    values[valuesById[83] = "CHIMNEY_FAN_SETUP_SET"] = 83;
                    values[valuesById[84] = "CHIMNEY_FAN_SPEED_GET"] = 84;
                    values[valuesById[85] = "CHIMNEY_FAN_SPEED_REPORT"] = 85;
                    values[valuesById[86] = "CHIMNEY_FAN_SPEED_SET"] = 86;
                    values[valuesById[87] = "CHIMNEY_FAN_START_TEMP_GET"] = 87;
                    values[valuesById[88] = "CHIMNEY_FAN_START_TEMP_REPORT"] = 88;
                    values[valuesById[89] = "CHIMNEY_FAN_START_TEMP_SET"] = 89;
                    values[valuesById[90] = "CHIMNEY_FAN_STATE_GET"] = 90;
                    values[valuesById[91] = "CHIMNEY_FAN_STATE_REPORT"] = 91;
                    values[valuesById[92] = "CHIMNEY_FAN_STATE_SET"] = 92;
                    values[valuesById[93] = "CHIMNEY_FAN_STATUS_GET"] = 93;
                    values[valuesById[94] = "CHIMNEY_FAN_STATUS_REPORT"] = 94;
                    values[valuesById[95] = "CHIMNEY_FAN_STOP_TEMP_GET"] = 95;
                    values[valuesById[96] = "CHIMNEY_FAN_STOP_TEMP_REPORT"] = 96;
                    values[valuesById[97] = "CHIMNEY_FAN_STOP_TEMP_SET"] = 97;
                    values[valuesById[98] = "CHIMNEY_FAN_STOP_TIME_GET"] = 98;
                    values[valuesById[99] = "CHIMNEY_FAN_STOP_TIME_REPORT"] = 99;
                    values[valuesById[100] = "CHIMNEY_FAN_STOP_TIME_SET"] = 100;
                    values[valuesById[101] = "CLOCK_GET"] = 101;
                    values[valuesById[102] = "CLOCK_REPORT"] = 102;
                    values[valuesById[103] = "CLOCK_SET"] = 103;
                    values[valuesById[104] = "CMD_ASSIGN_SUC_RETURN_ROUTE"] = 104;
                    values[valuesById[105] = "CMD_AUTOMATIC_CONTROLLER_UPDATE_START"] = 105;
                    values[valuesById[106] = "CMD_ENCAPSULATION"] = 106;
                    values[valuesById[107] = "CMD_NODES_EXIST"] = 107;
                    values[valuesById[108] = "CMD_NODES_EXIST_REPLY"] = 108;
                    values[valuesById[109] = "CMD_NOP_POWER"] = 109;
                    values[valuesById[110] = "CMD_RESERVED_IDS"] = 110;
                    values[valuesById[111] = "CMD_SET_NWI_MODE"] = 111;
                    values[valuesById[112] = "CMD_SET_SUC"] = 112;
                    values[valuesById[113] = "CMD_SET_SUC_ACK"] = 113;
                    values[valuesById[114] = "CMD_STATIC_ROUTE_REQUEST"] = 114;
                    values[valuesById[115] = "CMD_SUC_NODE_ID"] = 115;
                    values[valuesById[116] = "COMMAND_APPLICATION_NODE_INFO_GET"] = 116;
                    values[valuesById[117] = "COMMAND_APPLICATION_NODE_INFO_REPORT"] = 117;
                    values[valuesById[118] = "COMMAND_APPLICATION_NODE_INFO_SET"] = 118;
                    values[valuesById[119] = "COMMAND_CLASS_SECURITY_PANEL_ZONE_SENSOR_INSTALLED_REPORT"] = 119;
                    values[valuesById[120] = "COMMAND_COMMAND_CLASS_NOT_SUPPORTED"] = 120;
                    values[valuesById[121] = "COMMAND_COMPLETE"] = 121;
                    values[valuesById[122] = "COMMAND_CONFIGURATION_GET"] = 122;
                    values[valuesById[123] = "COMMAND_CONFIGURATION_REPORT"] = 123;
                    values[valuesById[124] = "COMMAND_CONFIGURATION_SET"] = 124;
                    values[valuesById[125] = "COMMAND_FIRST_SEGMENT"] = 125;
                    values[valuesById[126] = "COMMAND_RECORDS_SUPPORTED_GET"] = 126;
                    values[valuesById[127] = "COMMAND_RECORDS_SUPPORTED_REPORT"] = 127;
                    values[valuesById[128] = "COMMAND_SCHEDULE_GET"] = 128;
                    values[valuesById[129] = "COMMAND_SCHEDULE_REPORT"] = 129;
                    values[valuesById[130] = "COMMAND_SCHEDULE_SET"] = 130;
                    values[valuesById[131] = "COMMAND_SEGMENT_COMPLETE"] = 131;
                    values[valuesById[132] = "COMMAND_SEGMENT_REQUEST"] = 132;
                    values[valuesById[133] = "COMMAND_SEGMENT_WAIT"] = 133;
                    values[valuesById[134] = "COMMAND_SUBSEQUENT_SEGMENT"] = 134;
                    values[valuesById[135] = "COMMAND_ZIP_PACKET"] = 135;
                    values[valuesById[136] = "COMPLETE"] = 136;
                    values[valuesById[137] = "CONFIGURATION_GET"] = 137;
                    values[valuesById[138] = "CONFIGURATION_REPORT"] = 138;
                    values[valuesById[139] = "CONFIGURATION_SET"] = 139;
                    values[valuesById[140] = "CONTROLLER_CHANGE"] = 140;
                    values[valuesById[141] = "CONTROLLER_CHANGE_STATUS"] = 141;
                    values[valuesById[142] = "CRC_16_ENCAP"] = 142;
                    values[valuesById[143] = "CTRL_REPLICATION_TRANSFER_GROUP"] = 143;
                    values[valuesById[144] = "CTRL_REPLICATION_TRANSFER_GROUP_NAME"] = 144;
                    values[valuesById[145] = "CTRL_REPLICATION_TRANSFER_SCENE"] = 145;
                    values[valuesById[146] = "CTRL_REPLICATION_TRANSFER_SCENE_NAME"] = 146;
                    values[valuesById[147] = "DATE_GET"] = 147;
                    values[valuesById[148] = "DATE_REPORT"] = 148;
                    values[valuesById[149] = "DCP_EVENT_STATUS_GET"] = 149;
                    values[valuesById[150] = "DCP_EVENT_STATUS_REPORT"] = 150;
                    values[valuesById[151] = "DCP_LIST_GET"] = 151;
                    values[valuesById[152] = "DCP_LIST_REMOVE"] = 152;
                    values[valuesById[153] = "DCP_LIST_REPORT"] = 153;
                    values[valuesById[154] = "DCP_LIST_SET"] = 154;
                    values[valuesById[155] = "DCP_LIST_SUPPORTED_GET"] = 155;
                    values[valuesById[156] = "DCP_LIST_SUPPORTED_REPORT"] = 156;
                    values[valuesById[157] = "DEFAULT_SET"] = 157;
                    values[valuesById[158] = "DEFAULT_SET_COMPLETE"] = 158;
                    values[valuesById[159] = "DEVICE_RESET_LOCALLY_NOTIFICATION"] = 159;
                    values[valuesById[160] = "DMX_ADDRESS_GET"] = 160;
                    values[valuesById[161] = "DMX_ADDRESS_REPORT"] = 161;
                    values[valuesById[162] = "DMX_ADDRESS_SET"] = 162;
                    values[valuesById[163] = "DMX_CAPABILITY_GET"] = 163;
                    values[valuesById[164] = "DMX_CAPABILITY_REPORT"] = 164;
                    values[valuesById[165] = "DMX_DATA"] = 165;
                    values[valuesById[166] = "DOOR_LOCK_CONFIGURATION_GET"] = 166;
                    values[valuesById[167] = "DOOR_LOCK_CONFIGURATION_REPORT"] = 167;
                    values[valuesById[168] = "DOOR_LOCK_CONFIGURATION_SET"] = 168;
                    values[valuesById[169] = "DOOR_LOCK_LOGGING_RECORDS_SUPPORTED_GET"] = 169;
                    values[valuesById[170] = "DOOR_LOCK_LOGGING_RECORDS_SUPPORTED_REPORT"] = 170;
                    values[valuesById[171] = "DOOR_LOCK_OPERATION_GET"] = 171;
                    values[valuesById[172] = "DOOR_LOCK_OPERATION_REPORT"] = 172;
                    values[valuesById[173] = "DOOR_LOCK_OPERATION_SET"] = 173;
                    values[valuesById[174] = "ENERGY_PRODUCTION_GET"] = 174;
                    values[valuesById[175] = "ENERGY_PRODUCTION_REPORT"] = 175;
                    values[valuesById[176] = "ENTRY_CONTROL_CONFIGURATION_GET"] = 176;
                    values[valuesById[177] = "ENTRY_CONTROL_CONFIGURATION_REPORT"] = 177;
                    values[valuesById[178] = "ENTRY_CONTROL_CONFIGURATION_SET"] = 178;
                    values[valuesById[179] = "ENTRY_CONTROL_EVENT_SUPPORTED_GET"] = 179;
                    values[valuesById[180] = "ENTRY_CONTROL_EVENT_SUPPORTED_REPORT"] = 180;
                    values[valuesById[181] = "ENTRY_CONTROL_KEY_SUPPORTED_GET"] = 181;
                    values[valuesById[182] = "ENTRY_CONTROL_KEY_SUPPORTED_REPORT"] = 182;
                    values[valuesById[183] = "ENTRY_CONTROL_NOTIFICATION"] = 183;
                    values[valuesById[184] = "EVENT_SUPPORTED_GET"] = 184;
                    values[valuesById[185] = "EVENT_SUPPORTED_REPORT"] = 185;
                    values[valuesById[186] = "EXCLUDE_REQUEST"] = 186;
                    values[valuesById[187] = "FAILED_NODE_REMOVE"] = 187;
                    values[valuesById[188] = "FAILED_NODE_REMOVE_STATUS"] = 188;
                    values[valuesById[189] = "FAILED_NODE_REPLACE"] = 189;
                    values[valuesById[190] = "FAILED_NODE_REPLACE_STATUS"] = 190;
                    values[valuesById[191] = "FIND_NODES_IN_RANGE"] = 191;
                    values[valuesById[192] = "FIRMWARE_MD_GET"] = 192;
                    values[valuesById[193] = "FIRMWARE_MD_REPORT"] = 193;
                    values[valuesById[194] = "FIRMWARE_UPDATE_MD_GET"] = 194;
                    values[valuesById[195] = "FIRMWARE_UPDATE_MD_REPORT"] = 195;
                    values[valuesById[196] = "FIRMWARE_UPDATE_MD_REQUEST_GET"] = 196;
                    values[valuesById[197] = "FIRMWARE_UPDATE_MD_REQUEST_REPORT"] = 197;
                    values[valuesById[198] = "FIRMWARE_UPDATE_MD_STATUS_REPORT"] = 198;
                    values[valuesById[199] = "GATEWAY_CONFIGURATION_GET"] = 199;
                    values[valuesById[200] = "GATEWAY_CONFIGURATION_REPORT"] = 200;
                    values[valuesById[201] = "GATEWAY_CONFIGURATION_SET"] = 201;
                    values[valuesById[202] = "GATEWAY_CONFIGURATION_STATUS"] = 202;
                    values[valuesById[203] = "GATEWAY_LOCK_SET"] = 203;
                    values[valuesById[204] = "GATEWAY_MODE_GET"] = 204;
                    values[valuesById[205] = "GATEWAY_MODE_REPORT"] = 205;
                    values[valuesById[206] = "GATEWAY_MODE_SET"] = 206;
                    values[valuesById[207] = "GATEWAY_PEER_GET"] = 207;
                    values[valuesById[208] = "GATEWAY_PEER_REPORT"] = 208;
                    values[valuesById[209] = "GATEWAY_PEER_SET"] = 209;
                    values[valuesById[210] = "GEOGRAPHIC_LOCATION_GET"] = 210;
                    values[valuesById[211] = "GEOGRAPHIC_LOCATION_REPORT"] = 211;
                    values[valuesById[212] = "GEOGRAPHIC_LOCATION_SET"] = 212;
                    values[valuesById[213] = "GET_NODES_IN_RANGE"] = 213;
                    values[valuesById[214] = "GROUPING_NAME_GET"] = 214;
                    values[valuesById[215] = "GROUPING_NAME_REPORT"] = 215;
                    values[valuesById[216] = "GROUPING_NAME_SET"] = 216;
                    values[valuesById[217] = "HAIL"] = 217;
                    values[valuesById[218] = "HRV_CONTROL_BYPASS_GET"] = 218;
                    values[valuesById[219] = "HRV_CONTROL_BYPASS_REPORT"] = 219;
                    values[valuesById[220] = "HRV_CONTROL_BYPASS_SET"] = 220;
                    values[valuesById[221] = "HRV_CONTROL_MODE_GET"] = 221;
                    values[valuesById[222] = "HRV_CONTROL_MODE_REPORT"] = 222;
                    values[valuesById[223] = "HRV_CONTROL_MODE_SET"] = 223;
                    values[valuesById[224] = "HRV_CONTROL_MODE_SUPPORTED_GET"] = 224;
                    values[valuesById[225] = "HRV_CONTROL_MODE_SUPPORTED_REPORT"] = 225;
                    values[valuesById[226] = "HRV_CONTROL_VENTILATION_RATE_GET"] = 226;
                    values[valuesById[227] = "HRV_CONTROL_VENTILATION_RATE_REPORT"] = 227;
                    values[valuesById[228] = "HRV_CONTROL_VENTILATION_RATE_SET"] = 228;
                    values[valuesById[229] = "HRV_STATUS_GET"] = 229;
                    values[valuesById[230] = "HRV_STATUS_REPORT"] = 230;
                    values[valuesById[231] = "HRV_STATUS_SUPPORTED_GET"] = 231;
                    values[valuesById[232] = "HRV_STATUS_SUPPORTED_REPORT"] = 232;
                    values[valuesById[233] = "HUMIDITY_CONTROL_MODE_GET"] = 233;
                    values[valuesById[234] = "HUMIDITY_CONTROL_MODE_REPORT"] = 234;
                    values[valuesById[235] = "HUMIDITY_CONTROL_MODE_SET"] = 235;
                    values[valuesById[236] = "HUMIDITY_CONTROL_MODE_SUPPORTED_GET"] = 236;
                    values[valuesById[237] = "HUMIDITY_CONTROL_MODE_SUPPORTED_REPORT"] = 237;
                    values[valuesById[238] = "HUMIDITY_CONTROL_OPERATING_STATE_GET"] = 238;
                    values[valuesById[239] = "HUMIDITY_CONTROL_OPERATING_STATE_REPORT"] = 239;
                    values[valuesById[240] = "HUMIDITY_CONTROL_SETPOINT_CAPABILITIES_GET"] = 240;
                    values[valuesById[241] = "HUMIDITY_CONTROL_SETPOINT_CAPABILITIES_REPORT"] = 241;
                    values[valuesById[242] = "HUMIDITY_CONTROL_SETPOINT_GET"] = 242;
                    values[valuesById[243] = "HUMIDITY_CONTROL_SETPOINT_REPORT"] = 243;
                    values[valuesById[244] = "HUMIDITY_CONTROL_SETPOINT_SCALE_SUPPORTED_GET"] = 244;
                    values[valuesById[245] = "HUMIDITY_CONTROL_SETPOINT_SCALE_SUPPORTED_REPORT"] = 245;
                    values[valuesById[246] = "HUMIDITY_CONTROL_SETPOINT_SET"] = 246;
                    values[valuesById[247] = "HUMIDITY_CONTROL_SETPOINT_SUPPORTED_GET"] = 247;
                    values[valuesById[248] = "HUMIDITY_CONTROL_SETPOINT_SUPPORTED_REPORT"] = 248;
                    values[valuesById[249] = "INDICATOR_GET"] = 249;
                    values[valuesById[250] = "INDICATOR_REPORT"] = 250;
                    values[valuesById[251] = "INDICATOR_SET"] = 251;
                    values[valuesById[252] = "INITIATE"] = 252;
                    values[valuesById[253] = "IP_ASSOCIATION_GET"] = 253;
                    values[valuesById[254] = "IP_ASSOCIATION_REMOVE"] = 254;
                    values[valuesById[255] = "IP_ASSOCIATION_REPORT"] = 255;
                    values[valuesById[256] = "IP_ASSOCIATION_SET"] = 256;
                    values[valuesById[257] = "IP_CONFIGURATION_GET"] = 257;
                    values[valuesById[258] = "IP_CONFIGURATION_RELEASE"] = 258;
                    values[valuesById[259] = "IP_CONFIGURATION_RENEW"] = 259;
                    values[valuesById[260] = "IP_CONFIGURATION_REPORT"] = 260;
                    values[valuesById[261] = "IP_CONFIGURATION_SET"] = 261;
                    values[valuesById[262] = "IRRIGATION_SYSTEM_CONFIG_GET"] = 262;
                    values[valuesById[263] = "IRRIGATION_SYSTEM_CONFIG_REPORT"] = 263;
                    values[valuesById[264] = "IRRIGATION_SYSTEM_CONFIG_SET"] = 264;
                    values[valuesById[265] = "IRRIGATION_SYSTEM_INFO_GET"] = 265;
                    values[valuesById[266] = "IRRIGATION_SYSTEM_INFO_REPORT"] = 266;
                    values[valuesById[267] = "IRRIGATION_SYSTEM_SHUTOFF"] = 267;
                    values[valuesById[268] = "IRRIGATION_SYSTEM_STATUS_GET"] = 268;
                    values[valuesById[269] = "IRRIGATION_SYSTEM_STATUS_REPORT"] = 269;
                    values[valuesById[270] = "IRRIGATION_VALVE_CONFIG_GET"] = 270;
                    values[valuesById[271] = "IRRIGATION_VALVE_CONFIG_REPORT"] = 271;
                    values[valuesById[272] = "IRRIGATION_VALVE_CONFIG_SET"] = 272;
                    values[valuesById[273] = "IRRIGATION_VALVE_INFO_GET"] = 273;
                    values[valuesById[274] = "IRRIGATION_VALVE_INFO_REPORT"] = 274;
                    values[valuesById[275] = "IRRIGATION_VALVE_RUN"] = 275;
                    values[valuesById[276] = "IRRIGATION_VALVE_TABLE_GET"] = 276;
                    values[valuesById[277] = "IRRIGATION_VALVE_TABLE_REPORT"] = 277;
                    values[valuesById[278] = "IRRIGATION_VALVE_TABLE_RUN"] = 278;
                    values[valuesById[279] = "IRRIGATION_VALVE_TABLE_SET"] = 279;
                    values[valuesById[280] = "KEX_FAIL"] = 280;
                    values[valuesById[281] = "KEX_GET"] = 281;
                    values[valuesById[282] = "KEX_REPORT"] = 282;
                    values[valuesById[283] = "KEX_SET"] = 283;
                    values[valuesById[284] = "LANGUAGE_GET"] = 284;
                    values[valuesById[285] = "LANGUAGE_REPORT"] = 285;
                    values[valuesById[286] = "LANGUAGE_SET"] = 286;
                    values[valuesById[287] = "LAST_WORKING_ROUTE_GET"] = 287;
                    values[valuesById[288] = "LAST_WORKING_ROUTE_REPORT"] = 288;
                    values[valuesById[289] = "LAST_WORKING_ROUTE_SET"] = 289;
                    values[valuesById[290] = "LEARN_MODE_SET"] = 290;
                    values[valuesById[291] = "LEARN_MODE_SET_STATUS"] = 291;
                    values[valuesById[292] = "LOCK_GET"] = 292;
                    values[valuesById[293] = "LOCK_REPORT"] = 293;
                    values[valuesById[294] = "LOCK_SET"] = 294;
                    values[valuesById[295] = "LOST"] = 295;
                    values[valuesById[296] = "LOWPAN_FIRST_FRAGMENT"] = 296;
                    values[valuesById[297] = "LOWPAN_SUBSEQUENT_FRAGMENT"] = 297;
                    values[valuesById[298] = "MAILBOX_CONFIGURATION_GET"] = 298;
                    values[valuesById[299] = "MAILBOX_CONFIGURATION_REPORT"] = 299;
                    values[valuesById[300] = "MAILBOX_CONFIGURATION_SET"] = 300;
                    values[valuesById[301] = "MAILBOX_NODE_FAILING"] = 301;
                    values[valuesById[302] = "MAILBOX_QUEUE"] = 302;
                    values[valuesById[303] = "MAILBOX_WAKEUP_NOTIFICATION"] = 303;
                    values[valuesById[304] = "MANUFACTURER_SPECIFIC_GET"] = 304;
                    values[valuesById[305] = "MANUFACTURER_SPECIFIC_REPORT"] = 305;
                    values[valuesById[306] = "METER_GET"] = 306;
                    values[valuesById[307] = "METER_PULSE_GET"] = 307;
                    values[valuesById[308] = "METER_PULSE_REPORT"] = 308;
                    values[valuesById[309] = "METER_REPORT"] = 309;
                    values[valuesById[310] = "METER_TBL_CURRENT_DATA_GET"] = 310;
                    values[valuesById[311] = "METER_TBL_CURRENT_DATA_REPORT"] = 311;
                    values[valuesById[312] = "METER_TBL_HISTORICAL_DATA_GET"] = 312;
                    values[valuesById[313] = "METER_TBL_HISTORICAL_DATA_REPORT"] = 313;
                    values[valuesById[314] = "METER_TBL_PUSH_CONFIGURATION_GET"] = 314;
                    values[valuesById[315] = "METER_TBL_PUSH_CONFIGURATION_REPORT"] = 315;
                    values[valuesById[316] = "METER_TBL_PUSH_CONFIGURATION_SET"] = 316;
                    values[valuesById[317] = "METER_TBL_REPORT"] = 317;
                    values[valuesById[318] = "METER_TBL_STATUS_DATE_GET"] = 318;
                    values[valuesById[319] = "METER_TBL_STATUS_DEPTH_GET"] = 319;
                    values[valuesById[320] = "METER_TBL_STATUS_REPORT"] = 320;
                    values[valuesById[321] = "METER_TBL_STATUS_SUPPORTED_GET"] = 321;
                    values[valuesById[322] = "METER_TBL_STATUS_SUPPORTED_REPORT"] = 322;
                    values[valuesById[323] = "METER_TBL_TABLE_CAPABILITY_GET"] = 323;
                    values[valuesById[324] = "METER_TBL_TABLE_ID_GET"] = 324;
                    values[valuesById[325] = "METER_TBL_TABLE_ID_REPORT"] = 325;
                    values[valuesById[326] = "METER_TBL_TABLE_POINT_ADM_NO_GET"] = 326;
                    values[valuesById[327] = "METER_TBL_TABLE_POINT_ADM_NO_REPORT"] = 327;
                    values[valuesById[328] = "METER_TBL_TABLE_POINT_ADM_NO_SET"] = 328;
                    values[valuesById[329] = "MOVE_TO_POSITION_GET"] = 329;
                    values[valuesById[330] = "MOVE_TO_POSITION_REPORT"] = 330;
                    values[valuesById[331] = "MOVE_TO_POSITION_SET"] = 331;
                    values[valuesById[332] = "MULTI_CHANNEL_ASSOCIATION_GET"] = 332;
                    values[valuesById[333] = "MULTI_CHANNEL_ASSOCIATION_GROUPINGS_GET"] = 333;
                    values[valuesById[334] = "MULTI_CHANNEL_ASSOCIATION_GROUPINGS_REPORT"] = 334;
                    values[valuesById[335] = "MULTI_CHANNEL_ASSOCIATION_REMOVE"] = 335;
                    values[valuesById[336] = "MULTI_CHANNEL_ASSOCIATION_REPORT"] = 336;
                    values[valuesById[337] = "MULTI_CHANNEL_ASSOCIATION_SET"] = 337;
                    values[valuesById[338] = "MULTI_CHANNEL_CAPABILITY_GET"] = 338;
                    values[valuesById[339] = "MULTI_CHANNEL_CAPABILITY_REPORT"] = 339;
                    values[valuesById[340] = "MULTI_CHANNEL_CMD_ENCAP"] = 340;
                    values[valuesById[341] = "MULTI_CHANNEL_END_POINT_FIND"] = 341;
                    values[valuesById[342] = "MULTI_CHANNEL_END_POINT_FIND_REPORT"] = 342;
                    values[valuesById[343] = "MULTI_CHANNEL_END_POINT_GET"] = 343;
                    values[valuesById[344] = "MULTI_CHANNEL_END_POINT_REPORT"] = 344;
                    values[valuesById[345] = "MULTI_CMD_ENCAP"] = 345;
                    values[valuesById[346] = "MULTI_INSTANCE_ASSOCIATION_GET"] = 346;
                    values[valuesById[347] = "MULTI_INSTANCE_ASSOCIATION_GROUPINGS_GET"] = 347;
                    values[valuesById[348] = "MULTI_INSTANCE_ASSOCIATION_GROUPINGS_REPORT"] = 348;
                    values[valuesById[349] = "MULTI_INSTANCE_ASSOCIATION_REMOVE"] = 349;
                    values[valuesById[350] = "MULTI_INSTANCE_ASSOCIATION_REPORT"] = 350;
                    values[valuesById[351] = "MULTI_INSTANCE_ASSOCIATION_SET"] = 351;
                    values[valuesById[352] = "MULTI_INSTANCE_CMD_ENCAP"] = 352;
                    values[valuesById[353] = "MULTI_INSTANCE_GET"] = 353;
                    values[valuesById[354] = "MULTI_INSTANCE_REPORT"] = 354;
                    values[valuesById[355] = "NETWORK_KEY_SET"] = 355;
                    values[valuesById[356] = "NETWORK_KEY_VERIFY"] = 356;
                    values[valuesById[357] = "NETWORK_UPDATE_REQUEST"] = 357;
                    values[valuesById[358] = "NETWORK_UPDATE_REQUEST_STATUS"] = 358;
                    values[valuesById[359] = "NEW_NODE_REGISTERED"] = 359;
                    values[valuesById[360] = "NEW_RANGE_REGISTERED"] = 360;
                    values[valuesById[361] = "NODE_ADD"] = 361;
                    values[valuesById[362] = "NODE_ADD_STATUS"] = 362;
                    values[valuesById[363] = "NODE_INFO"] = 363;
                    values[valuesById[364] = "NODE_INFORMATION_SEND"] = 364;
                    values[valuesById[365] = "NODE_INFO_CACHED_GET"] = 365;
                    values[valuesById[366] = "NODE_INFO_CACHED_REPORT"] = 366;
                    values[valuesById[367] = "NODE_LIST_GET"] = 367;
                    values[valuesById[368] = "NODE_LIST_REPORT"] = 368;
                    values[valuesById[369] = "NODE_NAMING_NODE_LOCATION_GET"] = 369;
                    values[valuesById[370] = "NODE_NAMING_NODE_LOCATION_REPORT"] = 370;
                    values[valuesById[371] = "NODE_NAMING_NODE_LOCATION_SET"] = 371;
                    values[valuesById[372] = "NODE_NAMING_NODE_NAME_GET"] = 372;
                    values[valuesById[373] = "NODE_NAMING_NODE_NAME_REPORT"] = 373;
                    values[valuesById[374] = "NODE_NAMING_NODE_NAME_SET"] = 374;
                    values[valuesById[375] = "NODE_NEIGHBOR_UPDATE_REQUEST"] = 375;
                    values[valuesById[376] = "NODE_NEIGHBOR_UPDATE_STATUS"] = 376;
                    values[valuesById[377] = "NODE_RANGE_INFO"] = 377;
                    values[valuesById[378] = "NODE_REMOVE"] = 378;
                    values[valuesById[379] = "NODE_REMOVE_STATUS"] = 379;
                    values[valuesById[380] = "NOTIFICATION_GET"] = 380;
                    values[valuesById[381] = "NOTIFICATION_REPORT"] = 381;
                    values[valuesById[382] = "NOTIFICATION_SET"] = 382;
                    values[valuesById[383] = "NOTIFICATION_SUPPORTED_GET"] = 383;
                    values[valuesById[384] = "NOTIFICATION_SUPPORTED_REPORT"] = 384;
                    values[valuesById[385] = "POWERLEVEL_GET"] = 385;
                    values[valuesById[386] = "POWERLEVEL_REPORT"] = 386;
                    values[valuesById[387] = "POWERLEVEL_SET"] = 387;
                    values[valuesById[388] = "POWERLEVEL_TEST_NODE_GET"] = 388;
                    values[valuesById[389] = "POWERLEVEL_TEST_NODE_REPORT"] = 389;
                    values[valuesById[390] = "POWERLEVEL_TEST_NODE_SET"] = 390;
                    values[valuesById[391] = "PREPAYMENT_BALANCE_GET"] = 391;
                    values[valuesById[392] = "PREPAYMENT_BALANCE_REPORT"] = 392;
                    values[valuesById[393] = "PREPAYMENT_SUPPORTED_GET"] = 393;
                    values[valuesById[394] = "PREPAYMENT_SUPPORTED_REPORT"] = 394;
                    values[valuesById[395] = "PROPRIETARY_GET"] = 395;
                    values[valuesById[396] = "PROPRIETARY_REPORT"] = 396;
                    values[valuesById[397] = "PROPRIETARY_SET"] = 397;
                    values[valuesById[398] = "PROTECTION_GET"] = 398;
                    values[valuesById[399] = "PROTECTION_REPORT"] = 399;
                    values[valuesById[400] = "PROTECTION_SET"] = 400;
                    values[valuesById[401] = "PUBLIC_KEY_REPORT"] = 401;
                    values[valuesById[402] = "RATE_TBL_ACTIVE_RATE_GET"] = 402;
                    values[valuesById[403] = "RATE_TBL_ACTIVE_RATE_REPORT"] = 403;
                    values[valuesById[404] = "RATE_TBL_CURRENT_DATA_GET"] = 404;
                    values[valuesById[405] = "RATE_TBL_CURRENT_DATA_REPORT"] = 405;
                    values[valuesById[406] = "RATE_TBL_GET"] = 406;
                    values[valuesById[407] = "RATE_TBL_HISTORICAL_DATA_GET"] = 407;
                    values[valuesById[408] = "RATE_TBL_HISTORICAL_DATA_REPORT"] = 408;
                    values[valuesById[409] = "RATE_TBL_REMOVE"] = 409;
                    values[valuesById[410] = "RATE_TBL_REPORT"] = 410;
                    values[valuesById[411] = "RATE_TBL_SET"] = 411;
                    values[valuesById[412] = "RATE_TBL_SUPPORTED_GET"] = 412;
                    values[valuesById[413] = "RATE_TBL_SUPPORTED_REPORT"] = 413;
                    values[valuesById[414] = "RECORD_GET"] = 414;
                    values[valuesById[415] = "RECORD_REPORT"] = 415;
                    values[valuesById[416] = "REMOTE_ASSOCIATION_ACTIVATE"] = 416;
                    values[valuesById[417] = "REMOTE_ASSOCIATION_CONFIGURATION_GET"] = 417;
                    values[valuesById[418] = "REMOTE_ASSOCIATION_CONFIGURATION_REPORT"] = 418;
                    values[valuesById[419] = "REMOTE_ASSOCIATION_CONFIGURATION_SET"] = 419;
                    values[valuesById[420] = "REQUEST_NODE_INFO"] = 420;
                    values[valuesById[421] = "RETURN_ROUTE_ASSIGN"] = 421;
                    values[valuesById[422] = "RETURN_ROUTE_ASSIGN_COMPLETE"] = 422;
                    values[valuesById[423] = "RETURN_ROUTE_DELETE"] = 423;
                    values[valuesById[424] = "RETURN_ROUTE_DELETE_COMPLETE"] = 424;
                    values[valuesById[425] = "SCENE_ACTIVATION_SET"] = 425;
                    values[valuesById[426] = "SCENE_ACTUATOR_CONF_GET"] = 426;
                    values[valuesById[427] = "SCENE_ACTUATOR_CONF_REPORT"] = 427;
                    values[valuesById[428] = "SCENE_ACTUATOR_CONF_SET"] = 428;
                    values[valuesById[429] = "SCENE_CONTROLLER_CONF_GET"] = 429;
                    values[valuesById[430] = "SCENE_CONTROLLER_CONF_REPORT"] = 430;
                    values[valuesById[431] = "SCENE_CONTROLLER_CONF_SET"] = 431;
                    values[valuesById[432] = "SCHEDULE_CHANGED_GET"] = 432;
                    values[valuesById[433] = "SCHEDULE_CHANGED_REPORT"] = 433;
                    values[valuesById[434] = "SCHEDULE_ENTRY_LOCK_ENABLE_ALL_SET"] = 434;
                    values[valuesById[435] = "SCHEDULE_ENTRY_LOCK_ENABLE_SET"] = 435;
                    values[valuesById[436] = "SCHEDULE_ENTRY_LOCK_WEEK_DAY_GET"] = 436;
                    values[valuesById[437] = "SCHEDULE_ENTRY_LOCK_WEEK_DAY_REPORT"] = 437;
                    values[valuesById[438] = "SCHEDULE_ENTRY_LOCK_WEEK_DAY_SET"] = 438;
                    values[valuesById[439] = "SCHEDULE_ENTRY_LOCK_YEAR_DAY_GET"] = 439;
                    values[valuesById[440] = "SCHEDULE_ENTRY_LOCK_YEAR_DAY_REPORT"] = 440;
                    values[valuesById[441] = "SCHEDULE_ENTRY_LOCK_YEAR_DAY_SET"] = 441;
                    values[valuesById[442] = "SCHEDULE_ENTRY_TYPE_SUPPORTED_GET"] = 442;
                    values[valuesById[443] = "SCHEDULE_ENTRY_TYPE_SUPPORTED_REPORT"] = 443;
                    values[valuesById[444] = "SCHEDULE_GET"] = 444;
                    values[valuesById[445] = "SCHEDULE_OVERRIDE_GET"] = 445;
                    values[valuesById[446] = "SCHEDULE_OVERRIDE_REPORT"] = 446;
                    values[valuesById[447] = "SCHEDULE_OVERRIDE_SET"] = 447;
                    values[valuesById[448] = "SCHEDULE_REMOVE"] = 448;
                    values[valuesById[449] = "SCHEDULE_REPORT"] = 449;
                    values[valuesById[450] = "SCHEDULE_SET"] = 450;
                    values[valuesById[451] = "SCHEDULE_STATE_GET"] = 451;
                    values[valuesById[452] = "SCHEDULE_STATE_REPORT"] = 452;
                    values[valuesById[453] = "SCHEDULE_STATE_SET"] = 453;
                    values[valuesById[454] = "SCHEDULE_SUPPORTED_GET"] = 454;
                    values[valuesById[455] = "SCHEDULE_SUPPORTED_REPORT"] = 455;
                    values[valuesById[456] = "SCREEN_ATTRIBUTES_GET"] = 456;
                    values[valuesById[457] = "SCREEN_ATTRIBUTES_REPORT"] = 457;
                    values[valuesById[458] = "SCREEN_MD_GET"] = 458;
                    values[valuesById[459] = "SCREEN_MD_REPORT"] = 459;
                    values[valuesById[460] = "SECURITY_2_CAPABILITIES_GET"] = 460;
                    values[valuesById[461] = "SECURITY_2_CAPABILITIES_REPORT"] = 461;
                    values[valuesById[462] = "SECURITY_2_COMMANDS_SUPPORTED_GET"] = 462;
                    values[valuesById[463] = "SECURITY_2_COMMANDS_SUPPORTED_REPORT"] = 463;
                    values[valuesById[464] = "SECURITY_2_MESSAGE_ENCAPSULATION"] = 464;
                    values[valuesById[465] = "SECURITY_2_NETWORK_KEY_GET"] = 465;
                    values[valuesById[466] = "SECURITY_2_NETWORK_KEY_REPORT"] = 466;
                    values[valuesById[467] = "SECURITY_2_NETWORK_KEY_VERIFY"] = 467;
                    values[valuesById[468] = "SECURITY_2_NONCE_GET"] = 468;
                    values[valuesById[469] = "SECURITY_2_NONCE_REPORT"] = 469;
                    values[valuesById[470] = "SECURITY_2_TRANSFER_END"] = 470;
                    values[valuesById[471] = "SECURITY_COMMANDS_SUPPORTED_GET"] = 471;
                    values[valuesById[472] = "SECURITY_COMMANDS_SUPPORTED_REPORT"] = 472;
                    values[valuesById[473] = "SECURITY_MESSAGE_ENCAPSULATION"] = 473;
                    values[valuesById[474] = "SECURITY_MESSAGE_ENCAPSULATION_NONCE_GET"] = 474;
                    values[valuesById[475] = "SECURITY_NONCE_GET"] = 475;
                    values[valuesById[476] = "SECURITY_NONCE_REPORT"] = 476;
                    values[valuesById[477] = "SECURITY_PANEL_MODE_GET"] = 477;
                    values[valuesById[478] = "SECURITY_PANEL_MODE_REPORT"] = 478;
                    values[valuesById[479] = "SECURITY_PANEL_MODE_SET"] = 479;
                    values[valuesById[480] = "SECURITY_PANEL_MODE_SUPPORTED_GET"] = 480;
                    values[valuesById[481] = "SECURITY_PANEL_MODE_SUPPORTED_REPORT"] = 481;
                    values[valuesById[482] = "SECURITY_PANEL_ZONE_NUMBER_SUPPORTED_GET"] = 482;
                    values[valuesById[483] = "SECURITY_PANEL_ZONE_SENSOR_INSTALLED_GET"] = 483;
                    values[valuesById[484] = "SECURITY_PANEL_ZONE_SENSOR_STATE_GET"] = 484;
                    values[valuesById[485] = "SECURITY_PANEL_ZONE_SENSOR_STATE_REPORT"] = 485;
                    values[valuesById[486] = "SECURITY_PANEL_ZONE_SENSOR_TYPE_GET"] = 486;
                    values[valuesById[487] = "SECURITY_PANEL_ZONE_SENSOR_TYPE_REPORT"] = 487;
                    values[valuesById[488] = "SECURITY_PANEL_ZONE_STATE_GET"] = 488;
                    values[valuesById[489] = "SECURITY_PANEL_ZONE_STATE_REPORT"] = 489;
                    values[valuesById[490] = "SECURITY_PANEL_ZONE_SUPPORTED_REPORT"] = 490;
                    values[valuesById[491] = "SECURITY_PANEL_ZONE_TYPE_GET"] = 491;
                    values[valuesById[492] = "SECURITY_PANEL_ZONE_TYPE_REPORT"] = 492;
                    values[valuesById[493] = "SECURITY_SCHEME_GET"] = 493;
                    values[valuesById[494] = "SECURITY_SCHEME_INHERIT"] = 494;
                    values[valuesById[495] = "SECURITY_SCHEME_REPORT"] = 495;
                    values[valuesById[496] = "SENSOR_ALARM_GET"] = 496;
                    values[valuesById[497] = "SENSOR_ALARM_REPORT"] = 497;
                    values[valuesById[498] = "SENSOR_ALARM_SET"] = 498;
                    values[valuesById[499] = "SENSOR_ALARM_SUPPORTED_GET"] = 499;
                    values[valuesById[500] = "SENSOR_ALARM_SUPPORTED_REPORT"] = 500;
                    values[valuesById[501] = "SENSOR_BINARY_GET"] = 501;
                    values[valuesById[502] = "SENSOR_BINARY_REPORT"] = 502;
                    values[valuesById[503] = "SENSOR_MULTILEVEL_GET"] = 503;
                    values[valuesById[504] = "SENSOR_MULTILEVEL_REPORT"] = 504;
                    values[valuesById[505] = "SENSOR_TRIGGER_LEVEL_GET"] = 505;
                    values[valuesById[506] = "SENSOR_TRIGGER_LEVEL_REPORT"] = 506;
                    values[valuesById[507] = "SENSOR_TRIGGER_LEVEL_SET"] = 507;
                    values[valuesById[508] = "SIMPLE_AV_CONTROL_GET"] = 508;
                    values[valuesById[509] = "SIMPLE_AV_CONTROL_REPORT"] = 509;
                    values[valuesById[510] = "SIMPLE_AV_CONTROL_SET"] = 510;
                    values[valuesById[511] = "SIMPLE_AV_CONTROL_SUPPORTED_GET"] = 511;
                    values[valuesById[512] = "SIMPLE_AV_CONTROL_SUPPORTED_REPORT"] = 512;
                    values[valuesById[513] = "STATISTICS_CLEAR"] = 513;
                    values[valuesById[514] = "STATISTICS_GET"] = 514;
                    values[valuesById[515] = "STATISTICS_REPORT"] = 515;
                    values[valuesById[516] = "SUPERVISION_GET"] = 516;
                    values[valuesById[517] = "SUPERVISION_REPORT"] = 517;
                    values[valuesById[518] = "SWITCH_ALL_GET"] = 518;
                    values[valuesById[519] = "SWITCH_ALL_OFF"] = 519;
                    values[valuesById[520] = "SWITCH_ALL_ON"] = 520;
                    values[valuesById[521] = "SWITCH_ALL_REPORT"] = 521;
                    values[valuesById[522] = "SWITCH_ALL_SET"] = 522;
                    values[valuesById[523] = "SWITCH_BINARY_GET"] = 523;
                    values[valuesById[524] = "SWITCH_BINARY_REPORT"] = 524;
                    values[valuesById[525] = "SWITCH_BINARY_SET"] = 525;
                    values[valuesById[526] = "SWITCH_COLOR_GET"] = 526;
                    values[valuesById[527] = "SWITCH_COLOR_REPORT"] = 527;
                    values[valuesById[528] = "SWITCH_COLOR_SET"] = 528;
                    values[valuesById[529] = "SWITCH_COLOR_START_LEVEL_CHANGE"] = 529;
                    values[valuesById[530] = "SWITCH_COLOR_STOP_LEVEL_CHANGE"] = 530;
                    values[valuesById[531] = "SWITCH_COLOR_SUPPORTED_GET"] = 531;
                    values[valuesById[532] = "SWITCH_COLOR_SUPPORTED_REPORT"] = 532;
                    values[valuesById[533] = "SWITCH_MULTILEVEL_GET"] = 533;
                    values[valuesById[534] = "SWITCH_MULTILEVEL_REPORT"] = 534;
                    values[valuesById[535] = "SWITCH_MULTILEVEL_SET"] = 535;
                    values[valuesById[536] = "SWITCH_MULTILEVEL_START_LEVEL_CHANGE"] = 536;
                    values[valuesById[537] = "SWITCH_MULTILEVEL_STOP_LEVEL_CHANGE"] = 537;
                    values[valuesById[538] = "SWITCH_TOGGLE_BINARY_GET"] = 538;
                    values[valuesById[539] = "SWITCH_TOGGLE_BINARY_REPORT"] = 539;
                    values[valuesById[540] = "SWITCH_TOGGLE_BINARY_SET"] = 540;
                    values[valuesById[541] = "SWITCH_TOGGLE_MULTILEVEL_GET"] = 541;
                    values[valuesById[542] = "SWITCH_TOGGLE_MULTILEVEL_REPORT"] = 542;
                    values[valuesById[543] = "SWITCH_TOGGLE_MULTILEVEL_SET"] = 543;
                    values[valuesById[544] = "SWITCH_TOGGLE_MULTILEVEL_START_LEVEL_CHANGE"] = 544;
                    values[valuesById[545] = "SWITCH_TOGGLE_MULTILEVEL_STOP_LEVEL_CHANGE"] = 545;
                    values[valuesById[546] = "TARIFF_TBL_COST_GET"] = 546;
                    values[valuesById[547] = "TARIFF_TBL_COST_REPORT"] = 547;
                    values[valuesById[548] = "TARIFF_TBL_GET"] = 548;
                    values[valuesById[549] = "TARIFF_TBL_REMOVE"] = 549;
                    values[valuesById[550] = "TARIFF_TBL_REPORT"] = 550;
                    values[valuesById[551] = "TARIFF_TBL_SET"] = 551;
                    values[valuesById[552] = "TARIFF_TBL_SUPPLIER_GET"] = 552;
                    values[valuesById[553] = "TARIFF_TBL_SUPPLIER_REPORT"] = 553;
                    values[valuesById[554] = "TARIFF_TBL_SUPPLIER_SET"] = 554;
                    values[valuesById[555] = "THERMOSTAT_FAN_MODE_GET"] = 555;
                    values[valuesById[556] = "THERMOSTAT_FAN_MODE_REPORT"] = 556;
                    values[valuesById[557] = "THERMOSTAT_FAN_MODE_SET"] = 557;
                    values[valuesById[558] = "THERMOSTAT_FAN_MODE_SUPPORTED_GET"] = 558;
                    values[valuesById[559] = "THERMOSTAT_FAN_MODE_SUPPORTED_REPORT"] = 559;
                    values[valuesById[560] = "THERMOSTAT_FAN_STATE_GET"] = 560;
                    values[valuesById[561] = "THERMOSTAT_FAN_STATE_REPORT"] = 561;
                    values[valuesById[562] = "THERMOSTAT_HEATING_MODE_GET"] = 562;
                    values[valuesById[563] = "THERMOSTAT_HEATING_MODE_REPORT"] = 563;
                    values[valuesById[564] = "THERMOSTAT_HEATING_MODE_SET"] = 564;
                    values[valuesById[565] = "THERMOSTAT_HEATING_RELAY_STATUS_GET"] = 565;
                    values[valuesById[566] = "THERMOSTAT_HEATING_RELAY_STATUS_REPORT"] = 566;
                    values[valuesById[567] = "THERMOSTAT_HEATING_SETPOINT_GET"] = 567;
                    values[valuesById[568] = "THERMOSTAT_HEATING_SETPOINT_REPORT"] = 568;
                    values[valuesById[569] = "THERMOSTAT_HEATING_SETPOINT_SET"] = 569;
                    values[valuesById[570] = "THERMOSTAT_HEATING_STATUS_GET"] = 570;
                    values[valuesById[571] = "THERMOSTAT_HEATING_STATUS_REPORT"] = 571;
                    values[valuesById[572] = "THERMOSTAT_HEATING_STATUS_SET"] = 572;
                    values[valuesById[573] = "THERMOSTAT_HEATING_TIMED_OFF_SET"] = 573;
                    values[valuesById[574] = "THERMOSTAT_MODE_GET"] = 574;
                    values[valuesById[575] = "THERMOSTAT_MODE_REPORT"] = 575;
                    values[valuesById[576] = "THERMOSTAT_MODE_SET"] = 576;
                    values[valuesById[577] = "THERMOSTAT_MODE_SUPPORTED_GET"] = 577;
                    values[valuesById[578] = "THERMOSTAT_MODE_SUPPORTED_REPORT"] = 578;
                    values[valuesById[579] = "THERMOSTAT_OPERATING_STATE_GET"] = 579;
                    values[valuesById[580] = "THERMOSTAT_OPERATING_STATE_REPORT"] = 580;
                    values[valuesById[581] = "THERMOSTAT_SETBACK_GET"] = 581;
                    values[valuesById[582] = "THERMOSTAT_SETBACK_REPORT"] = 582;
                    values[valuesById[583] = "THERMOSTAT_SETBACK_SET"] = 583;
                    values[valuesById[584] = "THERMOSTAT_SETPOINT_GET"] = 584;
                    values[valuesById[585] = "THERMOSTAT_SETPOINT_REPORT"] = 585;
                    values[valuesById[586] = "THERMOSTAT_SETPOINT_SET"] = 586;
                    values[valuesById[587] = "THERMOSTAT_SETPOINT_SUPPORTED_GET"] = 587;
                    values[valuesById[588] = "THERMOSTAT_SETPOINT_SUPPORTED_REPORT"] = 588;
                    values[valuesById[589] = "TIME_GET"] = 589;
                    values[valuesById[590] = "TIME_PARAMETERS_GET"] = 590;
                    values[valuesById[591] = "TIME_PARAMETERS_REPORT"] = 591;
                    values[valuesById[592] = "TIME_PARAMETERS_SET"] = 592;
                    values[valuesById[593] = "TIME_REPORT"] = 593;
                    values[valuesById[594] = "TRANSFER_END"] = 594;
                    values[valuesById[595] = "TRANSFER_NEW_PRIMARY_COMPLETE"] = 595;
                    values[valuesById[596] = "TRANSFER_NODE_INFO"] = 596;
                    values[valuesById[597] = "TRANSFER_PRESENTATION"] = 597;
                    values[valuesById[598] = "TRANSFER_RANGE_INFO"] = 598;
                    values[valuesById[599] = "UNSOLICITED_DESTINATION_GET"] = 599;
                    values[valuesById[600] = "UNSOLICITED_DESTINATION_REPORT"] = 600;
                    values[valuesById[601] = "UNSOLICITED_DESTINATION_SET"] = 601;
                    values[valuesById[602] = "USERS_NUMBER_GET"] = 602;
                    values[valuesById[603] = "USERS_NUMBER_REPORT"] = 603;
                    values[valuesById[604] = "USER_CODE_GET"] = 604;
                    values[valuesById[605] = "USER_CODE_REPORT"] = 605;
                    values[valuesById[606] = "USER_CODE_SET"] = 606;
                    values[valuesById[607] = "VERSION_COMMAND_CLASS_GET"] = 607;
                    values[valuesById[608] = "VERSION_COMMAND_CLASS_REPORT"] = 608;
                    values[valuesById[609] = "VERSION_GET"] = 609;
                    values[valuesById[610] = "VERSION_REPORT"] = 610;
                    values[valuesById[611] = "WAKE_UP_INTERVAL_GET"] = 611;
                    values[valuesById[612] = "WAKE_UP_INTERVAL_REPORT"] = 612;
                    values[valuesById[613] = "WAKE_UP_INTERVAL_SET"] = 613;
                    values[valuesById[614] = "WAKE_UP_NOTIFICATION"] = 614;
                    values[valuesById[615] = "WAKE_UP_NO_MORE_INFORMATION"] = 615;
                    values[valuesById[616] = "WINDOW_COVERING_GET"] = 616;
                    values[valuesById[617] = "WINDOW_COVERING_REPORT"] = 617;
                    values[valuesById[618] = "WINDOW_COVERING_SET"] = 618;
                    values[valuesById[619] = "WINDOW_COVERING_START_LEVEL_CHANGE"] = 619;
                    values[valuesById[620] = "WINDOW_COVERING_STOP_LEVEL_CHANGE"] = 620;
                    values[valuesById[621] = "WINDOW_COVERING_SUPPORTED_GET"] = 621;
                    values[valuesById[622] = "WINDOW_COVERING_SUPPORTED_REPORT"] = 622;
                    values[valuesById[623] = "ZIP_INV_NODE_SOLICITATION"] = 623;
                    values[valuesById[624] = "ZIP_NAMING_LOCATION_GET"] = 624;
                    values[valuesById[625] = "ZIP_NAMING_LOCATION_REPORT"] = 625;
                    values[valuesById[626] = "ZIP_NAMING_LOCATION_SET"] = 626;
                    values[valuesById[627] = "ZIP_NAMING_NAME_GET"] = 627;
                    values[valuesById[628] = "ZIP_NAMING_NAME_REPORT"] = 628;
                    values[valuesById[629] = "ZIP_NAMING_NAME_SET"] = 629;
                    values[valuesById[630] = "ZIP_NODE_ADVERTISEMENT"] = 630;
                    values[valuesById[631] = "ZIP_NODE_SOLICITATION"] = 631;
                    values[valuesById[632] = "ZWAVEPLUS_INFO_GET"] = 632;
                    values[valuesById[633] = "ZWAVEPLUS_INFO_REPORT"] = 633;
                    values[valuesById[634] = "ZWAVE_CMD_NOP"] = 634;
                    values[valuesById[635] = "ZWAVE_CMD_RESERVE_NODE_IDS"] = 635;
                    return values;
                })();

                comm.ZigBeeMsg = (function() {

                    /**
                     * Properties of a ZigBeeMsg.
                     * @memberof matrix_io.malos.v1.comm
                     * @interface IZigBeeMsg
                     * @property {matrix_io.malos.v1.comm.ZigBeeMsg.ZigBeeCmdType|null} [type] ZigBeeMsg type
                     * @property {matrix_io.malos.v1.comm.ZigBeeMsg.IZCLCmd|null} [zclCmd] ZigBeeMsg zclCmd
                     * @property {matrix_io.malos.v1.comm.ZigBeeMsg.INetworkMgmtCmd|null} [networkMgmtCmd] ZigBeeMsg networkMgmtCmd
                     */

                    /**
                     * Constructs a new ZigBeeMsg.
                     * @memberof matrix_io.malos.v1.comm
                     * @classdesc Represents a ZigBeeMsg.
                     * @implements IZigBeeMsg
                     * @constructor
                     * @param {matrix_io.malos.v1.comm.IZigBeeMsg=} [properties] Properties to set
                     */
                    function ZigBeeMsg(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * ZigBeeMsg type.
                     * @member {matrix_io.malos.v1.comm.ZigBeeMsg.ZigBeeCmdType} type
                     * @memberof matrix_io.malos.v1.comm.ZigBeeMsg
                     * @instance
                     */
                    ZigBeeMsg.prototype.type = 0;

                    /**
                     * ZigBeeMsg zclCmd.
                     * @member {matrix_io.malos.v1.comm.ZigBeeMsg.IZCLCmd|null|undefined} zclCmd
                     * @memberof matrix_io.malos.v1.comm.ZigBeeMsg
                     * @instance
                     */
                    ZigBeeMsg.prototype.zclCmd = null;

                    /**
                     * ZigBeeMsg networkMgmtCmd.
                     * @member {matrix_io.malos.v1.comm.ZigBeeMsg.INetworkMgmtCmd|null|undefined} networkMgmtCmd
                     * @memberof matrix_io.malos.v1.comm.ZigBeeMsg
                     * @instance
                     */
                    ZigBeeMsg.prototype.networkMgmtCmd = null;

                    /**
                     * Creates a new ZigBeeMsg instance using the specified properties.
                     * @function create
                     * @memberof matrix_io.malos.v1.comm.ZigBeeMsg
                     * @static
                     * @param {matrix_io.malos.v1.comm.IZigBeeMsg=} [properties] Properties to set
                     * @returns {matrix_io.malos.v1.comm.ZigBeeMsg} ZigBeeMsg instance
                     */
                    ZigBeeMsg.create = function create(properties) {
                        return new ZigBeeMsg(properties);
                    };

                    /**
                     * Encodes the specified ZigBeeMsg message. Does not implicitly {@link matrix_io.malos.v1.comm.ZigBeeMsg.verify|verify} messages.
                     * @function encode
                     * @memberof matrix_io.malos.v1.comm.ZigBeeMsg
                     * @static
                     * @param {matrix_io.malos.v1.comm.IZigBeeMsg} message ZigBeeMsg message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ZigBeeMsg.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.type != null && message.hasOwnProperty("type"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
                        if (message.zclCmd != null && message.hasOwnProperty("zclCmd"))
                            $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.encode(message.zclCmd, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.networkMgmtCmd != null && message.hasOwnProperty("networkMgmtCmd"))
                            $root.matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.encode(message.networkMgmtCmd, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified ZigBeeMsg message, length delimited. Does not implicitly {@link matrix_io.malos.v1.comm.ZigBeeMsg.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof matrix_io.malos.v1.comm.ZigBeeMsg
                     * @static
                     * @param {matrix_io.malos.v1.comm.IZigBeeMsg} message ZigBeeMsg message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ZigBeeMsg.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a ZigBeeMsg message from the specified reader or buffer.
                     * @function decode
                     * @memberof matrix_io.malos.v1.comm.ZigBeeMsg
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {matrix_io.malos.v1.comm.ZigBeeMsg} ZigBeeMsg
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ZigBeeMsg.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.malos.v1.comm.ZigBeeMsg();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.type = reader.int32();
                                break;
                            case 2:
                                message.zclCmd = $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.networkMgmtCmd = $root.matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a ZigBeeMsg message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof matrix_io.malos.v1.comm.ZigBeeMsg
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {matrix_io.malos.v1.comm.ZigBeeMsg} ZigBeeMsg
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ZigBeeMsg.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a ZigBeeMsg message.
                     * @function verify
                     * @memberof matrix_io.malos.v1.comm.ZigBeeMsg
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ZigBeeMsg.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.type != null && message.hasOwnProperty("type"))
                            switch (message.type) {
                            default:
                                return "type: enum value expected";
                            case 0:
                            case 1:
                                break;
                            }
                        if (message.zclCmd != null && message.hasOwnProperty("zclCmd")) {
                            var error = $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.verify(message.zclCmd);
                            if (error)
                                return "zclCmd." + error;
                        }
                        if (message.networkMgmtCmd != null && message.hasOwnProperty("networkMgmtCmd")) {
                            var error = $root.matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.verify(message.networkMgmtCmd);
                            if (error)
                                return "networkMgmtCmd." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a ZigBeeMsg message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof matrix_io.malos.v1.comm.ZigBeeMsg
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {matrix_io.malos.v1.comm.ZigBeeMsg} ZigBeeMsg
                     */
                    ZigBeeMsg.fromObject = function fromObject(object) {
                        if (object instanceof $root.matrix_io.malos.v1.comm.ZigBeeMsg)
                            return object;
                        var message = new $root.matrix_io.malos.v1.comm.ZigBeeMsg();
                        switch (object.type) {
                        case "ZCL":
                        case 0:
                            message.type = 0;
                            break;
                        case "NETWORK_MGMT":
                        case 1:
                            message.type = 1;
                            break;
                        }
                        if (object.zclCmd != null) {
                            if (typeof object.zclCmd !== "object")
                                throw TypeError(".matrix_io.malos.v1.comm.ZigBeeMsg.zclCmd: object expected");
                            message.zclCmd = $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.fromObject(object.zclCmd);
                        }
                        if (object.networkMgmtCmd != null) {
                            if (typeof object.networkMgmtCmd !== "object")
                                throw TypeError(".matrix_io.malos.v1.comm.ZigBeeMsg.networkMgmtCmd: object expected");
                            message.networkMgmtCmd = $root.matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.fromObject(object.networkMgmtCmd);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a ZigBeeMsg message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof matrix_io.malos.v1.comm.ZigBeeMsg
                     * @static
                     * @param {matrix_io.malos.v1.comm.ZigBeeMsg} message ZigBeeMsg
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ZigBeeMsg.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.type = options.enums === String ? "ZCL" : 0;
                            object.zclCmd = null;
                            object.networkMgmtCmd = null;
                        }
                        if (message.type != null && message.hasOwnProperty("type"))
                            object.type = options.enums === String ? $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZigBeeCmdType[message.type] : message.type;
                        if (message.zclCmd != null && message.hasOwnProperty("zclCmd"))
                            object.zclCmd = $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.toObject(message.zclCmd, options);
                        if (message.networkMgmtCmd != null && message.hasOwnProperty("networkMgmtCmd"))
                            object.networkMgmtCmd = $root.matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.toObject(message.networkMgmtCmd, options);
                        return object;
                    };

                    /**
                     * Converts this ZigBeeMsg to JSON.
                     * @function toJSON
                     * @memberof matrix_io.malos.v1.comm.ZigBeeMsg
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ZigBeeMsg.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    /**
                     * ZigBeeCmdType enum.
                     * @name matrix_io.malos.v1.comm.ZigBeeMsg.ZigBeeCmdType
                     * @enum {string}
                     * @property {number} ZCL=0 ZCL value
                     * @property {number} NETWORK_MGMT=1 NETWORK_MGMT value
                     */
                    ZigBeeMsg.ZigBeeCmdType = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "ZCL"] = 0;
                        values[valuesById[1] = "NETWORK_MGMT"] = 1;
                        return values;
                    })();

                    ZigBeeMsg.ZCLCmd = (function() {

                        /**
                         * Properties of a ZCLCmd.
                         * @memberof matrix_io.malos.v1.comm.ZigBeeMsg
                         * @interface IZCLCmd
                         * @property {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ZCLCmdType|null} [type] ZCLCmd type
                         * @property {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IOnOffCmd|null} [onoffCmd] ZCLCmd onoffCmd
                         * @property {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ILevelCmd|null} [levelCmd] ZCLCmd levelCmd
                         * @property {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IColorControlCmd|null} [colorcontrolCmd] ZCLCmd colorcontrolCmd
                         * @property {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IIdentifyCmd|null} [identifyCmd] ZCLCmd identifyCmd
                         * @property {number|null} [nodeId] ZCLCmd nodeId
                         * @property {number|null} [endpointIndex] ZCLCmd endpointIndex
                         */

                        /**
                         * Constructs a new ZCLCmd.
                         * @memberof matrix_io.malos.v1.comm.ZigBeeMsg
                         * @classdesc Represents a ZCLCmd.
                         * @implements IZCLCmd
                         * @constructor
                         * @param {matrix_io.malos.v1.comm.ZigBeeMsg.IZCLCmd=} [properties] Properties to set
                         */
                        function ZCLCmd(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * ZCLCmd type.
                         * @member {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ZCLCmdType} type
                         * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd
                         * @instance
                         */
                        ZCLCmd.prototype.type = 0;

                        /**
                         * ZCLCmd onoffCmd.
                         * @member {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IOnOffCmd|null|undefined} onoffCmd
                         * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd
                         * @instance
                         */
                        ZCLCmd.prototype.onoffCmd = null;

                        /**
                         * ZCLCmd levelCmd.
                         * @member {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ILevelCmd|null|undefined} levelCmd
                         * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd
                         * @instance
                         */
                        ZCLCmd.prototype.levelCmd = null;

                        /**
                         * ZCLCmd colorcontrolCmd.
                         * @member {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IColorControlCmd|null|undefined} colorcontrolCmd
                         * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd
                         * @instance
                         */
                        ZCLCmd.prototype.colorcontrolCmd = null;

                        /**
                         * ZCLCmd identifyCmd.
                         * @member {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IIdentifyCmd|null|undefined} identifyCmd
                         * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd
                         * @instance
                         */
                        ZCLCmd.prototype.identifyCmd = null;

                        /**
                         * ZCLCmd nodeId.
                         * @member {number} nodeId
                         * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd
                         * @instance
                         */
                        ZCLCmd.prototype.nodeId = 0;

                        /**
                         * ZCLCmd endpointIndex.
                         * @member {number} endpointIndex
                         * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd
                         * @instance
                         */
                        ZCLCmd.prototype.endpointIndex = 0;

                        /**
                         * Creates a new ZCLCmd instance using the specified properties.
                         * @function create
                         * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd
                         * @static
                         * @param {matrix_io.malos.v1.comm.ZigBeeMsg.IZCLCmd=} [properties] Properties to set
                         * @returns {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd} ZCLCmd instance
                         */
                        ZCLCmd.create = function create(properties) {
                            return new ZCLCmd(properties);
                        };

                        /**
                         * Encodes the specified ZCLCmd message. Does not implicitly {@link matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.verify|verify} messages.
                         * @function encode
                         * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd
                         * @static
                         * @param {matrix_io.malos.v1.comm.ZigBeeMsg.IZCLCmd} message ZCLCmd message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ZCLCmd.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.type != null && message.hasOwnProperty("type"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
                            if (message.onoffCmd != null && message.hasOwnProperty("onoffCmd"))
                                $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.OnOffCmd.encode(message.onoffCmd, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.levelCmd != null && message.hasOwnProperty("levelCmd"))
                                $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd.encode(message.levelCmd, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.colorcontrolCmd != null && message.hasOwnProperty("colorcontrolCmd"))
                                $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.encode(message.colorcontrolCmd, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            if (message.identifyCmd != null && message.hasOwnProperty("identifyCmd"))
                                $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd.encode(message.identifyCmd, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                            if (message.nodeId != null && message.hasOwnProperty("nodeId"))
                                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.nodeId);
                            if (message.endpointIndex != null && message.hasOwnProperty("endpointIndex"))
                                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.endpointIndex);
                            return writer;
                        };

                        /**
                         * Encodes the specified ZCLCmd message, length delimited. Does not implicitly {@link matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd
                         * @static
                         * @param {matrix_io.malos.v1.comm.ZigBeeMsg.IZCLCmd} message ZCLCmd message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ZCLCmd.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a ZCLCmd message from the specified reader or buffer.
                         * @function decode
                         * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd} ZCLCmd
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ZCLCmd.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.type = reader.int32();
                                    break;
                                case 2:
                                    message.onoffCmd = $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.OnOffCmd.decode(reader, reader.uint32());
                                    break;
                                case 3:
                                    message.levelCmd = $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd.decode(reader, reader.uint32());
                                    break;
                                case 4:
                                    message.colorcontrolCmd = $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.decode(reader, reader.uint32());
                                    break;
                                case 5:
                                    message.identifyCmd = $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd.decode(reader, reader.uint32());
                                    break;
                                case 6:
                                    message.nodeId = reader.uint32();
                                    break;
                                case 7:
                                    message.endpointIndex = reader.uint32();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a ZCLCmd message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd} ZCLCmd
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ZCLCmd.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a ZCLCmd message.
                         * @function verify
                         * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ZCLCmd.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.type != null && message.hasOwnProperty("type"))
                                switch (message.type) {
                                default:
                                    return "type: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                    break;
                                }
                            if (message.onoffCmd != null && message.hasOwnProperty("onoffCmd")) {
                                var error = $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.OnOffCmd.verify(message.onoffCmd);
                                if (error)
                                    return "onoffCmd." + error;
                            }
                            if (message.levelCmd != null && message.hasOwnProperty("levelCmd")) {
                                var error = $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd.verify(message.levelCmd);
                                if (error)
                                    return "levelCmd." + error;
                            }
                            if (message.colorcontrolCmd != null && message.hasOwnProperty("colorcontrolCmd")) {
                                var error = $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.verify(message.colorcontrolCmd);
                                if (error)
                                    return "colorcontrolCmd." + error;
                            }
                            if (message.identifyCmd != null && message.hasOwnProperty("identifyCmd")) {
                                var error = $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd.verify(message.identifyCmd);
                                if (error)
                                    return "identifyCmd." + error;
                            }
                            if (message.nodeId != null && message.hasOwnProperty("nodeId"))
                                if (!$util.isInteger(message.nodeId))
                                    return "nodeId: integer expected";
                            if (message.endpointIndex != null && message.hasOwnProperty("endpointIndex"))
                                if (!$util.isInteger(message.endpointIndex))
                                    return "endpointIndex: integer expected";
                            return null;
                        };

                        /**
                         * Creates a ZCLCmd message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd} ZCLCmd
                         */
                        ZCLCmd.fromObject = function fromObject(object) {
                            if (object instanceof $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd)
                                return object;
                            var message = new $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd();
                            switch (object.type) {
                            case "ON_OFF":
                            case 0:
                                message.type = 0;
                                break;
                            case "LEVEL":
                            case 1:
                                message.type = 1;
                                break;
                            case "COLOR_CONTROL":
                            case 2:
                                message.type = 2;
                                break;
                            case "IDENTIFY":
                            case 3:
                                message.type = 3;
                                break;
                            }
                            if (object.onoffCmd != null) {
                                if (typeof object.onoffCmd !== "object")
                                    throw TypeError(".matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.onoffCmd: object expected");
                                message.onoffCmd = $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.OnOffCmd.fromObject(object.onoffCmd);
                            }
                            if (object.levelCmd != null) {
                                if (typeof object.levelCmd !== "object")
                                    throw TypeError(".matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.levelCmd: object expected");
                                message.levelCmd = $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd.fromObject(object.levelCmd);
                            }
                            if (object.colorcontrolCmd != null) {
                                if (typeof object.colorcontrolCmd !== "object")
                                    throw TypeError(".matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.colorcontrolCmd: object expected");
                                message.colorcontrolCmd = $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.fromObject(object.colorcontrolCmd);
                            }
                            if (object.identifyCmd != null) {
                                if (typeof object.identifyCmd !== "object")
                                    throw TypeError(".matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.identifyCmd: object expected");
                                message.identifyCmd = $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd.fromObject(object.identifyCmd);
                            }
                            if (object.nodeId != null)
                                message.nodeId = object.nodeId >>> 0;
                            if (object.endpointIndex != null)
                                message.endpointIndex = object.endpointIndex >>> 0;
                            return message;
                        };

                        /**
                         * Creates a plain object from a ZCLCmd message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd
                         * @static
                         * @param {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd} message ZCLCmd
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ZCLCmd.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.type = options.enums === String ? "ON_OFF" : 0;
                                object.onoffCmd = null;
                                object.levelCmd = null;
                                object.colorcontrolCmd = null;
                                object.identifyCmd = null;
                                object.nodeId = 0;
                                object.endpointIndex = 0;
                            }
                            if (message.type != null && message.hasOwnProperty("type"))
                                object.type = options.enums === String ? $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ZCLCmdType[message.type] : message.type;
                            if (message.onoffCmd != null && message.hasOwnProperty("onoffCmd"))
                                object.onoffCmd = $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.OnOffCmd.toObject(message.onoffCmd, options);
                            if (message.levelCmd != null && message.hasOwnProperty("levelCmd"))
                                object.levelCmd = $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd.toObject(message.levelCmd, options);
                            if (message.colorcontrolCmd != null && message.hasOwnProperty("colorcontrolCmd"))
                                object.colorcontrolCmd = $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.toObject(message.colorcontrolCmd, options);
                            if (message.identifyCmd != null && message.hasOwnProperty("identifyCmd"))
                                object.identifyCmd = $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd.toObject(message.identifyCmd, options);
                            if (message.nodeId != null && message.hasOwnProperty("nodeId"))
                                object.nodeId = message.nodeId;
                            if (message.endpointIndex != null && message.hasOwnProperty("endpointIndex"))
                                object.endpointIndex = message.endpointIndex;
                            return object;
                        };

                        /**
                         * Converts this ZCLCmd to JSON.
                         * @function toJSON
                         * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ZCLCmd.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * ZCLCmdType enum.
                         * @name matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ZCLCmdType
                         * @enum {string}
                         * @property {number} ON_OFF=0 ON_OFF value
                         * @property {number} LEVEL=1 LEVEL value
                         * @property {number} COLOR_CONTROL=2 COLOR_CONTROL value
                         * @property {number} IDENTIFY=3 IDENTIFY value
                         */
                        ZCLCmd.ZCLCmdType = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "ON_OFF"] = 0;
                            values[valuesById[1] = "LEVEL"] = 1;
                            values[valuesById[2] = "COLOR_CONTROL"] = 2;
                            values[valuesById[3] = "IDENTIFY"] = 3;
                            return values;
                        })();

                        ZCLCmd.OnOffCmd = (function() {

                            /**
                             * Properties of an OnOffCmd.
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd
                             * @interface IOnOffCmd
                             * @property {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.OnOffCmd.ZCLOnOffCmdType|null} [type] OnOffCmd type
                             */

                            /**
                             * Constructs a new OnOffCmd.
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd
                             * @classdesc Represents an OnOffCmd.
                             * @implements IOnOffCmd
                             * @constructor
                             * @param {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IOnOffCmd=} [properties] Properties to set
                             */
                            function OnOffCmd(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }

                            /**
                             * OnOffCmd type.
                             * @member {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.OnOffCmd.ZCLOnOffCmdType} type
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.OnOffCmd
                             * @instance
                             */
                            OnOffCmd.prototype.type = 0;

                            /**
                             * Creates a new OnOffCmd instance using the specified properties.
                             * @function create
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.OnOffCmd
                             * @static
                             * @param {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IOnOffCmd=} [properties] Properties to set
                             * @returns {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.OnOffCmd} OnOffCmd instance
                             */
                            OnOffCmd.create = function create(properties) {
                                return new OnOffCmd(properties);
                            };

                            /**
                             * Encodes the specified OnOffCmd message. Does not implicitly {@link matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.OnOffCmd.verify|verify} messages.
                             * @function encode
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.OnOffCmd
                             * @static
                             * @param {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IOnOffCmd} message OnOffCmd message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            OnOffCmd.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.type != null && message.hasOwnProperty("type"))
                                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
                                return writer;
                            };

                            /**
                             * Encodes the specified OnOffCmd message, length delimited. Does not implicitly {@link matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.OnOffCmd.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.OnOffCmd
                             * @static
                             * @param {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IOnOffCmd} message OnOffCmd message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            OnOffCmd.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };

                            /**
                             * Decodes an OnOffCmd message from the specified reader or buffer.
                             * @function decode
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.OnOffCmd
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.OnOffCmd} OnOffCmd
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            OnOffCmd.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.OnOffCmd();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.type = reader.int32();
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };

                            /**
                             * Decodes an OnOffCmd message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.OnOffCmd
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.OnOffCmd} OnOffCmd
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            OnOffCmd.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };

                            /**
                             * Verifies an OnOffCmd message.
                             * @function verify
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.OnOffCmd
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            OnOffCmd.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.type != null && message.hasOwnProperty("type"))
                                    switch (message.type) {
                                    default:
                                        return "type: enum value expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                        break;
                                    }
                                return null;
                            };

                            /**
                             * Creates an OnOffCmd message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.OnOffCmd
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.OnOffCmd} OnOffCmd
                             */
                            OnOffCmd.fromObject = function fromObject(object) {
                                if (object instanceof $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.OnOffCmd)
                                    return object;
                                var message = new $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.OnOffCmd();
                                switch (object.type) {
                                case "ON":
                                case 0:
                                    message.type = 0;
                                    break;
                                case "OFF":
                                case 1:
                                    message.type = 1;
                                    break;
                                case "TOGGLE":
                                case 2:
                                    message.type = 2;
                                    break;
                                }
                                return message;
                            };

                            /**
                             * Creates a plain object from an OnOffCmd message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.OnOffCmd
                             * @static
                             * @param {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.OnOffCmd} message OnOffCmd
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            OnOffCmd.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults)
                                    object.type = options.enums === String ? "ON" : 0;
                                if (message.type != null && message.hasOwnProperty("type"))
                                    object.type = options.enums === String ? $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.OnOffCmd.ZCLOnOffCmdType[message.type] : message.type;
                                return object;
                            };

                            /**
                             * Converts this OnOffCmd to JSON.
                             * @function toJSON
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.OnOffCmd
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            OnOffCmd.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };

                            /**
                             * ZCLOnOffCmdType enum.
                             * @name matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.OnOffCmd.ZCLOnOffCmdType
                             * @enum {string}
                             * @property {number} ON=0 ON value
                             * @property {number} OFF=1 OFF value
                             * @property {number} TOGGLE=2 TOGGLE value
                             */
                            OnOffCmd.ZCLOnOffCmdType = (function() {
                                var valuesById = {}, values = Object.create(valuesById);
                                values[valuesById[0] = "ON"] = 0;
                                values[valuesById[1] = "OFF"] = 1;
                                values[valuesById[2] = "TOGGLE"] = 2;
                                return values;
                            })();

                            return OnOffCmd;
                        })();

                        ZCLCmd.LevelCmd = (function() {

                            /**
                             * Properties of a LevelCmd.
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd
                             * @interface ILevelCmd
                             * @property {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd.ZCLLevelCmdType|null} [type] LevelCmd type
                             * @property {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd.IMoveToLevelCmdParams|null} [moveToLevelParams] LevelCmd moveToLevelParams
                             * @property {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd.IMoveCmdParams|null} [moveParams] LevelCmd moveParams
                             */

                            /**
                             * Constructs a new LevelCmd.
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd
                             * @classdesc Represents a LevelCmd.
                             * @implements ILevelCmd
                             * @constructor
                             * @param {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ILevelCmd=} [properties] Properties to set
                             */
                            function LevelCmd(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }

                            /**
                             * LevelCmd type.
                             * @member {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd.ZCLLevelCmdType} type
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd
                             * @instance
                             */
                            LevelCmd.prototype.type = 0;

                            /**
                             * LevelCmd moveToLevelParams.
                             * @member {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd.IMoveToLevelCmdParams|null|undefined} moveToLevelParams
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd
                             * @instance
                             */
                            LevelCmd.prototype.moveToLevelParams = null;

                            /**
                             * LevelCmd moveParams.
                             * @member {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd.IMoveCmdParams|null|undefined} moveParams
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd
                             * @instance
                             */
                            LevelCmd.prototype.moveParams = null;

                            /**
                             * Creates a new LevelCmd instance using the specified properties.
                             * @function create
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd
                             * @static
                             * @param {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ILevelCmd=} [properties] Properties to set
                             * @returns {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd} LevelCmd instance
                             */
                            LevelCmd.create = function create(properties) {
                                return new LevelCmd(properties);
                            };

                            /**
                             * Encodes the specified LevelCmd message. Does not implicitly {@link matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd.verify|verify} messages.
                             * @function encode
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd
                             * @static
                             * @param {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ILevelCmd} message LevelCmd message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            LevelCmd.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.type != null && message.hasOwnProperty("type"))
                                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
                                if (message.moveToLevelParams != null && message.hasOwnProperty("moveToLevelParams"))
                                    $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd.MoveToLevelCmdParams.encode(message.moveToLevelParams, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                if (message.moveParams != null && message.hasOwnProperty("moveParams"))
                                    $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd.MoveCmdParams.encode(message.moveParams, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                                return writer;
                            };

                            /**
                             * Encodes the specified LevelCmd message, length delimited. Does not implicitly {@link matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd
                             * @static
                             * @param {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ILevelCmd} message LevelCmd message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            LevelCmd.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };

                            /**
                             * Decodes a LevelCmd message from the specified reader or buffer.
                             * @function decode
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd} LevelCmd
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            LevelCmd.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.type = reader.int32();
                                        break;
                                    case 2:
                                        message.moveToLevelParams = $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd.MoveToLevelCmdParams.decode(reader, reader.uint32());
                                        break;
                                    case 3:
                                        message.moveParams = $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd.MoveCmdParams.decode(reader, reader.uint32());
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };

                            /**
                             * Decodes a LevelCmd message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd} LevelCmd
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            LevelCmd.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };

                            /**
                             * Verifies a LevelCmd message.
                             * @function verify
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            LevelCmd.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.type != null && message.hasOwnProperty("type"))
                                    switch (message.type) {
                                    default:
                                        return "type: enum value expected";
                                    case 0:
                                    case 1:
                                        break;
                                    }
                                if (message.moveToLevelParams != null && message.hasOwnProperty("moveToLevelParams")) {
                                    var error = $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd.MoveToLevelCmdParams.verify(message.moveToLevelParams);
                                    if (error)
                                        return "moveToLevelParams." + error;
                                }
                                if (message.moveParams != null && message.hasOwnProperty("moveParams")) {
                                    var error = $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd.MoveCmdParams.verify(message.moveParams);
                                    if (error)
                                        return "moveParams." + error;
                                }
                                return null;
                            };

                            /**
                             * Creates a LevelCmd message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd} LevelCmd
                             */
                            LevelCmd.fromObject = function fromObject(object) {
                                if (object instanceof $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd)
                                    return object;
                                var message = new $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd();
                                switch (object.type) {
                                case "MOVE_TO_LEVEL":
                                case 0:
                                    message.type = 0;
                                    break;
                                case "MOVE":
                                case 1:
                                    message.type = 1;
                                    break;
                                }
                                if (object.moveToLevelParams != null) {
                                    if (typeof object.moveToLevelParams !== "object")
                                        throw TypeError(".matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd.moveToLevelParams: object expected");
                                    message.moveToLevelParams = $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd.MoveToLevelCmdParams.fromObject(object.moveToLevelParams);
                                }
                                if (object.moveParams != null) {
                                    if (typeof object.moveParams !== "object")
                                        throw TypeError(".matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd.moveParams: object expected");
                                    message.moveParams = $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd.MoveCmdParams.fromObject(object.moveParams);
                                }
                                return message;
                            };

                            /**
                             * Creates a plain object from a LevelCmd message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd
                             * @static
                             * @param {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd} message LevelCmd
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            LevelCmd.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    object.type = options.enums === String ? "MOVE_TO_LEVEL" : 0;
                                    object.moveToLevelParams = null;
                                    object.moveParams = null;
                                }
                                if (message.type != null && message.hasOwnProperty("type"))
                                    object.type = options.enums === String ? $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd.ZCLLevelCmdType[message.type] : message.type;
                                if (message.moveToLevelParams != null && message.hasOwnProperty("moveToLevelParams"))
                                    object.moveToLevelParams = $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd.MoveToLevelCmdParams.toObject(message.moveToLevelParams, options);
                                if (message.moveParams != null && message.hasOwnProperty("moveParams"))
                                    object.moveParams = $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd.MoveCmdParams.toObject(message.moveParams, options);
                                return object;
                            };

                            /**
                             * Converts this LevelCmd to JSON.
                             * @function toJSON
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            LevelCmd.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };

                            /**
                             * ZCLLevelCmdType enum.
                             * @name matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd.ZCLLevelCmdType
                             * @enum {string}
                             * @property {number} MOVE_TO_LEVEL=0 MOVE_TO_LEVEL value
                             * @property {number} MOVE=1 MOVE value
                             */
                            LevelCmd.ZCLLevelCmdType = (function() {
                                var valuesById = {}, values = Object.create(valuesById);
                                values[valuesById[0] = "MOVE_TO_LEVEL"] = 0;
                                values[valuesById[1] = "MOVE"] = 1;
                                return values;
                            })();

                            LevelCmd.MoveToLevelCmdParams = (function() {

                                /**
                                 * Properties of a MoveToLevelCmdParams.
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd
                                 * @interface IMoveToLevelCmdParams
                                 * @property {number|null} [level] MoveToLevelCmdParams level
                                 * @property {number|null} [transitionTime] MoveToLevelCmdParams transitionTime
                                 */

                                /**
                                 * Constructs a new MoveToLevelCmdParams.
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd
                                 * @classdesc Represents a MoveToLevelCmdParams.
                                 * @implements IMoveToLevelCmdParams
                                 * @constructor
                                 * @param {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd.IMoveToLevelCmdParams=} [properties] Properties to set
                                 */
                                function MoveToLevelCmdParams(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * MoveToLevelCmdParams level.
                                 * @member {number} level
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd.MoveToLevelCmdParams
                                 * @instance
                                 */
                                MoveToLevelCmdParams.prototype.level = 0;

                                /**
                                 * MoveToLevelCmdParams transitionTime.
                                 * @member {number} transitionTime
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd.MoveToLevelCmdParams
                                 * @instance
                                 */
                                MoveToLevelCmdParams.prototype.transitionTime = 0;

                                /**
                                 * Creates a new MoveToLevelCmdParams instance using the specified properties.
                                 * @function create
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd.MoveToLevelCmdParams
                                 * @static
                                 * @param {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd.IMoveToLevelCmdParams=} [properties] Properties to set
                                 * @returns {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd.MoveToLevelCmdParams} MoveToLevelCmdParams instance
                                 */
                                MoveToLevelCmdParams.create = function create(properties) {
                                    return new MoveToLevelCmdParams(properties);
                                };

                                /**
                                 * Encodes the specified MoveToLevelCmdParams message. Does not implicitly {@link matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd.MoveToLevelCmdParams.verify|verify} messages.
                                 * @function encode
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd.MoveToLevelCmdParams
                                 * @static
                                 * @param {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd.IMoveToLevelCmdParams} message MoveToLevelCmdParams message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                MoveToLevelCmdParams.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.level != null && message.hasOwnProperty("level"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.level);
                                    if (message.transitionTime != null && message.hasOwnProperty("transitionTime"))
                                        writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.transitionTime);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified MoveToLevelCmdParams message, length delimited. Does not implicitly {@link matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd.MoveToLevelCmdParams.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd.MoveToLevelCmdParams
                                 * @static
                                 * @param {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd.IMoveToLevelCmdParams} message MoveToLevelCmdParams message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                MoveToLevelCmdParams.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a MoveToLevelCmdParams message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd.MoveToLevelCmdParams
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd.MoveToLevelCmdParams} MoveToLevelCmdParams
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                MoveToLevelCmdParams.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd.MoveToLevelCmdParams();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.level = reader.uint32();
                                            break;
                                        case 2:
                                            message.transitionTime = reader.uint32();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a MoveToLevelCmdParams message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd.MoveToLevelCmdParams
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd.MoveToLevelCmdParams} MoveToLevelCmdParams
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                MoveToLevelCmdParams.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a MoveToLevelCmdParams message.
                                 * @function verify
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd.MoveToLevelCmdParams
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                MoveToLevelCmdParams.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.level != null && message.hasOwnProperty("level"))
                                        if (!$util.isInteger(message.level))
                                            return "level: integer expected";
                                    if (message.transitionTime != null && message.hasOwnProperty("transitionTime"))
                                        if (!$util.isInteger(message.transitionTime))
                                            return "transitionTime: integer expected";
                                    return null;
                                };

                                /**
                                 * Creates a MoveToLevelCmdParams message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd.MoveToLevelCmdParams
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd.MoveToLevelCmdParams} MoveToLevelCmdParams
                                 */
                                MoveToLevelCmdParams.fromObject = function fromObject(object) {
                                    if (object instanceof $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd.MoveToLevelCmdParams)
                                        return object;
                                    var message = new $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd.MoveToLevelCmdParams();
                                    if (object.level != null)
                                        message.level = object.level >>> 0;
                                    if (object.transitionTime != null)
                                        message.transitionTime = object.transitionTime >>> 0;
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a MoveToLevelCmdParams message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd.MoveToLevelCmdParams
                                 * @static
                                 * @param {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd.MoveToLevelCmdParams} message MoveToLevelCmdParams
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                MoveToLevelCmdParams.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults) {
                                        object.level = 0;
                                        object.transitionTime = 0;
                                    }
                                    if (message.level != null && message.hasOwnProperty("level"))
                                        object.level = message.level;
                                    if (message.transitionTime != null && message.hasOwnProperty("transitionTime"))
                                        object.transitionTime = message.transitionTime;
                                    return object;
                                };

                                /**
                                 * Converts this MoveToLevelCmdParams to JSON.
                                 * @function toJSON
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd.MoveToLevelCmdParams
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                MoveToLevelCmdParams.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return MoveToLevelCmdParams;
                            })();

                            LevelCmd.MoveCmdParams = (function() {

                                /**
                                 * Properties of a MoveCmdParams.
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd
                                 * @interface IMoveCmdParams
                                 * @property {number|null} [mode] MoveCmdParams mode
                                 * @property {number|null} [rate] MoveCmdParams rate
                                 */

                                /**
                                 * Constructs a new MoveCmdParams.
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd
                                 * @classdesc Represents a MoveCmdParams.
                                 * @implements IMoveCmdParams
                                 * @constructor
                                 * @param {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd.IMoveCmdParams=} [properties] Properties to set
                                 */
                                function MoveCmdParams(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * MoveCmdParams mode.
                                 * @member {number} mode
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd.MoveCmdParams
                                 * @instance
                                 */
                                MoveCmdParams.prototype.mode = 0;

                                /**
                                 * MoveCmdParams rate.
                                 * @member {number} rate
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd.MoveCmdParams
                                 * @instance
                                 */
                                MoveCmdParams.prototype.rate = 0;

                                /**
                                 * Creates a new MoveCmdParams instance using the specified properties.
                                 * @function create
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd.MoveCmdParams
                                 * @static
                                 * @param {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd.IMoveCmdParams=} [properties] Properties to set
                                 * @returns {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd.MoveCmdParams} MoveCmdParams instance
                                 */
                                MoveCmdParams.create = function create(properties) {
                                    return new MoveCmdParams(properties);
                                };

                                /**
                                 * Encodes the specified MoveCmdParams message. Does not implicitly {@link matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd.MoveCmdParams.verify|verify} messages.
                                 * @function encode
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd.MoveCmdParams
                                 * @static
                                 * @param {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd.IMoveCmdParams} message MoveCmdParams message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                MoveCmdParams.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.mode != null && message.hasOwnProperty("mode"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.mode);
                                    if (message.rate != null && message.hasOwnProperty("rate"))
                                        writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.rate);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified MoveCmdParams message, length delimited. Does not implicitly {@link matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd.MoveCmdParams.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd.MoveCmdParams
                                 * @static
                                 * @param {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd.IMoveCmdParams} message MoveCmdParams message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                MoveCmdParams.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a MoveCmdParams message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd.MoveCmdParams
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd.MoveCmdParams} MoveCmdParams
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                MoveCmdParams.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd.MoveCmdParams();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.mode = reader.uint32();
                                            break;
                                        case 2:
                                            message.rate = reader.uint32();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a MoveCmdParams message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd.MoveCmdParams
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd.MoveCmdParams} MoveCmdParams
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                MoveCmdParams.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a MoveCmdParams message.
                                 * @function verify
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd.MoveCmdParams
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                MoveCmdParams.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.mode != null && message.hasOwnProperty("mode"))
                                        if (!$util.isInteger(message.mode))
                                            return "mode: integer expected";
                                    if (message.rate != null && message.hasOwnProperty("rate"))
                                        if (!$util.isInteger(message.rate))
                                            return "rate: integer expected";
                                    return null;
                                };

                                /**
                                 * Creates a MoveCmdParams message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd.MoveCmdParams
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd.MoveCmdParams} MoveCmdParams
                                 */
                                MoveCmdParams.fromObject = function fromObject(object) {
                                    if (object instanceof $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd.MoveCmdParams)
                                        return object;
                                    var message = new $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd.MoveCmdParams();
                                    if (object.mode != null)
                                        message.mode = object.mode >>> 0;
                                    if (object.rate != null)
                                        message.rate = object.rate >>> 0;
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a MoveCmdParams message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd.MoveCmdParams
                                 * @static
                                 * @param {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd.MoveCmdParams} message MoveCmdParams
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                MoveCmdParams.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults) {
                                        object.mode = 0;
                                        object.rate = 0;
                                    }
                                    if (message.mode != null && message.hasOwnProperty("mode"))
                                        object.mode = message.mode;
                                    if (message.rate != null && message.hasOwnProperty("rate"))
                                        object.rate = message.rate;
                                    return object;
                                };

                                /**
                                 * Converts this MoveCmdParams to JSON.
                                 * @function toJSON
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.LevelCmd.MoveCmdParams
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                MoveCmdParams.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return MoveCmdParams;
                            })();

                            return LevelCmd;
                        })();

                        ZCLCmd.ColorControlCmd = (function() {

                            /**
                             * Properties of a ColorControlCmd.
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd
                             * @interface IColorControlCmd
                             * @property {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.ZCLColorControlCmdType|null} [type] ColorControlCmd type
                             * @property {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.IMoveToHueCmdParams|null} [movetohueParams] ColorControlCmd movetohueParams
                             * @property {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.IMoveToSatCmdParams|null} [movetosatParams] ColorControlCmd movetosatParams
                             * @property {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.IMoveToHueAndSatCmdParams|null} [movetohueandsatParams] ColorControlCmd movetohueandsatParams
                             * @property {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.IMoveToColorTempCmdParams|null} [movetocolortempParams] ColorControlCmd movetocolortempParams
                             */

                            /**
                             * Constructs a new ColorControlCmd.
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd
                             * @classdesc Represents a ColorControlCmd.
                             * @implements IColorControlCmd
                             * @constructor
                             * @param {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IColorControlCmd=} [properties] Properties to set
                             */
                            function ColorControlCmd(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }

                            /**
                             * ColorControlCmd type.
                             * @member {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.ZCLColorControlCmdType} type
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd
                             * @instance
                             */
                            ColorControlCmd.prototype.type = 0;

                            /**
                             * ColorControlCmd movetohueParams.
                             * @member {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.IMoveToHueCmdParams|null|undefined} movetohueParams
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd
                             * @instance
                             */
                            ColorControlCmd.prototype.movetohueParams = null;

                            /**
                             * ColorControlCmd movetosatParams.
                             * @member {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.IMoveToSatCmdParams|null|undefined} movetosatParams
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd
                             * @instance
                             */
                            ColorControlCmd.prototype.movetosatParams = null;

                            /**
                             * ColorControlCmd movetohueandsatParams.
                             * @member {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.IMoveToHueAndSatCmdParams|null|undefined} movetohueandsatParams
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd
                             * @instance
                             */
                            ColorControlCmd.prototype.movetohueandsatParams = null;

                            /**
                             * ColorControlCmd movetocolortempParams.
                             * @member {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.IMoveToColorTempCmdParams|null|undefined} movetocolortempParams
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd
                             * @instance
                             */
                            ColorControlCmd.prototype.movetocolortempParams = null;

                            /**
                             * Creates a new ColorControlCmd instance using the specified properties.
                             * @function create
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd
                             * @static
                             * @param {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IColorControlCmd=} [properties] Properties to set
                             * @returns {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd} ColorControlCmd instance
                             */
                            ColorControlCmd.create = function create(properties) {
                                return new ColorControlCmd(properties);
                            };

                            /**
                             * Encodes the specified ColorControlCmd message. Does not implicitly {@link matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.verify|verify} messages.
                             * @function encode
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd
                             * @static
                             * @param {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IColorControlCmd} message ColorControlCmd message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            ColorControlCmd.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.type != null && message.hasOwnProperty("type"))
                                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
                                if (message.movetohueParams != null && message.hasOwnProperty("movetohueParams"))
                                    $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToHueCmdParams.encode(message.movetohueParams, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                if (message.movetosatParams != null && message.hasOwnProperty("movetosatParams"))
                                    $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToSatCmdParams.encode(message.movetosatParams, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                                if (message.movetohueandsatParams != null && message.hasOwnProperty("movetohueandsatParams"))
                                    $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToHueAndSatCmdParams.encode(message.movetohueandsatParams, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                                if (message.movetocolortempParams != null && message.hasOwnProperty("movetocolortempParams"))
                                    $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToColorTempCmdParams.encode(message.movetocolortempParams, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                                return writer;
                            };

                            /**
                             * Encodes the specified ColorControlCmd message, length delimited. Does not implicitly {@link matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd
                             * @static
                             * @param {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IColorControlCmd} message ColorControlCmd message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            ColorControlCmd.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };

                            /**
                             * Decodes a ColorControlCmd message from the specified reader or buffer.
                             * @function decode
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd} ColorControlCmd
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            ColorControlCmd.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.type = reader.int32();
                                        break;
                                    case 2:
                                        message.movetohueParams = $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToHueCmdParams.decode(reader, reader.uint32());
                                        break;
                                    case 3:
                                        message.movetosatParams = $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToSatCmdParams.decode(reader, reader.uint32());
                                        break;
                                    case 4:
                                        message.movetohueandsatParams = $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToHueAndSatCmdParams.decode(reader, reader.uint32());
                                        break;
                                    case 5:
                                        message.movetocolortempParams = $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToColorTempCmdParams.decode(reader, reader.uint32());
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };

                            /**
                             * Decodes a ColorControlCmd message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd} ColorControlCmd
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            ColorControlCmd.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };

                            /**
                             * Verifies a ColorControlCmd message.
                             * @function verify
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            ColorControlCmd.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.type != null && message.hasOwnProperty("type"))
                                    switch (message.type) {
                                    default:
                                        return "type: enum value expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                    case 3:
                                        break;
                                    }
                                if (message.movetohueParams != null && message.hasOwnProperty("movetohueParams")) {
                                    var error = $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToHueCmdParams.verify(message.movetohueParams);
                                    if (error)
                                        return "movetohueParams." + error;
                                }
                                if (message.movetosatParams != null && message.hasOwnProperty("movetosatParams")) {
                                    var error = $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToSatCmdParams.verify(message.movetosatParams);
                                    if (error)
                                        return "movetosatParams." + error;
                                }
                                if (message.movetohueandsatParams != null && message.hasOwnProperty("movetohueandsatParams")) {
                                    var error = $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToHueAndSatCmdParams.verify(message.movetohueandsatParams);
                                    if (error)
                                        return "movetohueandsatParams." + error;
                                }
                                if (message.movetocolortempParams != null && message.hasOwnProperty("movetocolortempParams")) {
                                    var error = $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToColorTempCmdParams.verify(message.movetocolortempParams);
                                    if (error)
                                        return "movetocolortempParams." + error;
                                }
                                return null;
                            };

                            /**
                             * Creates a ColorControlCmd message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd} ColorControlCmd
                             */
                            ColorControlCmd.fromObject = function fromObject(object) {
                                if (object instanceof $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd)
                                    return object;
                                var message = new $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd();
                                switch (object.type) {
                                case "MOVETOHUE":
                                case 0:
                                    message.type = 0;
                                    break;
                                case "MOVETOSAT":
                                case 1:
                                    message.type = 1;
                                    break;
                                case "MOVETOHUEANDSAT":
                                case 2:
                                    message.type = 2;
                                    break;
                                case "MOVETOCOLORTEMP":
                                case 3:
                                    message.type = 3;
                                    break;
                                }
                                if (object.movetohueParams != null) {
                                    if (typeof object.movetohueParams !== "object")
                                        throw TypeError(".matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.movetohueParams: object expected");
                                    message.movetohueParams = $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToHueCmdParams.fromObject(object.movetohueParams);
                                }
                                if (object.movetosatParams != null) {
                                    if (typeof object.movetosatParams !== "object")
                                        throw TypeError(".matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.movetosatParams: object expected");
                                    message.movetosatParams = $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToSatCmdParams.fromObject(object.movetosatParams);
                                }
                                if (object.movetohueandsatParams != null) {
                                    if (typeof object.movetohueandsatParams !== "object")
                                        throw TypeError(".matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.movetohueandsatParams: object expected");
                                    message.movetohueandsatParams = $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToHueAndSatCmdParams.fromObject(object.movetohueandsatParams);
                                }
                                if (object.movetocolortempParams != null) {
                                    if (typeof object.movetocolortempParams !== "object")
                                        throw TypeError(".matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.movetocolortempParams: object expected");
                                    message.movetocolortempParams = $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToColorTempCmdParams.fromObject(object.movetocolortempParams);
                                }
                                return message;
                            };

                            /**
                             * Creates a plain object from a ColorControlCmd message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd
                             * @static
                             * @param {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd} message ColorControlCmd
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            ColorControlCmd.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    object.type = options.enums === String ? "MOVETOHUE" : 0;
                                    object.movetohueParams = null;
                                    object.movetosatParams = null;
                                    object.movetohueandsatParams = null;
                                    object.movetocolortempParams = null;
                                }
                                if (message.type != null && message.hasOwnProperty("type"))
                                    object.type = options.enums === String ? $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.ZCLColorControlCmdType[message.type] : message.type;
                                if (message.movetohueParams != null && message.hasOwnProperty("movetohueParams"))
                                    object.movetohueParams = $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToHueCmdParams.toObject(message.movetohueParams, options);
                                if (message.movetosatParams != null && message.hasOwnProperty("movetosatParams"))
                                    object.movetosatParams = $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToSatCmdParams.toObject(message.movetosatParams, options);
                                if (message.movetohueandsatParams != null && message.hasOwnProperty("movetohueandsatParams"))
                                    object.movetohueandsatParams = $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToHueAndSatCmdParams.toObject(message.movetohueandsatParams, options);
                                if (message.movetocolortempParams != null && message.hasOwnProperty("movetocolortempParams"))
                                    object.movetocolortempParams = $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToColorTempCmdParams.toObject(message.movetocolortempParams, options);
                                return object;
                            };

                            /**
                             * Converts this ColorControlCmd to JSON.
                             * @function toJSON
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            ColorControlCmd.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };

                            /**
                             * ZCLColorControlCmdType enum.
                             * @name matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.ZCLColorControlCmdType
                             * @enum {string}
                             * @property {number} MOVETOHUE=0 MOVETOHUE value
                             * @property {number} MOVETOSAT=1 MOVETOSAT value
                             * @property {number} MOVETOHUEANDSAT=2 MOVETOHUEANDSAT value
                             * @property {number} MOVETOCOLORTEMP=3 MOVETOCOLORTEMP value
                             */
                            ColorControlCmd.ZCLColorControlCmdType = (function() {
                                var valuesById = {}, values = Object.create(valuesById);
                                values[valuesById[0] = "MOVETOHUE"] = 0;
                                values[valuesById[1] = "MOVETOSAT"] = 1;
                                values[valuesById[2] = "MOVETOHUEANDSAT"] = 2;
                                values[valuesById[3] = "MOVETOCOLORTEMP"] = 3;
                                return values;
                            })();

                            ColorControlCmd.MoveToHueCmdParams = (function() {

                                /**
                                 * Properties of a MoveToHueCmdParams.
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd
                                 * @interface IMoveToHueCmdParams
                                 * @property {number|null} [hue] MoveToHueCmdParams hue
                                 * @property {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToHueCmdParams.DirectionParam|null} [direction] MoveToHueCmdParams direction
                                 * @property {number|null} [transitionTime] MoveToHueCmdParams transitionTime
                                 */

                                /**
                                 * Constructs a new MoveToHueCmdParams.
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd
                                 * @classdesc Represents a MoveToHueCmdParams.
                                 * @implements IMoveToHueCmdParams
                                 * @constructor
                                 * @param {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.IMoveToHueCmdParams=} [properties] Properties to set
                                 */
                                function MoveToHueCmdParams(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * MoveToHueCmdParams hue.
                                 * @member {number} hue
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToHueCmdParams
                                 * @instance
                                 */
                                MoveToHueCmdParams.prototype.hue = 0;

                                /**
                                 * MoveToHueCmdParams direction.
                                 * @member {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToHueCmdParams.DirectionParam} direction
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToHueCmdParams
                                 * @instance
                                 */
                                MoveToHueCmdParams.prototype.direction = 0;

                                /**
                                 * MoveToHueCmdParams transitionTime.
                                 * @member {number} transitionTime
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToHueCmdParams
                                 * @instance
                                 */
                                MoveToHueCmdParams.prototype.transitionTime = 0;

                                /**
                                 * Creates a new MoveToHueCmdParams instance using the specified properties.
                                 * @function create
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToHueCmdParams
                                 * @static
                                 * @param {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.IMoveToHueCmdParams=} [properties] Properties to set
                                 * @returns {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToHueCmdParams} MoveToHueCmdParams instance
                                 */
                                MoveToHueCmdParams.create = function create(properties) {
                                    return new MoveToHueCmdParams(properties);
                                };

                                /**
                                 * Encodes the specified MoveToHueCmdParams message. Does not implicitly {@link matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToHueCmdParams.verify|verify} messages.
                                 * @function encode
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToHueCmdParams
                                 * @static
                                 * @param {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.IMoveToHueCmdParams} message MoveToHueCmdParams message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                MoveToHueCmdParams.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.hue != null && message.hasOwnProperty("hue"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.hue);
                                    if (message.direction != null && message.hasOwnProperty("direction"))
                                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.direction);
                                    if (message.transitionTime != null && message.hasOwnProperty("transitionTime"))
                                        writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.transitionTime);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified MoveToHueCmdParams message, length delimited. Does not implicitly {@link matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToHueCmdParams.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToHueCmdParams
                                 * @static
                                 * @param {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.IMoveToHueCmdParams} message MoveToHueCmdParams message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                MoveToHueCmdParams.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a MoveToHueCmdParams message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToHueCmdParams
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToHueCmdParams} MoveToHueCmdParams
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                MoveToHueCmdParams.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToHueCmdParams();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.hue = reader.uint32();
                                            break;
                                        case 2:
                                            message.direction = reader.int32();
                                            break;
                                        case 3:
                                            message.transitionTime = reader.uint32();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a MoveToHueCmdParams message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToHueCmdParams
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToHueCmdParams} MoveToHueCmdParams
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                MoveToHueCmdParams.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a MoveToHueCmdParams message.
                                 * @function verify
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToHueCmdParams
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                MoveToHueCmdParams.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.hue != null && message.hasOwnProperty("hue"))
                                        if (!$util.isInteger(message.hue))
                                            return "hue: integer expected";
                                    if (message.direction != null && message.hasOwnProperty("direction"))
                                        switch (message.direction) {
                                        default:
                                            return "direction: enum value expected";
                                        case 0:
                                        case 1:
                                        case 2:
                                        case 3:
                                            break;
                                        }
                                    if (message.transitionTime != null && message.hasOwnProperty("transitionTime"))
                                        if (!$util.isInteger(message.transitionTime))
                                            return "transitionTime: integer expected";
                                    return null;
                                };

                                /**
                                 * Creates a MoveToHueCmdParams message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToHueCmdParams
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToHueCmdParams} MoveToHueCmdParams
                                 */
                                MoveToHueCmdParams.fromObject = function fromObject(object) {
                                    if (object instanceof $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToHueCmdParams)
                                        return object;
                                    var message = new $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToHueCmdParams();
                                    if (object.hue != null)
                                        message.hue = object.hue >>> 0;
                                    switch (object.direction) {
                                    case "SHORTEST_DISTANCE":
                                    case 0:
                                        message.direction = 0;
                                        break;
                                    case "LONGEST_DISTANCE":
                                    case 1:
                                        message.direction = 1;
                                        break;
                                    case "UP":
                                    case 2:
                                        message.direction = 2;
                                        break;
                                    case "DOWN":
                                    case 3:
                                        message.direction = 3;
                                        break;
                                    }
                                    if (object.transitionTime != null)
                                        message.transitionTime = object.transitionTime >>> 0;
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a MoveToHueCmdParams message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToHueCmdParams
                                 * @static
                                 * @param {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToHueCmdParams} message MoveToHueCmdParams
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                MoveToHueCmdParams.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults) {
                                        object.hue = 0;
                                        object.direction = options.enums === String ? "SHORTEST_DISTANCE" : 0;
                                        object.transitionTime = 0;
                                    }
                                    if (message.hue != null && message.hasOwnProperty("hue"))
                                        object.hue = message.hue;
                                    if (message.direction != null && message.hasOwnProperty("direction"))
                                        object.direction = options.enums === String ? $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToHueCmdParams.DirectionParam[message.direction] : message.direction;
                                    if (message.transitionTime != null && message.hasOwnProperty("transitionTime"))
                                        object.transitionTime = message.transitionTime;
                                    return object;
                                };

                                /**
                                 * Converts this MoveToHueCmdParams to JSON.
                                 * @function toJSON
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToHueCmdParams
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                MoveToHueCmdParams.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                /**
                                 * DirectionParam enum.
                                 * @name matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToHueCmdParams.DirectionParam
                                 * @enum {string}
                                 * @property {number} SHORTEST_DISTANCE=0 SHORTEST_DISTANCE value
                                 * @property {number} LONGEST_DISTANCE=1 LONGEST_DISTANCE value
                                 * @property {number} UP=2 UP value
                                 * @property {number} DOWN=3 DOWN value
                                 */
                                MoveToHueCmdParams.DirectionParam = (function() {
                                    var valuesById = {}, values = Object.create(valuesById);
                                    values[valuesById[0] = "SHORTEST_DISTANCE"] = 0;
                                    values[valuesById[1] = "LONGEST_DISTANCE"] = 1;
                                    values[valuesById[2] = "UP"] = 2;
                                    values[valuesById[3] = "DOWN"] = 3;
                                    return values;
                                })();

                                return MoveToHueCmdParams;
                            })();

                            ColorControlCmd.MoveToSatCmdParams = (function() {

                                /**
                                 * Properties of a MoveToSatCmdParams.
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd
                                 * @interface IMoveToSatCmdParams
                                 * @property {number|null} [saturation] MoveToSatCmdParams saturation
                                 * @property {number|null} [transitionTime] MoveToSatCmdParams transitionTime
                                 */

                                /**
                                 * Constructs a new MoveToSatCmdParams.
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd
                                 * @classdesc Represents a MoveToSatCmdParams.
                                 * @implements IMoveToSatCmdParams
                                 * @constructor
                                 * @param {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.IMoveToSatCmdParams=} [properties] Properties to set
                                 */
                                function MoveToSatCmdParams(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * MoveToSatCmdParams saturation.
                                 * @member {number} saturation
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToSatCmdParams
                                 * @instance
                                 */
                                MoveToSatCmdParams.prototype.saturation = 0;

                                /**
                                 * MoveToSatCmdParams transitionTime.
                                 * @member {number} transitionTime
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToSatCmdParams
                                 * @instance
                                 */
                                MoveToSatCmdParams.prototype.transitionTime = 0;

                                /**
                                 * Creates a new MoveToSatCmdParams instance using the specified properties.
                                 * @function create
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToSatCmdParams
                                 * @static
                                 * @param {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.IMoveToSatCmdParams=} [properties] Properties to set
                                 * @returns {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToSatCmdParams} MoveToSatCmdParams instance
                                 */
                                MoveToSatCmdParams.create = function create(properties) {
                                    return new MoveToSatCmdParams(properties);
                                };

                                /**
                                 * Encodes the specified MoveToSatCmdParams message. Does not implicitly {@link matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToSatCmdParams.verify|verify} messages.
                                 * @function encode
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToSatCmdParams
                                 * @static
                                 * @param {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.IMoveToSatCmdParams} message MoveToSatCmdParams message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                MoveToSatCmdParams.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.saturation != null && message.hasOwnProperty("saturation"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.saturation);
                                    if (message.transitionTime != null && message.hasOwnProperty("transitionTime"))
                                        writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.transitionTime);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified MoveToSatCmdParams message, length delimited. Does not implicitly {@link matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToSatCmdParams.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToSatCmdParams
                                 * @static
                                 * @param {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.IMoveToSatCmdParams} message MoveToSatCmdParams message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                MoveToSatCmdParams.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a MoveToSatCmdParams message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToSatCmdParams
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToSatCmdParams} MoveToSatCmdParams
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                MoveToSatCmdParams.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToSatCmdParams();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.saturation = reader.uint32();
                                            break;
                                        case 2:
                                            message.transitionTime = reader.uint32();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a MoveToSatCmdParams message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToSatCmdParams
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToSatCmdParams} MoveToSatCmdParams
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                MoveToSatCmdParams.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a MoveToSatCmdParams message.
                                 * @function verify
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToSatCmdParams
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                MoveToSatCmdParams.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.saturation != null && message.hasOwnProperty("saturation"))
                                        if (!$util.isInteger(message.saturation))
                                            return "saturation: integer expected";
                                    if (message.transitionTime != null && message.hasOwnProperty("transitionTime"))
                                        if (!$util.isInteger(message.transitionTime))
                                            return "transitionTime: integer expected";
                                    return null;
                                };

                                /**
                                 * Creates a MoveToSatCmdParams message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToSatCmdParams
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToSatCmdParams} MoveToSatCmdParams
                                 */
                                MoveToSatCmdParams.fromObject = function fromObject(object) {
                                    if (object instanceof $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToSatCmdParams)
                                        return object;
                                    var message = new $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToSatCmdParams();
                                    if (object.saturation != null)
                                        message.saturation = object.saturation >>> 0;
                                    if (object.transitionTime != null)
                                        message.transitionTime = object.transitionTime >>> 0;
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a MoveToSatCmdParams message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToSatCmdParams
                                 * @static
                                 * @param {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToSatCmdParams} message MoveToSatCmdParams
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                MoveToSatCmdParams.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults) {
                                        object.saturation = 0;
                                        object.transitionTime = 0;
                                    }
                                    if (message.saturation != null && message.hasOwnProperty("saturation"))
                                        object.saturation = message.saturation;
                                    if (message.transitionTime != null && message.hasOwnProperty("transitionTime"))
                                        object.transitionTime = message.transitionTime;
                                    return object;
                                };

                                /**
                                 * Converts this MoveToSatCmdParams to JSON.
                                 * @function toJSON
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToSatCmdParams
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                MoveToSatCmdParams.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return MoveToSatCmdParams;
                            })();

                            ColorControlCmd.MoveToHueAndSatCmdParams = (function() {

                                /**
                                 * Properties of a MoveToHueAndSatCmdParams.
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd
                                 * @interface IMoveToHueAndSatCmdParams
                                 * @property {number|null} [hue] MoveToHueAndSatCmdParams hue
                                 * @property {number|null} [saturation] MoveToHueAndSatCmdParams saturation
                                 * @property {number|null} [transitionTime] MoveToHueAndSatCmdParams transitionTime
                                 */

                                /**
                                 * Constructs a new MoveToHueAndSatCmdParams.
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd
                                 * @classdesc Represents a MoveToHueAndSatCmdParams.
                                 * @implements IMoveToHueAndSatCmdParams
                                 * @constructor
                                 * @param {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.IMoveToHueAndSatCmdParams=} [properties] Properties to set
                                 */
                                function MoveToHueAndSatCmdParams(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * MoveToHueAndSatCmdParams hue.
                                 * @member {number} hue
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToHueAndSatCmdParams
                                 * @instance
                                 */
                                MoveToHueAndSatCmdParams.prototype.hue = 0;

                                /**
                                 * MoveToHueAndSatCmdParams saturation.
                                 * @member {number} saturation
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToHueAndSatCmdParams
                                 * @instance
                                 */
                                MoveToHueAndSatCmdParams.prototype.saturation = 0;

                                /**
                                 * MoveToHueAndSatCmdParams transitionTime.
                                 * @member {number} transitionTime
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToHueAndSatCmdParams
                                 * @instance
                                 */
                                MoveToHueAndSatCmdParams.prototype.transitionTime = 0;

                                /**
                                 * Creates a new MoveToHueAndSatCmdParams instance using the specified properties.
                                 * @function create
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToHueAndSatCmdParams
                                 * @static
                                 * @param {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.IMoveToHueAndSatCmdParams=} [properties] Properties to set
                                 * @returns {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToHueAndSatCmdParams} MoveToHueAndSatCmdParams instance
                                 */
                                MoveToHueAndSatCmdParams.create = function create(properties) {
                                    return new MoveToHueAndSatCmdParams(properties);
                                };

                                /**
                                 * Encodes the specified MoveToHueAndSatCmdParams message. Does not implicitly {@link matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToHueAndSatCmdParams.verify|verify} messages.
                                 * @function encode
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToHueAndSatCmdParams
                                 * @static
                                 * @param {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.IMoveToHueAndSatCmdParams} message MoveToHueAndSatCmdParams message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                MoveToHueAndSatCmdParams.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.hue != null && message.hasOwnProperty("hue"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.hue);
                                    if (message.saturation != null && message.hasOwnProperty("saturation"))
                                        writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.saturation);
                                    if (message.transitionTime != null && message.hasOwnProperty("transitionTime"))
                                        writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.transitionTime);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified MoveToHueAndSatCmdParams message, length delimited. Does not implicitly {@link matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToHueAndSatCmdParams.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToHueAndSatCmdParams
                                 * @static
                                 * @param {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.IMoveToHueAndSatCmdParams} message MoveToHueAndSatCmdParams message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                MoveToHueAndSatCmdParams.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a MoveToHueAndSatCmdParams message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToHueAndSatCmdParams
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToHueAndSatCmdParams} MoveToHueAndSatCmdParams
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                MoveToHueAndSatCmdParams.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToHueAndSatCmdParams();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.hue = reader.uint32();
                                            break;
                                        case 2:
                                            message.saturation = reader.uint32();
                                            break;
                                        case 3:
                                            message.transitionTime = reader.uint32();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a MoveToHueAndSatCmdParams message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToHueAndSatCmdParams
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToHueAndSatCmdParams} MoveToHueAndSatCmdParams
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                MoveToHueAndSatCmdParams.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a MoveToHueAndSatCmdParams message.
                                 * @function verify
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToHueAndSatCmdParams
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                MoveToHueAndSatCmdParams.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.hue != null && message.hasOwnProperty("hue"))
                                        if (!$util.isInteger(message.hue))
                                            return "hue: integer expected";
                                    if (message.saturation != null && message.hasOwnProperty("saturation"))
                                        if (!$util.isInteger(message.saturation))
                                            return "saturation: integer expected";
                                    if (message.transitionTime != null && message.hasOwnProperty("transitionTime"))
                                        if (!$util.isInteger(message.transitionTime))
                                            return "transitionTime: integer expected";
                                    return null;
                                };

                                /**
                                 * Creates a MoveToHueAndSatCmdParams message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToHueAndSatCmdParams
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToHueAndSatCmdParams} MoveToHueAndSatCmdParams
                                 */
                                MoveToHueAndSatCmdParams.fromObject = function fromObject(object) {
                                    if (object instanceof $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToHueAndSatCmdParams)
                                        return object;
                                    var message = new $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToHueAndSatCmdParams();
                                    if (object.hue != null)
                                        message.hue = object.hue >>> 0;
                                    if (object.saturation != null)
                                        message.saturation = object.saturation >>> 0;
                                    if (object.transitionTime != null)
                                        message.transitionTime = object.transitionTime >>> 0;
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a MoveToHueAndSatCmdParams message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToHueAndSatCmdParams
                                 * @static
                                 * @param {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToHueAndSatCmdParams} message MoveToHueAndSatCmdParams
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                MoveToHueAndSatCmdParams.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults) {
                                        object.hue = 0;
                                        object.saturation = 0;
                                        object.transitionTime = 0;
                                    }
                                    if (message.hue != null && message.hasOwnProperty("hue"))
                                        object.hue = message.hue;
                                    if (message.saturation != null && message.hasOwnProperty("saturation"))
                                        object.saturation = message.saturation;
                                    if (message.transitionTime != null && message.hasOwnProperty("transitionTime"))
                                        object.transitionTime = message.transitionTime;
                                    return object;
                                };

                                /**
                                 * Converts this MoveToHueAndSatCmdParams to JSON.
                                 * @function toJSON
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToHueAndSatCmdParams
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                MoveToHueAndSatCmdParams.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return MoveToHueAndSatCmdParams;
                            })();

                            ColorControlCmd.MoveToColorTempCmdParams = (function() {

                                /**
                                 * Properties of a MoveToColorTempCmdParams.
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd
                                 * @interface IMoveToColorTempCmdParams
                                 * @property {number|null} [colorTemperature] MoveToColorTempCmdParams colorTemperature
                                 * @property {number|null} [transitionTime] MoveToColorTempCmdParams transitionTime
                                 */

                                /**
                                 * Constructs a new MoveToColorTempCmdParams.
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd
                                 * @classdesc Represents a MoveToColorTempCmdParams.
                                 * @implements IMoveToColorTempCmdParams
                                 * @constructor
                                 * @param {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.IMoveToColorTempCmdParams=} [properties] Properties to set
                                 */
                                function MoveToColorTempCmdParams(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * MoveToColorTempCmdParams colorTemperature.
                                 * @member {number} colorTemperature
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToColorTempCmdParams
                                 * @instance
                                 */
                                MoveToColorTempCmdParams.prototype.colorTemperature = 0;

                                /**
                                 * MoveToColorTempCmdParams transitionTime.
                                 * @member {number} transitionTime
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToColorTempCmdParams
                                 * @instance
                                 */
                                MoveToColorTempCmdParams.prototype.transitionTime = 0;

                                /**
                                 * Creates a new MoveToColorTempCmdParams instance using the specified properties.
                                 * @function create
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToColorTempCmdParams
                                 * @static
                                 * @param {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.IMoveToColorTempCmdParams=} [properties] Properties to set
                                 * @returns {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToColorTempCmdParams} MoveToColorTempCmdParams instance
                                 */
                                MoveToColorTempCmdParams.create = function create(properties) {
                                    return new MoveToColorTempCmdParams(properties);
                                };

                                /**
                                 * Encodes the specified MoveToColorTempCmdParams message. Does not implicitly {@link matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToColorTempCmdParams.verify|verify} messages.
                                 * @function encode
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToColorTempCmdParams
                                 * @static
                                 * @param {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.IMoveToColorTempCmdParams} message MoveToColorTempCmdParams message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                MoveToColorTempCmdParams.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.colorTemperature != null && message.hasOwnProperty("colorTemperature"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.colorTemperature);
                                    if (message.transitionTime != null && message.hasOwnProperty("transitionTime"))
                                        writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.transitionTime);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified MoveToColorTempCmdParams message, length delimited. Does not implicitly {@link matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToColorTempCmdParams.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToColorTempCmdParams
                                 * @static
                                 * @param {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.IMoveToColorTempCmdParams} message MoveToColorTempCmdParams message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                MoveToColorTempCmdParams.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a MoveToColorTempCmdParams message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToColorTempCmdParams
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToColorTempCmdParams} MoveToColorTempCmdParams
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                MoveToColorTempCmdParams.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToColorTempCmdParams();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.colorTemperature = reader.uint32();
                                            break;
                                        case 2:
                                            message.transitionTime = reader.uint32();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a MoveToColorTempCmdParams message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToColorTempCmdParams
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToColorTempCmdParams} MoveToColorTempCmdParams
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                MoveToColorTempCmdParams.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a MoveToColorTempCmdParams message.
                                 * @function verify
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToColorTempCmdParams
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                MoveToColorTempCmdParams.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.colorTemperature != null && message.hasOwnProperty("colorTemperature"))
                                        if (!$util.isInteger(message.colorTemperature))
                                            return "colorTemperature: integer expected";
                                    if (message.transitionTime != null && message.hasOwnProperty("transitionTime"))
                                        if (!$util.isInteger(message.transitionTime))
                                            return "transitionTime: integer expected";
                                    return null;
                                };

                                /**
                                 * Creates a MoveToColorTempCmdParams message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToColorTempCmdParams
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToColorTempCmdParams} MoveToColorTempCmdParams
                                 */
                                MoveToColorTempCmdParams.fromObject = function fromObject(object) {
                                    if (object instanceof $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToColorTempCmdParams)
                                        return object;
                                    var message = new $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToColorTempCmdParams();
                                    if (object.colorTemperature != null)
                                        message.colorTemperature = object.colorTemperature >>> 0;
                                    if (object.transitionTime != null)
                                        message.transitionTime = object.transitionTime >>> 0;
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a MoveToColorTempCmdParams message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToColorTempCmdParams
                                 * @static
                                 * @param {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToColorTempCmdParams} message MoveToColorTempCmdParams
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                MoveToColorTempCmdParams.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults) {
                                        object.colorTemperature = 0;
                                        object.transitionTime = 0;
                                    }
                                    if (message.colorTemperature != null && message.hasOwnProperty("colorTemperature"))
                                        object.colorTemperature = message.colorTemperature;
                                    if (message.transitionTime != null && message.hasOwnProperty("transitionTime"))
                                        object.transitionTime = message.transitionTime;
                                    return object;
                                };

                                /**
                                 * Converts this MoveToColorTempCmdParams to JSON.
                                 * @function toJSON
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.ColorControlCmd.MoveToColorTempCmdParams
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                MoveToColorTempCmdParams.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return MoveToColorTempCmdParams;
                            })();

                            return ColorControlCmd;
                        })();

                        ZCLCmd.IdentifyCmd = (function() {

                            /**
                             * Properties of an IdentifyCmd.
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd
                             * @interface IIdentifyCmd
                             * @property {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd.ZCLIdentifyCmdType|null} [type] IdentifyCmd type
                             * @property {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd.IIdentifyOnCmdParams|null} [identifyOnParams] IdentifyCmd identifyOnParams
                             * @property {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd.IIdentifyOffCmdParams|null} [identifyOffParams] IdentifyCmd identifyOffParams
                             */

                            /**
                             * Constructs a new IdentifyCmd.
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd
                             * @classdesc Represents an IdentifyCmd.
                             * @implements IIdentifyCmd
                             * @constructor
                             * @param {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IIdentifyCmd=} [properties] Properties to set
                             */
                            function IdentifyCmd(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }

                            /**
                             * IdentifyCmd type.
                             * @member {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd.ZCLIdentifyCmdType} type
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd
                             * @instance
                             */
                            IdentifyCmd.prototype.type = 0;

                            /**
                             * IdentifyCmd identifyOnParams.
                             * @member {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd.IIdentifyOnCmdParams|null|undefined} identifyOnParams
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd
                             * @instance
                             */
                            IdentifyCmd.prototype.identifyOnParams = null;

                            /**
                             * IdentifyCmd identifyOffParams.
                             * @member {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd.IIdentifyOffCmdParams|null|undefined} identifyOffParams
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd
                             * @instance
                             */
                            IdentifyCmd.prototype.identifyOffParams = null;

                            /**
                             * Creates a new IdentifyCmd instance using the specified properties.
                             * @function create
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd
                             * @static
                             * @param {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IIdentifyCmd=} [properties] Properties to set
                             * @returns {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd} IdentifyCmd instance
                             */
                            IdentifyCmd.create = function create(properties) {
                                return new IdentifyCmd(properties);
                            };

                            /**
                             * Encodes the specified IdentifyCmd message. Does not implicitly {@link matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd.verify|verify} messages.
                             * @function encode
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd
                             * @static
                             * @param {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IIdentifyCmd} message IdentifyCmd message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            IdentifyCmd.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.type != null && message.hasOwnProperty("type"))
                                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
                                if (message.identifyOnParams != null && message.hasOwnProperty("identifyOnParams"))
                                    $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd.IdentifyOnCmdParams.encode(message.identifyOnParams, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                if (message.identifyOffParams != null && message.hasOwnProperty("identifyOffParams"))
                                    $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd.IdentifyOffCmdParams.encode(message.identifyOffParams, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                                return writer;
                            };

                            /**
                             * Encodes the specified IdentifyCmd message, length delimited. Does not implicitly {@link matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd
                             * @static
                             * @param {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IIdentifyCmd} message IdentifyCmd message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            IdentifyCmd.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };

                            /**
                             * Decodes an IdentifyCmd message from the specified reader or buffer.
                             * @function decode
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd} IdentifyCmd
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            IdentifyCmd.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.type = reader.int32();
                                        break;
                                    case 2:
                                        message.identifyOnParams = $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd.IdentifyOnCmdParams.decode(reader, reader.uint32());
                                        break;
                                    case 3:
                                        message.identifyOffParams = $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd.IdentifyOffCmdParams.decode(reader, reader.uint32());
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };

                            /**
                             * Decodes an IdentifyCmd message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd} IdentifyCmd
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            IdentifyCmd.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };

                            /**
                             * Verifies an IdentifyCmd message.
                             * @function verify
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            IdentifyCmd.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.type != null && message.hasOwnProperty("type"))
                                    switch (message.type) {
                                    default:
                                        return "type: enum value expected";
                                    case 0:
                                    case 1:
                                        break;
                                    }
                                if (message.identifyOnParams != null && message.hasOwnProperty("identifyOnParams")) {
                                    var error = $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd.IdentifyOnCmdParams.verify(message.identifyOnParams);
                                    if (error)
                                        return "identifyOnParams." + error;
                                }
                                if (message.identifyOffParams != null && message.hasOwnProperty("identifyOffParams")) {
                                    var error = $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd.IdentifyOffCmdParams.verify(message.identifyOffParams);
                                    if (error)
                                        return "identifyOffParams." + error;
                                }
                                return null;
                            };

                            /**
                             * Creates an IdentifyCmd message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd} IdentifyCmd
                             */
                            IdentifyCmd.fromObject = function fromObject(object) {
                                if (object instanceof $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd)
                                    return object;
                                var message = new $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd();
                                switch (object.type) {
                                case "IDENTIFY_ON":
                                case 0:
                                    message.type = 0;
                                    break;
                                case "IDENTIFY_OFF":
                                case 1:
                                    message.type = 1;
                                    break;
                                }
                                if (object.identifyOnParams != null) {
                                    if (typeof object.identifyOnParams !== "object")
                                        throw TypeError(".matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd.identifyOnParams: object expected");
                                    message.identifyOnParams = $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd.IdentifyOnCmdParams.fromObject(object.identifyOnParams);
                                }
                                if (object.identifyOffParams != null) {
                                    if (typeof object.identifyOffParams !== "object")
                                        throw TypeError(".matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd.identifyOffParams: object expected");
                                    message.identifyOffParams = $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd.IdentifyOffCmdParams.fromObject(object.identifyOffParams);
                                }
                                return message;
                            };

                            /**
                             * Creates a plain object from an IdentifyCmd message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd
                             * @static
                             * @param {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd} message IdentifyCmd
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            IdentifyCmd.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    object.type = options.enums === String ? "IDENTIFY_ON" : 0;
                                    object.identifyOnParams = null;
                                    object.identifyOffParams = null;
                                }
                                if (message.type != null && message.hasOwnProperty("type"))
                                    object.type = options.enums === String ? $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd.ZCLIdentifyCmdType[message.type] : message.type;
                                if (message.identifyOnParams != null && message.hasOwnProperty("identifyOnParams"))
                                    object.identifyOnParams = $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd.IdentifyOnCmdParams.toObject(message.identifyOnParams, options);
                                if (message.identifyOffParams != null && message.hasOwnProperty("identifyOffParams"))
                                    object.identifyOffParams = $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd.IdentifyOffCmdParams.toObject(message.identifyOffParams, options);
                                return object;
                            };

                            /**
                             * Converts this IdentifyCmd to JSON.
                             * @function toJSON
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            IdentifyCmd.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };

                            /**
                             * ZCLIdentifyCmdType enum.
                             * @name matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd.ZCLIdentifyCmdType
                             * @enum {string}
                             * @property {number} IDENTIFY_ON=0 IDENTIFY_ON value
                             * @property {number} IDENTIFY_OFF=1 IDENTIFY_OFF value
                             */
                            IdentifyCmd.ZCLIdentifyCmdType = (function() {
                                var valuesById = {}, values = Object.create(valuesById);
                                values[valuesById[0] = "IDENTIFY_ON"] = 0;
                                values[valuesById[1] = "IDENTIFY_OFF"] = 1;
                                return values;
                            })();

                            IdentifyCmd.IdentifyOnCmdParams = (function() {

                                /**
                                 * Properties of an IdentifyOnCmdParams.
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd
                                 * @interface IIdentifyOnCmdParams
                                 * @property {number|null} [endpoint] IdentifyOnCmdParams endpoint
                                 * @property {number|null} [identifyTime] IdentifyOnCmdParams identifyTime
                                 */

                                /**
                                 * Constructs a new IdentifyOnCmdParams.
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd
                                 * @classdesc Represents an IdentifyOnCmdParams.
                                 * @implements IIdentifyOnCmdParams
                                 * @constructor
                                 * @param {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd.IIdentifyOnCmdParams=} [properties] Properties to set
                                 */
                                function IdentifyOnCmdParams(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * IdentifyOnCmdParams endpoint.
                                 * @member {number} endpoint
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd.IdentifyOnCmdParams
                                 * @instance
                                 */
                                IdentifyOnCmdParams.prototype.endpoint = 0;

                                /**
                                 * IdentifyOnCmdParams identifyTime.
                                 * @member {number} identifyTime
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd.IdentifyOnCmdParams
                                 * @instance
                                 */
                                IdentifyOnCmdParams.prototype.identifyTime = 0;

                                /**
                                 * Creates a new IdentifyOnCmdParams instance using the specified properties.
                                 * @function create
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd.IdentifyOnCmdParams
                                 * @static
                                 * @param {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd.IIdentifyOnCmdParams=} [properties] Properties to set
                                 * @returns {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd.IdentifyOnCmdParams} IdentifyOnCmdParams instance
                                 */
                                IdentifyOnCmdParams.create = function create(properties) {
                                    return new IdentifyOnCmdParams(properties);
                                };

                                /**
                                 * Encodes the specified IdentifyOnCmdParams message. Does not implicitly {@link matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd.IdentifyOnCmdParams.verify|verify} messages.
                                 * @function encode
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd.IdentifyOnCmdParams
                                 * @static
                                 * @param {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd.IIdentifyOnCmdParams} message IdentifyOnCmdParams message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                IdentifyOnCmdParams.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.endpoint != null && message.hasOwnProperty("endpoint"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.endpoint);
                                    if (message.identifyTime != null && message.hasOwnProperty("identifyTime"))
                                        writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.identifyTime);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified IdentifyOnCmdParams message, length delimited. Does not implicitly {@link matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd.IdentifyOnCmdParams.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd.IdentifyOnCmdParams
                                 * @static
                                 * @param {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd.IIdentifyOnCmdParams} message IdentifyOnCmdParams message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                IdentifyOnCmdParams.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes an IdentifyOnCmdParams message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd.IdentifyOnCmdParams
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd.IdentifyOnCmdParams} IdentifyOnCmdParams
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                IdentifyOnCmdParams.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd.IdentifyOnCmdParams();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.endpoint = reader.uint32();
                                            break;
                                        case 2:
                                            message.identifyTime = reader.uint32();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes an IdentifyOnCmdParams message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd.IdentifyOnCmdParams
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd.IdentifyOnCmdParams} IdentifyOnCmdParams
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                IdentifyOnCmdParams.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies an IdentifyOnCmdParams message.
                                 * @function verify
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd.IdentifyOnCmdParams
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                IdentifyOnCmdParams.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.endpoint != null && message.hasOwnProperty("endpoint"))
                                        if (!$util.isInteger(message.endpoint))
                                            return "endpoint: integer expected";
                                    if (message.identifyTime != null && message.hasOwnProperty("identifyTime"))
                                        if (!$util.isInteger(message.identifyTime))
                                            return "identifyTime: integer expected";
                                    return null;
                                };

                                /**
                                 * Creates an IdentifyOnCmdParams message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd.IdentifyOnCmdParams
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd.IdentifyOnCmdParams} IdentifyOnCmdParams
                                 */
                                IdentifyOnCmdParams.fromObject = function fromObject(object) {
                                    if (object instanceof $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd.IdentifyOnCmdParams)
                                        return object;
                                    var message = new $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd.IdentifyOnCmdParams();
                                    if (object.endpoint != null)
                                        message.endpoint = object.endpoint >>> 0;
                                    if (object.identifyTime != null)
                                        message.identifyTime = object.identifyTime >>> 0;
                                    return message;
                                };

                                /**
                                 * Creates a plain object from an IdentifyOnCmdParams message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd.IdentifyOnCmdParams
                                 * @static
                                 * @param {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd.IdentifyOnCmdParams} message IdentifyOnCmdParams
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                IdentifyOnCmdParams.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults) {
                                        object.endpoint = 0;
                                        object.identifyTime = 0;
                                    }
                                    if (message.endpoint != null && message.hasOwnProperty("endpoint"))
                                        object.endpoint = message.endpoint;
                                    if (message.identifyTime != null && message.hasOwnProperty("identifyTime"))
                                        object.identifyTime = message.identifyTime;
                                    return object;
                                };

                                /**
                                 * Converts this IdentifyOnCmdParams to JSON.
                                 * @function toJSON
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd.IdentifyOnCmdParams
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                IdentifyOnCmdParams.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return IdentifyOnCmdParams;
                            })();

                            IdentifyCmd.IdentifyOffCmdParams = (function() {

                                /**
                                 * Properties of an IdentifyOffCmdParams.
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd
                                 * @interface IIdentifyOffCmdParams
                                 * @property {number|null} [identifyTime] IdentifyOffCmdParams identifyTime
                                 */

                                /**
                                 * Constructs a new IdentifyOffCmdParams.
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd
                                 * @classdesc Represents an IdentifyOffCmdParams.
                                 * @implements IIdentifyOffCmdParams
                                 * @constructor
                                 * @param {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd.IIdentifyOffCmdParams=} [properties] Properties to set
                                 */
                                function IdentifyOffCmdParams(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * IdentifyOffCmdParams identifyTime.
                                 * @member {number} identifyTime
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd.IdentifyOffCmdParams
                                 * @instance
                                 */
                                IdentifyOffCmdParams.prototype.identifyTime = 0;

                                /**
                                 * Creates a new IdentifyOffCmdParams instance using the specified properties.
                                 * @function create
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd.IdentifyOffCmdParams
                                 * @static
                                 * @param {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd.IIdentifyOffCmdParams=} [properties] Properties to set
                                 * @returns {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd.IdentifyOffCmdParams} IdentifyOffCmdParams instance
                                 */
                                IdentifyOffCmdParams.create = function create(properties) {
                                    return new IdentifyOffCmdParams(properties);
                                };

                                /**
                                 * Encodes the specified IdentifyOffCmdParams message. Does not implicitly {@link matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd.IdentifyOffCmdParams.verify|verify} messages.
                                 * @function encode
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd.IdentifyOffCmdParams
                                 * @static
                                 * @param {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd.IIdentifyOffCmdParams} message IdentifyOffCmdParams message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                IdentifyOffCmdParams.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.identifyTime != null && message.hasOwnProperty("identifyTime"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.identifyTime);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified IdentifyOffCmdParams message, length delimited. Does not implicitly {@link matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd.IdentifyOffCmdParams.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd.IdentifyOffCmdParams
                                 * @static
                                 * @param {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd.IIdentifyOffCmdParams} message IdentifyOffCmdParams message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                IdentifyOffCmdParams.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes an IdentifyOffCmdParams message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd.IdentifyOffCmdParams
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd.IdentifyOffCmdParams} IdentifyOffCmdParams
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                IdentifyOffCmdParams.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd.IdentifyOffCmdParams();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.identifyTime = reader.uint32();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes an IdentifyOffCmdParams message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd.IdentifyOffCmdParams
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd.IdentifyOffCmdParams} IdentifyOffCmdParams
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                IdentifyOffCmdParams.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies an IdentifyOffCmdParams message.
                                 * @function verify
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd.IdentifyOffCmdParams
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                IdentifyOffCmdParams.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.identifyTime != null && message.hasOwnProperty("identifyTime"))
                                        if (!$util.isInteger(message.identifyTime))
                                            return "identifyTime: integer expected";
                                    return null;
                                };

                                /**
                                 * Creates an IdentifyOffCmdParams message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd.IdentifyOffCmdParams
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd.IdentifyOffCmdParams} IdentifyOffCmdParams
                                 */
                                IdentifyOffCmdParams.fromObject = function fromObject(object) {
                                    if (object instanceof $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd.IdentifyOffCmdParams)
                                        return object;
                                    var message = new $root.matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd.IdentifyOffCmdParams();
                                    if (object.identifyTime != null)
                                        message.identifyTime = object.identifyTime >>> 0;
                                    return message;
                                };

                                /**
                                 * Creates a plain object from an IdentifyOffCmdParams message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd.IdentifyOffCmdParams
                                 * @static
                                 * @param {matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd.IdentifyOffCmdParams} message IdentifyOffCmdParams
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                IdentifyOffCmdParams.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults)
                                        object.identifyTime = 0;
                                    if (message.identifyTime != null && message.hasOwnProperty("identifyTime"))
                                        object.identifyTime = message.identifyTime;
                                    return object;
                                };

                                /**
                                 * Converts this IdentifyOffCmdParams to JSON.
                                 * @function toJSON
                                 * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.ZCLCmd.IdentifyCmd.IdentifyOffCmdParams
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                IdentifyOffCmdParams.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return IdentifyOffCmdParams;
                            })();

                            return IdentifyCmd;
                        })();

                        return ZCLCmd;
                    })();

                    ZigBeeMsg.NetworkMgmtCmd = (function() {

                        /**
                         * Properties of a NetworkMgmtCmd.
                         * @memberof matrix_io.malos.v1.comm.ZigBeeMsg
                         * @interface INetworkMgmtCmd
                         * @property {matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NetworkMgmtCmdTypes|null} [type] NetworkMgmtCmd type
                         * @property {matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.IPermitJoinParams|null} [permitJoinParams] NetworkMgmtCmd permitJoinParams
                         * @property {boolean|null} [isProxyActive] NetworkMgmtCmd isProxyActive
                         * @property {matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.INodeLeaveNetParams|null} [nodeLeaveParams] NetworkMgmtCmd nodeLeaveParams
                         * @property {matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.INodeDescription|null} [nodeInfo] NetworkMgmtCmd nodeInfo
                         * @property {Array.<matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.INodeDescription>|null} [connectedNodes] NetworkMgmtCmd connectedNodes
                         * @property {matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.INetworkStatus|null} [networkStatus] NetworkMgmtCmd networkStatus
                         */

                        /**
                         * Constructs a new NetworkMgmtCmd.
                         * @memberof matrix_io.malos.v1.comm.ZigBeeMsg
                         * @classdesc Represents a NetworkMgmtCmd.
                         * @implements INetworkMgmtCmd
                         * @constructor
                         * @param {matrix_io.malos.v1.comm.ZigBeeMsg.INetworkMgmtCmd=} [properties] Properties to set
                         */
                        function NetworkMgmtCmd(properties) {
                            this.connectedNodes = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * NetworkMgmtCmd type.
                         * @member {matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NetworkMgmtCmdTypes} type
                         * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd
                         * @instance
                         */
                        NetworkMgmtCmd.prototype.type = 0;

                        /**
                         * NetworkMgmtCmd permitJoinParams.
                         * @member {matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.IPermitJoinParams|null|undefined} permitJoinParams
                         * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd
                         * @instance
                         */
                        NetworkMgmtCmd.prototype.permitJoinParams = null;

                        /**
                         * NetworkMgmtCmd isProxyActive.
                         * @member {boolean} isProxyActive
                         * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd
                         * @instance
                         */
                        NetworkMgmtCmd.prototype.isProxyActive = false;

                        /**
                         * NetworkMgmtCmd nodeLeaveParams.
                         * @member {matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.INodeLeaveNetParams|null|undefined} nodeLeaveParams
                         * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd
                         * @instance
                         */
                        NetworkMgmtCmd.prototype.nodeLeaveParams = null;

                        /**
                         * NetworkMgmtCmd nodeInfo.
                         * @member {matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.INodeDescription|null|undefined} nodeInfo
                         * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd
                         * @instance
                         */
                        NetworkMgmtCmd.prototype.nodeInfo = null;

                        /**
                         * NetworkMgmtCmd connectedNodes.
                         * @member {Array.<matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.INodeDescription>} connectedNodes
                         * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd
                         * @instance
                         */
                        NetworkMgmtCmd.prototype.connectedNodes = $util.emptyArray;

                        /**
                         * NetworkMgmtCmd networkStatus.
                         * @member {matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.INetworkStatus|null|undefined} networkStatus
                         * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd
                         * @instance
                         */
                        NetworkMgmtCmd.prototype.networkStatus = null;

                        /**
                         * Creates a new NetworkMgmtCmd instance using the specified properties.
                         * @function create
                         * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd
                         * @static
                         * @param {matrix_io.malos.v1.comm.ZigBeeMsg.INetworkMgmtCmd=} [properties] Properties to set
                         * @returns {matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd} NetworkMgmtCmd instance
                         */
                        NetworkMgmtCmd.create = function create(properties) {
                            return new NetworkMgmtCmd(properties);
                        };

                        /**
                         * Encodes the specified NetworkMgmtCmd message. Does not implicitly {@link matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.verify|verify} messages.
                         * @function encode
                         * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd
                         * @static
                         * @param {matrix_io.malos.v1.comm.ZigBeeMsg.INetworkMgmtCmd} message NetworkMgmtCmd message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        NetworkMgmtCmd.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.type != null && message.hasOwnProperty("type"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
                            if (message.permitJoinParams != null && message.hasOwnProperty("permitJoinParams"))
                                $root.matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.PermitJoinParams.encode(message.permitJoinParams, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.isProxyActive != null && message.hasOwnProperty("isProxyActive"))
                                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.isProxyActive);
                            if (message.nodeLeaveParams != null && message.hasOwnProperty("nodeLeaveParams"))
                                $root.matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NodeLeaveNetParams.encode(message.nodeLeaveParams, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            if (message.nodeInfo != null && message.hasOwnProperty("nodeInfo"))
                                $root.matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NodeDescription.encode(message.nodeInfo, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                            if (message.connectedNodes != null && message.connectedNodes.length)
                                for (var i = 0; i < message.connectedNodes.length; ++i)
                                    $root.matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NodeDescription.encode(message.connectedNodes[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                            if (message.networkStatus != null && message.hasOwnProperty("networkStatus"))
                                $root.matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NetworkStatus.encode(message.networkStatus, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                            return writer;
                        };

                        /**
                         * Encodes the specified NetworkMgmtCmd message, length delimited. Does not implicitly {@link matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd
                         * @static
                         * @param {matrix_io.malos.v1.comm.ZigBeeMsg.INetworkMgmtCmd} message NetworkMgmtCmd message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        NetworkMgmtCmd.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a NetworkMgmtCmd message from the specified reader or buffer.
                         * @function decode
                         * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd} NetworkMgmtCmd
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        NetworkMgmtCmd.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.type = reader.int32();
                                    break;
                                case 2:
                                    message.permitJoinParams = $root.matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.PermitJoinParams.decode(reader, reader.uint32());
                                    break;
                                case 3:
                                    message.isProxyActive = reader.bool();
                                    break;
                                case 4:
                                    message.nodeLeaveParams = $root.matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NodeLeaveNetParams.decode(reader, reader.uint32());
                                    break;
                                case 5:
                                    message.nodeInfo = $root.matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NodeDescription.decode(reader, reader.uint32());
                                    break;
                                case 6:
                                    if (!(message.connectedNodes && message.connectedNodes.length))
                                        message.connectedNodes = [];
                                    message.connectedNodes.push($root.matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NodeDescription.decode(reader, reader.uint32()));
                                    break;
                                case 7:
                                    message.networkStatus = $root.matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NetworkStatus.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a NetworkMgmtCmd message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd} NetworkMgmtCmd
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        NetworkMgmtCmd.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a NetworkMgmtCmd message.
                         * @function verify
                         * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        NetworkMgmtCmd.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.type != null && message.hasOwnProperty("type"))
                                switch (message.type) {
                                default:
                                    return "type: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                case 4:
                                case 5:
                                case 6:
                                case 7:
                                    break;
                                }
                            if (message.permitJoinParams != null && message.hasOwnProperty("permitJoinParams")) {
                                var error = $root.matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.PermitJoinParams.verify(message.permitJoinParams);
                                if (error)
                                    return "permitJoinParams." + error;
                            }
                            if (message.isProxyActive != null && message.hasOwnProperty("isProxyActive"))
                                if (typeof message.isProxyActive !== "boolean")
                                    return "isProxyActive: boolean expected";
                            if (message.nodeLeaveParams != null && message.hasOwnProperty("nodeLeaveParams")) {
                                var error = $root.matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NodeLeaveNetParams.verify(message.nodeLeaveParams);
                                if (error)
                                    return "nodeLeaveParams." + error;
                            }
                            if (message.nodeInfo != null && message.hasOwnProperty("nodeInfo")) {
                                var error = $root.matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NodeDescription.verify(message.nodeInfo);
                                if (error)
                                    return "nodeInfo." + error;
                            }
                            if (message.connectedNodes != null && message.hasOwnProperty("connectedNodes")) {
                                if (!Array.isArray(message.connectedNodes))
                                    return "connectedNodes: array expected";
                                for (var i = 0; i < message.connectedNodes.length; ++i) {
                                    var error = $root.matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NodeDescription.verify(message.connectedNodes[i]);
                                    if (error)
                                        return "connectedNodes." + error;
                                }
                            }
                            if (message.networkStatus != null && message.hasOwnProperty("networkStatus")) {
                                var error = $root.matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NetworkStatus.verify(message.networkStatus);
                                if (error)
                                    return "networkStatus." + error;
                            }
                            return null;
                        };

                        /**
                         * Creates a NetworkMgmtCmd message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd} NetworkMgmtCmd
                         */
                        NetworkMgmtCmd.fromObject = function fromObject(object) {
                            if (object instanceof $root.matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd)
                                return object;
                            var message = new $root.matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd();
                            switch (object.type) {
                            case "CREATE_NWK":
                            case 0:
                                message.type = 0;
                                break;
                            case "LEAVE_NWK":
                            case 1:
                                message.type = 1;
                                break;
                            case "NODE_LEAVE_NWK":
                            case 2:
                                message.type = 2;
                                break;
                            case "PERMIT_JOIN":
                            case 3:
                                message.type = 3;
                                break;
                            case "DISCOVERY_INFO":
                            case 4:
                                message.type = 4;
                                break;
                            case "RESET_PROXY":
                            case 5:
                                message.type = 5;
                                break;
                            case "IS_PROXY_ACTIVE":
                            case 6:
                                message.type = 6;
                                break;
                            case "NETWORK_STATUS":
                            case 7:
                                message.type = 7;
                                break;
                            }
                            if (object.permitJoinParams != null) {
                                if (typeof object.permitJoinParams !== "object")
                                    throw TypeError(".matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.permitJoinParams: object expected");
                                message.permitJoinParams = $root.matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.PermitJoinParams.fromObject(object.permitJoinParams);
                            }
                            if (object.isProxyActive != null)
                                message.isProxyActive = Boolean(object.isProxyActive);
                            if (object.nodeLeaveParams != null) {
                                if (typeof object.nodeLeaveParams !== "object")
                                    throw TypeError(".matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.nodeLeaveParams: object expected");
                                message.nodeLeaveParams = $root.matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NodeLeaveNetParams.fromObject(object.nodeLeaveParams);
                            }
                            if (object.nodeInfo != null) {
                                if (typeof object.nodeInfo !== "object")
                                    throw TypeError(".matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.nodeInfo: object expected");
                                message.nodeInfo = $root.matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NodeDescription.fromObject(object.nodeInfo);
                            }
                            if (object.connectedNodes) {
                                if (!Array.isArray(object.connectedNodes))
                                    throw TypeError(".matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.connectedNodes: array expected");
                                message.connectedNodes = [];
                                for (var i = 0; i < object.connectedNodes.length; ++i) {
                                    if (typeof object.connectedNodes[i] !== "object")
                                        throw TypeError(".matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.connectedNodes: object expected");
                                    message.connectedNodes[i] = $root.matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NodeDescription.fromObject(object.connectedNodes[i]);
                                }
                            }
                            if (object.networkStatus != null) {
                                if (typeof object.networkStatus !== "object")
                                    throw TypeError(".matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.networkStatus: object expected");
                                message.networkStatus = $root.matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NetworkStatus.fromObject(object.networkStatus);
                            }
                            return message;
                        };

                        /**
                         * Creates a plain object from a NetworkMgmtCmd message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd
                         * @static
                         * @param {matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd} message NetworkMgmtCmd
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        NetworkMgmtCmd.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.connectedNodes = [];
                            if (options.defaults) {
                                object.type = options.enums === String ? "CREATE_NWK" : 0;
                                object.permitJoinParams = null;
                                object.isProxyActive = false;
                                object.nodeLeaveParams = null;
                                object.nodeInfo = null;
                                object.networkStatus = null;
                            }
                            if (message.type != null && message.hasOwnProperty("type"))
                                object.type = options.enums === String ? $root.matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NetworkMgmtCmdTypes[message.type] : message.type;
                            if (message.permitJoinParams != null && message.hasOwnProperty("permitJoinParams"))
                                object.permitJoinParams = $root.matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.PermitJoinParams.toObject(message.permitJoinParams, options);
                            if (message.isProxyActive != null && message.hasOwnProperty("isProxyActive"))
                                object.isProxyActive = message.isProxyActive;
                            if (message.nodeLeaveParams != null && message.hasOwnProperty("nodeLeaveParams"))
                                object.nodeLeaveParams = $root.matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NodeLeaveNetParams.toObject(message.nodeLeaveParams, options);
                            if (message.nodeInfo != null && message.hasOwnProperty("nodeInfo"))
                                object.nodeInfo = $root.matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NodeDescription.toObject(message.nodeInfo, options);
                            if (message.connectedNodes && message.connectedNodes.length) {
                                object.connectedNodes = [];
                                for (var j = 0; j < message.connectedNodes.length; ++j)
                                    object.connectedNodes[j] = $root.matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NodeDescription.toObject(message.connectedNodes[j], options);
                            }
                            if (message.networkStatus != null && message.hasOwnProperty("networkStatus"))
                                object.networkStatus = $root.matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NetworkStatus.toObject(message.networkStatus, options);
                            return object;
                        };

                        /**
                         * Converts this NetworkMgmtCmd to JSON.
                         * @function toJSON
                         * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        NetworkMgmtCmd.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * NetworkMgmtCmdTypes enum.
                         * @name matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NetworkMgmtCmdTypes
                         * @enum {string}
                         * @property {number} CREATE_NWK=0 CREATE_NWK value
                         * @property {number} LEAVE_NWK=1 LEAVE_NWK value
                         * @property {number} NODE_LEAVE_NWK=2 NODE_LEAVE_NWK value
                         * @property {number} PERMIT_JOIN=3 PERMIT_JOIN value
                         * @property {number} DISCOVERY_INFO=4 DISCOVERY_INFO value
                         * @property {number} RESET_PROXY=5 RESET_PROXY value
                         * @property {number} IS_PROXY_ACTIVE=6 IS_PROXY_ACTIVE value
                         * @property {number} NETWORK_STATUS=7 NETWORK_STATUS value
                         */
                        NetworkMgmtCmd.NetworkMgmtCmdTypes = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "CREATE_NWK"] = 0;
                            values[valuesById[1] = "LEAVE_NWK"] = 1;
                            values[valuesById[2] = "NODE_LEAVE_NWK"] = 2;
                            values[valuesById[3] = "PERMIT_JOIN"] = 3;
                            values[valuesById[4] = "DISCOVERY_INFO"] = 4;
                            values[valuesById[5] = "RESET_PROXY"] = 5;
                            values[valuesById[6] = "IS_PROXY_ACTIVE"] = 6;
                            values[valuesById[7] = "NETWORK_STATUS"] = 7;
                            return values;
                        })();

                        NetworkMgmtCmd.PermitJoinParams = (function() {

                            /**
                             * Properties of a PermitJoinParams.
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd
                             * @interface IPermitJoinParams
                             * @property {number|null} [time] PermitJoinParams time
                             */

                            /**
                             * Constructs a new PermitJoinParams.
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd
                             * @classdesc Represents a PermitJoinParams.
                             * @implements IPermitJoinParams
                             * @constructor
                             * @param {matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.IPermitJoinParams=} [properties] Properties to set
                             */
                            function PermitJoinParams(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }

                            /**
                             * PermitJoinParams time.
                             * @member {number} time
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.PermitJoinParams
                             * @instance
                             */
                            PermitJoinParams.prototype.time = 0;

                            /**
                             * Creates a new PermitJoinParams instance using the specified properties.
                             * @function create
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.PermitJoinParams
                             * @static
                             * @param {matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.IPermitJoinParams=} [properties] Properties to set
                             * @returns {matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.PermitJoinParams} PermitJoinParams instance
                             */
                            PermitJoinParams.create = function create(properties) {
                                return new PermitJoinParams(properties);
                            };

                            /**
                             * Encodes the specified PermitJoinParams message. Does not implicitly {@link matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.PermitJoinParams.verify|verify} messages.
                             * @function encode
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.PermitJoinParams
                             * @static
                             * @param {matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.IPermitJoinParams} message PermitJoinParams message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            PermitJoinParams.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.time != null && message.hasOwnProperty("time"))
                                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.time);
                                return writer;
                            };

                            /**
                             * Encodes the specified PermitJoinParams message, length delimited. Does not implicitly {@link matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.PermitJoinParams.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.PermitJoinParams
                             * @static
                             * @param {matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.IPermitJoinParams} message PermitJoinParams message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            PermitJoinParams.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };

                            /**
                             * Decodes a PermitJoinParams message from the specified reader or buffer.
                             * @function decode
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.PermitJoinParams
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.PermitJoinParams} PermitJoinParams
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            PermitJoinParams.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.PermitJoinParams();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.time = reader.uint32();
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };

                            /**
                             * Decodes a PermitJoinParams message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.PermitJoinParams
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.PermitJoinParams} PermitJoinParams
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            PermitJoinParams.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };

                            /**
                             * Verifies a PermitJoinParams message.
                             * @function verify
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.PermitJoinParams
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            PermitJoinParams.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.time != null && message.hasOwnProperty("time"))
                                    if (!$util.isInteger(message.time))
                                        return "time: integer expected";
                                return null;
                            };

                            /**
                             * Creates a PermitJoinParams message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.PermitJoinParams
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.PermitJoinParams} PermitJoinParams
                             */
                            PermitJoinParams.fromObject = function fromObject(object) {
                                if (object instanceof $root.matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.PermitJoinParams)
                                    return object;
                                var message = new $root.matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.PermitJoinParams();
                                if (object.time != null)
                                    message.time = object.time >>> 0;
                                return message;
                            };

                            /**
                             * Creates a plain object from a PermitJoinParams message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.PermitJoinParams
                             * @static
                             * @param {matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.PermitJoinParams} message PermitJoinParams
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            PermitJoinParams.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults)
                                    object.time = 0;
                                if (message.time != null && message.hasOwnProperty("time"))
                                    object.time = message.time;
                                return object;
                            };

                            /**
                             * Converts this PermitJoinParams to JSON.
                             * @function toJSON
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.PermitJoinParams
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            PermitJoinParams.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };

                            return PermitJoinParams;
                        })();

                        NetworkMgmtCmd.NodeLeaveNetParams = (function() {

                            /**
                             * Properties of a NodeLeaveNetParams.
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd
                             * @interface INodeLeaveNetParams
                             * @property {number|null} [nodeId] NodeLeaveNetParams nodeId
                             */

                            /**
                             * Constructs a new NodeLeaveNetParams.
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd
                             * @classdesc Represents a NodeLeaveNetParams.
                             * @implements INodeLeaveNetParams
                             * @constructor
                             * @param {matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.INodeLeaveNetParams=} [properties] Properties to set
                             */
                            function NodeLeaveNetParams(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }

                            /**
                             * NodeLeaveNetParams nodeId.
                             * @member {number} nodeId
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NodeLeaveNetParams
                             * @instance
                             */
                            NodeLeaveNetParams.prototype.nodeId = 0;

                            /**
                             * Creates a new NodeLeaveNetParams instance using the specified properties.
                             * @function create
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NodeLeaveNetParams
                             * @static
                             * @param {matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.INodeLeaveNetParams=} [properties] Properties to set
                             * @returns {matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NodeLeaveNetParams} NodeLeaveNetParams instance
                             */
                            NodeLeaveNetParams.create = function create(properties) {
                                return new NodeLeaveNetParams(properties);
                            };

                            /**
                             * Encodes the specified NodeLeaveNetParams message. Does not implicitly {@link matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NodeLeaveNetParams.verify|verify} messages.
                             * @function encode
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NodeLeaveNetParams
                             * @static
                             * @param {matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.INodeLeaveNetParams} message NodeLeaveNetParams message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            NodeLeaveNetParams.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.nodeId != null && message.hasOwnProperty("nodeId"))
                                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.nodeId);
                                return writer;
                            };

                            /**
                             * Encodes the specified NodeLeaveNetParams message, length delimited. Does not implicitly {@link matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NodeLeaveNetParams.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NodeLeaveNetParams
                             * @static
                             * @param {matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.INodeLeaveNetParams} message NodeLeaveNetParams message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            NodeLeaveNetParams.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };

                            /**
                             * Decodes a NodeLeaveNetParams message from the specified reader or buffer.
                             * @function decode
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NodeLeaveNetParams
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NodeLeaveNetParams} NodeLeaveNetParams
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            NodeLeaveNetParams.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NodeLeaveNetParams();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.nodeId = reader.uint32();
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };

                            /**
                             * Decodes a NodeLeaveNetParams message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NodeLeaveNetParams
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NodeLeaveNetParams} NodeLeaveNetParams
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            NodeLeaveNetParams.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };

                            /**
                             * Verifies a NodeLeaveNetParams message.
                             * @function verify
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NodeLeaveNetParams
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            NodeLeaveNetParams.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.nodeId != null && message.hasOwnProperty("nodeId"))
                                    if (!$util.isInteger(message.nodeId))
                                        return "nodeId: integer expected";
                                return null;
                            };

                            /**
                             * Creates a NodeLeaveNetParams message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NodeLeaveNetParams
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NodeLeaveNetParams} NodeLeaveNetParams
                             */
                            NodeLeaveNetParams.fromObject = function fromObject(object) {
                                if (object instanceof $root.matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NodeLeaveNetParams)
                                    return object;
                                var message = new $root.matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NodeLeaveNetParams();
                                if (object.nodeId != null)
                                    message.nodeId = object.nodeId >>> 0;
                                return message;
                            };

                            /**
                             * Creates a plain object from a NodeLeaveNetParams message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NodeLeaveNetParams
                             * @static
                             * @param {matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NodeLeaveNetParams} message NodeLeaveNetParams
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            NodeLeaveNetParams.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults)
                                    object.nodeId = 0;
                                if (message.nodeId != null && message.hasOwnProperty("nodeId"))
                                    object.nodeId = message.nodeId;
                                return object;
                            };

                            /**
                             * Converts this NodeLeaveNetParams to JSON.
                             * @function toJSON
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NodeLeaveNetParams
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            NodeLeaveNetParams.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };

                            return NodeLeaveNetParams;
                        })();

                        NetworkMgmtCmd.ClusterDescription = (function() {

                            /**
                             * Properties of a ClusterDescription.
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd
                             * @interface IClusterDescription
                             * @property {matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.ClusterDescription.ClusterInOutType|null} [type] ClusterDescription type
                             * @property {number|null} [clusterId] ClusterDescription clusterId
                             */

                            /**
                             * Constructs a new ClusterDescription.
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd
                             * @classdesc Represents a ClusterDescription.
                             * @implements IClusterDescription
                             * @constructor
                             * @param {matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.IClusterDescription=} [properties] Properties to set
                             */
                            function ClusterDescription(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }

                            /**
                             * ClusterDescription type.
                             * @member {matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.ClusterDescription.ClusterInOutType} type
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.ClusterDescription
                             * @instance
                             */
                            ClusterDescription.prototype.type = 0;

                            /**
                             * ClusterDescription clusterId.
                             * @member {number} clusterId
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.ClusterDescription
                             * @instance
                             */
                            ClusterDescription.prototype.clusterId = 0;

                            /**
                             * Creates a new ClusterDescription instance using the specified properties.
                             * @function create
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.ClusterDescription
                             * @static
                             * @param {matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.IClusterDescription=} [properties] Properties to set
                             * @returns {matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.ClusterDescription} ClusterDescription instance
                             */
                            ClusterDescription.create = function create(properties) {
                                return new ClusterDescription(properties);
                            };

                            /**
                             * Encodes the specified ClusterDescription message. Does not implicitly {@link matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.ClusterDescription.verify|verify} messages.
                             * @function encode
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.ClusterDescription
                             * @static
                             * @param {matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.IClusterDescription} message ClusterDescription message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            ClusterDescription.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.type != null && message.hasOwnProperty("type"))
                                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
                                if (message.clusterId != null && message.hasOwnProperty("clusterId"))
                                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.clusterId);
                                return writer;
                            };

                            /**
                             * Encodes the specified ClusterDescription message, length delimited. Does not implicitly {@link matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.ClusterDescription.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.ClusterDescription
                             * @static
                             * @param {matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.IClusterDescription} message ClusterDescription message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            ClusterDescription.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };

                            /**
                             * Decodes a ClusterDescription message from the specified reader or buffer.
                             * @function decode
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.ClusterDescription
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.ClusterDescription} ClusterDescription
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            ClusterDescription.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.ClusterDescription();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.type = reader.int32();
                                        break;
                                    case 2:
                                        message.clusterId = reader.uint32();
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };

                            /**
                             * Decodes a ClusterDescription message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.ClusterDescription
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.ClusterDescription} ClusterDescription
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            ClusterDescription.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };

                            /**
                             * Verifies a ClusterDescription message.
                             * @function verify
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.ClusterDescription
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            ClusterDescription.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.type != null && message.hasOwnProperty("type"))
                                    switch (message.type) {
                                    default:
                                        return "type: enum value expected";
                                    case 0:
                                    case 1:
                                        break;
                                    }
                                if (message.clusterId != null && message.hasOwnProperty("clusterId"))
                                    if (!$util.isInteger(message.clusterId))
                                        return "clusterId: integer expected";
                                return null;
                            };

                            /**
                             * Creates a ClusterDescription message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.ClusterDescription
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.ClusterDescription} ClusterDescription
                             */
                            ClusterDescription.fromObject = function fromObject(object) {
                                if (object instanceof $root.matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.ClusterDescription)
                                    return object;
                                var message = new $root.matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.ClusterDescription();
                                switch (object.type) {
                                case "SERVER_IN":
                                case 0:
                                    message.type = 0;
                                    break;
                                case "CLIENT_OUT":
                                case 1:
                                    message.type = 1;
                                    break;
                                }
                                if (object.clusterId != null)
                                    message.clusterId = object.clusterId >>> 0;
                                return message;
                            };

                            /**
                             * Creates a plain object from a ClusterDescription message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.ClusterDescription
                             * @static
                             * @param {matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.ClusterDescription} message ClusterDescription
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            ClusterDescription.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    object.type = options.enums === String ? "SERVER_IN" : 0;
                                    object.clusterId = 0;
                                }
                                if (message.type != null && message.hasOwnProperty("type"))
                                    object.type = options.enums === String ? $root.matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.ClusterDescription.ClusterInOutType[message.type] : message.type;
                                if (message.clusterId != null && message.hasOwnProperty("clusterId"))
                                    object.clusterId = message.clusterId;
                                return object;
                            };

                            /**
                             * Converts this ClusterDescription to JSON.
                             * @function toJSON
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.ClusterDescription
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            ClusterDescription.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };

                            /**
                             * ClusterInOutType enum.
                             * @name matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.ClusterDescription.ClusterInOutType
                             * @enum {string}
                             * @property {number} SERVER_IN=0 SERVER_IN value
                             * @property {number} CLIENT_OUT=1 CLIENT_OUT value
                             */
                            ClusterDescription.ClusterInOutType = (function() {
                                var valuesById = {}, values = Object.create(valuesById);
                                values[valuesById[0] = "SERVER_IN"] = 0;
                                values[valuesById[1] = "CLIENT_OUT"] = 1;
                                return values;
                            })();

                            return ClusterDescription;
                        })();

                        NetworkMgmtCmd.EndPointDescription = (function() {

                            /**
                             * Properties of an EndPointDescription.
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd
                             * @interface IEndPointDescription
                             * @property {number|null} [endpointIndex] EndPointDescription endpointIndex
                             * @property {number|null} [profileId] EndPointDescription profileId
                             * @property {number|null} [deviceId] EndPointDescription deviceId
                             * @property {Array.<matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.IClusterDescription>|null} [clusters] EndPointDescription clusters
                             */

                            /**
                             * Constructs a new EndPointDescription.
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd
                             * @classdesc Represents an EndPointDescription.
                             * @implements IEndPointDescription
                             * @constructor
                             * @param {matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.IEndPointDescription=} [properties] Properties to set
                             */
                            function EndPointDescription(properties) {
                                this.clusters = [];
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }

                            /**
                             * EndPointDescription endpointIndex.
                             * @member {number} endpointIndex
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.EndPointDescription
                             * @instance
                             */
                            EndPointDescription.prototype.endpointIndex = 0;

                            /**
                             * EndPointDescription profileId.
                             * @member {number} profileId
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.EndPointDescription
                             * @instance
                             */
                            EndPointDescription.prototype.profileId = 0;

                            /**
                             * EndPointDescription deviceId.
                             * @member {number} deviceId
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.EndPointDescription
                             * @instance
                             */
                            EndPointDescription.prototype.deviceId = 0;

                            /**
                             * EndPointDescription clusters.
                             * @member {Array.<matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.IClusterDescription>} clusters
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.EndPointDescription
                             * @instance
                             */
                            EndPointDescription.prototype.clusters = $util.emptyArray;

                            /**
                             * Creates a new EndPointDescription instance using the specified properties.
                             * @function create
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.EndPointDescription
                             * @static
                             * @param {matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.IEndPointDescription=} [properties] Properties to set
                             * @returns {matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.EndPointDescription} EndPointDescription instance
                             */
                            EndPointDescription.create = function create(properties) {
                                return new EndPointDescription(properties);
                            };

                            /**
                             * Encodes the specified EndPointDescription message. Does not implicitly {@link matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.EndPointDescription.verify|verify} messages.
                             * @function encode
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.EndPointDescription
                             * @static
                             * @param {matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.IEndPointDescription} message EndPointDescription message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            EndPointDescription.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.endpointIndex != null && message.hasOwnProperty("endpointIndex"))
                                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.endpointIndex);
                                if (message.profileId != null && message.hasOwnProperty("profileId"))
                                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.profileId);
                                if (message.deviceId != null && message.hasOwnProperty("deviceId"))
                                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.deviceId);
                                if (message.clusters != null && message.clusters.length)
                                    for (var i = 0; i < message.clusters.length; ++i)
                                        $root.matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.ClusterDescription.encode(message.clusters[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                                return writer;
                            };

                            /**
                             * Encodes the specified EndPointDescription message, length delimited. Does not implicitly {@link matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.EndPointDescription.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.EndPointDescription
                             * @static
                             * @param {matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.IEndPointDescription} message EndPointDescription message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            EndPointDescription.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };

                            /**
                             * Decodes an EndPointDescription message from the specified reader or buffer.
                             * @function decode
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.EndPointDescription
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.EndPointDescription} EndPointDescription
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            EndPointDescription.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.EndPointDescription();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.endpointIndex = reader.uint32();
                                        break;
                                    case 2:
                                        message.profileId = reader.uint32();
                                        break;
                                    case 3:
                                        message.deviceId = reader.uint32();
                                        break;
                                    case 4:
                                        if (!(message.clusters && message.clusters.length))
                                            message.clusters = [];
                                        message.clusters.push($root.matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.ClusterDescription.decode(reader, reader.uint32()));
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };

                            /**
                             * Decodes an EndPointDescription message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.EndPointDescription
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.EndPointDescription} EndPointDescription
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            EndPointDescription.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };

                            /**
                             * Verifies an EndPointDescription message.
                             * @function verify
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.EndPointDescription
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            EndPointDescription.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.endpointIndex != null && message.hasOwnProperty("endpointIndex"))
                                    if (!$util.isInteger(message.endpointIndex))
                                        return "endpointIndex: integer expected";
                                if (message.profileId != null && message.hasOwnProperty("profileId"))
                                    if (!$util.isInteger(message.profileId))
                                        return "profileId: integer expected";
                                if (message.deviceId != null && message.hasOwnProperty("deviceId"))
                                    if (!$util.isInteger(message.deviceId))
                                        return "deviceId: integer expected";
                                if (message.clusters != null && message.hasOwnProperty("clusters")) {
                                    if (!Array.isArray(message.clusters))
                                        return "clusters: array expected";
                                    for (var i = 0; i < message.clusters.length; ++i) {
                                        var error = $root.matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.ClusterDescription.verify(message.clusters[i]);
                                        if (error)
                                            return "clusters." + error;
                                    }
                                }
                                return null;
                            };

                            /**
                             * Creates an EndPointDescription message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.EndPointDescription
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.EndPointDescription} EndPointDescription
                             */
                            EndPointDescription.fromObject = function fromObject(object) {
                                if (object instanceof $root.matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.EndPointDescription)
                                    return object;
                                var message = new $root.matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.EndPointDescription();
                                if (object.endpointIndex != null)
                                    message.endpointIndex = object.endpointIndex >>> 0;
                                if (object.profileId != null)
                                    message.profileId = object.profileId >>> 0;
                                if (object.deviceId != null)
                                    message.deviceId = object.deviceId >>> 0;
                                if (object.clusters) {
                                    if (!Array.isArray(object.clusters))
                                        throw TypeError(".matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.EndPointDescription.clusters: array expected");
                                    message.clusters = [];
                                    for (var i = 0; i < object.clusters.length; ++i) {
                                        if (typeof object.clusters[i] !== "object")
                                            throw TypeError(".matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.EndPointDescription.clusters: object expected");
                                        message.clusters[i] = $root.matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.ClusterDescription.fromObject(object.clusters[i]);
                                    }
                                }
                                return message;
                            };

                            /**
                             * Creates a plain object from an EndPointDescription message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.EndPointDescription
                             * @static
                             * @param {matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.EndPointDescription} message EndPointDescription
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            EndPointDescription.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.arrays || options.defaults)
                                    object.clusters = [];
                                if (options.defaults) {
                                    object.endpointIndex = 0;
                                    object.profileId = 0;
                                    object.deviceId = 0;
                                }
                                if (message.endpointIndex != null && message.hasOwnProperty("endpointIndex"))
                                    object.endpointIndex = message.endpointIndex;
                                if (message.profileId != null && message.hasOwnProperty("profileId"))
                                    object.profileId = message.profileId;
                                if (message.deviceId != null && message.hasOwnProperty("deviceId"))
                                    object.deviceId = message.deviceId;
                                if (message.clusters && message.clusters.length) {
                                    object.clusters = [];
                                    for (var j = 0; j < message.clusters.length; ++j)
                                        object.clusters[j] = $root.matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.ClusterDescription.toObject(message.clusters[j], options);
                                }
                                return object;
                            };

                            /**
                             * Converts this EndPointDescription to JSON.
                             * @function toJSON
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.EndPointDescription
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            EndPointDescription.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };

                            return EndPointDescription;
                        })();

                        NetworkMgmtCmd.NodeDescription = (function() {

                            /**
                             * Properties of a NodeDescription.
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd
                             * @interface INodeDescription
                             * @property {number|null} [nodeId] NodeDescription nodeId
                             * @property {number|Long|null} [eui64] NodeDescription eui64
                             * @property {Array.<matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.IEndPointDescription>|null} [endpoints] NodeDescription endpoints
                             */

                            /**
                             * Constructs a new NodeDescription.
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd
                             * @classdesc Represents a NodeDescription.
                             * @implements INodeDescription
                             * @constructor
                             * @param {matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.INodeDescription=} [properties] Properties to set
                             */
                            function NodeDescription(properties) {
                                this.endpoints = [];
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }

                            /**
                             * NodeDescription nodeId.
                             * @member {number} nodeId
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NodeDescription
                             * @instance
                             */
                            NodeDescription.prototype.nodeId = 0;

                            /**
                             * NodeDescription eui64.
                             * @member {number|Long} eui64
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NodeDescription
                             * @instance
                             */
                            NodeDescription.prototype.eui64 = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                            /**
                             * NodeDescription endpoints.
                             * @member {Array.<matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.IEndPointDescription>} endpoints
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NodeDescription
                             * @instance
                             */
                            NodeDescription.prototype.endpoints = $util.emptyArray;

                            /**
                             * Creates a new NodeDescription instance using the specified properties.
                             * @function create
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NodeDescription
                             * @static
                             * @param {matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.INodeDescription=} [properties] Properties to set
                             * @returns {matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NodeDescription} NodeDescription instance
                             */
                            NodeDescription.create = function create(properties) {
                                return new NodeDescription(properties);
                            };

                            /**
                             * Encodes the specified NodeDescription message. Does not implicitly {@link matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NodeDescription.verify|verify} messages.
                             * @function encode
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NodeDescription
                             * @static
                             * @param {matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.INodeDescription} message NodeDescription message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            NodeDescription.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.nodeId != null && message.hasOwnProperty("nodeId"))
                                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.nodeId);
                                if (message.eui64 != null && message.hasOwnProperty("eui64"))
                                    writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.eui64);
                                if (message.endpoints != null && message.endpoints.length)
                                    for (var i = 0; i < message.endpoints.length; ++i)
                                        $root.matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.EndPointDescription.encode(message.endpoints[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                                return writer;
                            };

                            /**
                             * Encodes the specified NodeDescription message, length delimited. Does not implicitly {@link matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NodeDescription.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NodeDescription
                             * @static
                             * @param {matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.INodeDescription} message NodeDescription message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            NodeDescription.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };

                            /**
                             * Decodes a NodeDescription message from the specified reader or buffer.
                             * @function decode
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NodeDescription
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NodeDescription} NodeDescription
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            NodeDescription.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NodeDescription();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.nodeId = reader.uint32();
                                        break;
                                    case 2:
                                        message.eui64 = reader.uint64();
                                        break;
                                    case 3:
                                        if (!(message.endpoints && message.endpoints.length))
                                            message.endpoints = [];
                                        message.endpoints.push($root.matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.EndPointDescription.decode(reader, reader.uint32()));
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };

                            /**
                             * Decodes a NodeDescription message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NodeDescription
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NodeDescription} NodeDescription
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            NodeDescription.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };

                            /**
                             * Verifies a NodeDescription message.
                             * @function verify
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NodeDescription
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            NodeDescription.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.nodeId != null && message.hasOwnProperty("nodeId"))
                                    if (!$util.isInteger(message.nodeId))
                                        return "nodeId: integer expected";
                                if (message.eui64 != null && message.hasOwnProperty("eui64"))
                                    if (!$util.isInteger(message.eui64) && !(message.eui64 && $util.isInteger(message.eui64.low) && $util.isInteger(message.eui64.high)))
                                        return "eui64: integer|Long expected";
                                if (message.endpoints != null && message.hasOwnProperty("endpoints")) {
                                    if (!Array.isArray(message.endpoints))
                                        return "endpoints: array expected";
                                    for (var i = 0; i < message.endpoints.length; ++i) {
                                        var error = $root.matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.EndPointDescription.verify(message.endpoints[i]);
                                        if (error)
                                            return "endpoints." + error;
                                    }
                                }
                                return null;
                            };

                            /**
                             * Creates a NodeDescription message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NodeDescription
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NodeDescription} NodeDescription
                             */
                            NodeDescription.fromObject = function fromObject(object) {
                                if (object instanceof $root.matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NodeDescription)
                                    return object;
                                var message = new $root.matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NodeDescription();
                                if (object.nodeId != null)
                                    message.nodeId = object.nodeId >>> 0;
                                if (object.eui64 != null)
                                    if ($util.Long)
                                        (message.eui64 = $util.Long.fromValue(object.eui64)).unsigned = true;
                                    else if (typeof object.eui64 === "string")
                                        message.eui64 = parseInt(object.eui64, 10);
                                    else if (typeof object.eui64 === "number")
                                        message.eui64 = object.eui64;
                                    else if (typeof object.eui64 === "object")
                                        message.eui64 = new $util.LongBits(object.eui64.low >>> 0, object.eui64.high >>> 0).toNumber(true);
                                if (object.endpoints) {
                                    if (!Array.isArray(object.endpoints))
                                        throw TypeError(".matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NodeDescription.endpoints: array expected");
                                    message.endpoints = [];
                                    for (var i = 0; i < object.endpoints.length; ++i) {
                                        if (typeof object.endpoints[i] !== "object")
                                            throw TypeError(".matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NodeDescription.endpoints: object expected");
                                        message.endpoints[i] = $root.matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.EndPointDescription.fromObject(object.endpoints[i]);
                                    }
                                }
                                return message;
                            };

                            /**
                             * Creates a plain object from a NodeDescription message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NodeDescription
                             * @static
                             * @param {matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NodeDescription} message NodeDescription
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            NodeDescription.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.arrays || options.defaults)
                                    object.endpoints = [];
                                if (options.defaults) {
                                    object.nodeId = 0;
                                    if ($util.Long) {
                                        var long = new $util.Long(0, 0, true);
                                        object.eui64 = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                    } else
                                        object.eui64 = options.longs === String ? "0" : 0;
                                }
                                if (message.nodeId != null && message.hasOwnProperty("nodeId"))
                                    object.nodeId = message.nodeId;
                                if (message.eui64 != null && message.hasOwnProperty("eui64"))
                                    if (typeof message.eui64 === "number")
                                        object.eui64 = options.longs === String ? String(message.eui64) : message.eui64;
                                    else
                                        object.eui64 = options.longs === String ? $util.Long.prototype.toString.call(message.eui64) : options.longs === Number ? new $util.LongBits(message.eui64.low >>> 0, message.eui64.high >>> 0).toNumber(true) : message.eui64;
                                if (message.endpoints && message.endpoints.length) {
                                    object.endpoints = [];
                                    for (var j = 0; j < message.endpoints.length; ++j)
                                        object.endpoints[j] = $root.matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.EndPointDescription.toObject(message.endpoints[j], options);
                                }
                                return object;
                            };

                            /**
                             * Converts this NodeDescription to JSON.
                             * @function toJSON
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NodeDescription
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            NodeDescription.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };

                            return NodeDescription;
                        })();

                        NetworkMgmtCmd.NetworkStatus = (function() {

                            /**
                             * Properties of a NetworkStatus.
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd
                             * @interface INetworkStatus
                             * @property {matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NetworkStatus.Status|null} [type] NetworkStatus type
                             */

                            /**
                             * Constructs a new NetworkStatus.
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd
                             * @classdesc Represents a NetworkStatus.
                             * @implements INetworkStatus
                             * @constructor
                             * @param {matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.INetworkStatus=} [properties] Properties to set
                             */
                            function NetworkStatus(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }

                            /**
                             * NetworkStatus type.
                             * @member {matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NetworkStatus.Status} type
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NetworkStatus
                             * @instance
                             */
                            NetworkStatus.prototype.type = 0;

                            /**
                             * Creates a new NetworkStatus instance using the specified properties.
                             * @function create
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NetworkStatus
                             * @static
                             * @param {matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.INetworkStatus=} [properties] Properties to set
                             * @returns {matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NetworkStatus} NetworkStatus instance
                             */
                            NetworkStatus.create = function create(properties) {
                                return new NetworkStatus(properties);
                            };

                            /**
                             * Encodes the specified NetworkStatus message. Does not implicitly {@link matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NetworkStatus.verify|verify} messages.
                             * @function encode
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NetworkStatus
                             * @static
                             * @param {matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.INetworkStatus} message NetworkStatus message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            NetworkStatus.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.type != null && message.hasOwnProperty("type"))
                                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
                                return writer;
                            };

                            /**
                             * Encodes the specified NetworkStatus message, length delimited. Does not implicitly {@link matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NetworkStatus.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NetworkStatus
                             * @static
                             * @param {matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.INetworkStatus} message NetworkStatus message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            NetworkStatus.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };

                            /**
                             * Decodes a NetworkStatus message from the specified reader or buffer.
                             * @function decode
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NetworkStatus
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NetworkStatus} NetworkStatus
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            NetworkStatus.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NetworkStatus();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.type = reader.int32();
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };

                            /**
                             * Decodes a NetworkStatus message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NetworkStatus
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NetworkStatus} NetworkStatus
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            NetworkStatus.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };

                            /**
                             * Verifies a NetworkStatus message.
                             * @function verify
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NetworkStatus
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            NetworkStatus.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.type != null && message.hasOwnProperty("type"))
                                    switch (message.type) {
                                    default:
                                        return "type: enum value expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                    case 3:
                                    case 4:
                                        break;
                                    }
                                return null;
                            };

                            /**
                             * Creates a NetworkStatus message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NetworkStatus
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NetworkStatus} NetworkStatus
                             */
                            NetworkStatus.fromObject = function fromObject(object) {
                                if (object instanceof $root.matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NetworkStatus)
                                    return object;
                                var message = new $root.matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NetworkStatus();
                                switch (object.type) {
                                case "NO_NETWORK":
                                case 0:
                                    message.type = 0;
                                    break;
                                case "JOINING_NETWORK":
                                case 1:
                                    message.type = 1;
                                    break;
                                case "JOINED_NETWORK":
                                case 2:
                                    message.type = 2;
                                    break;
                                case "JOINED_NETWORK_NO_PARENT":
                                case 3:
                                    message.type = 3;
                                    break;
                                case "LEAVING_NETWORK":
                                case 4:
                                    message.type = 4;
                                    break;
                                }
                                return message;
                            };

                            /**
                             * Creates a plain object from a NetworkStatus message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NetworkStatus
                             * @static
                             * @param {matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NetworkStatus} message NetworkStatus
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            NetworkStatus.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults)
                                    object.type = options.enums === String ? "NO_NETWORK" : 0;
                                if (message.type != null && message.hasOwnProperty("type"))
                                    object.type = options.enums === String ? $root.matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NetworkStatus.Status[message.type] : message.type;
                                return object;
                            };

                            /**
                             * Converts this NetworkStatus to JSON.
                             * @function toJSON
                             * @memberof matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NetworkStatus
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            NetworkStatus.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };

                            /**
                             * Status enum.
                             * @name matrix_io.malos.v1.comm.ZigBeeMsg.NetworkMgmtCmd.NetworkStatus.Status
                             * @enum {string}
                             * @property {number} NO_NETWORK=0 The node is not associated with a network in any way.
                             * @property {number} JOINING_NETWORK=1 The node is currently attempting to join a network.
                             * @property {number} JOINED_NETWORK=2 JOINED_NETWORK value
                             * @property {number} JOINED_NETWORK_NO_PARENT=3 The node is an end device joined to a network but its parent
                             * is not responding.
                             * @property {number} LEAVING_NETWORK=4 The node is in the process of leaving its current network.
                             */
                            NetworkStatus.Status = (function() {
                                var valuesById = {}, values = Object.create(valuesById);
                                values[valuesById[0] = "NO_NETWORK"] = 0;
                                values[valuesById[1] = "JOINING_NETWORK"] = 1;
                                values[valuesById[2] = "JOINED_NETWORK"] = 2;
                                values[valuesById[3] = "JOINED_NETWORK_NO_PARENT"] = 3;
                                values[valuesById[4] = "LEAVING_NETWORK"] = 4;
                                return values;
                            })();

                            return NetworkStatus;
                        })();

                        return NetworkMgmtCmd;
                    })();

                    return ZigBeeMsg;
                })();

                comm.ZWaveMsg = (function() {

                    /**
                     * Properties of a ZWaveMsg.
                     * @memberof matrix_io.malos.v1.comm
                     * @interface IZWaveMsg
                     * @property {matrix_io.malos.v1.comm.ZWaveMsg.ZWaveOperations|null} [operation] ZWaveMsg operation
                     * @property {string|null} [serviceToSend] ZWaveMsg serviceToSend
                     * @property {matrix_io.malos.v1.comm.ZWaveMsg.IZWaveCommand|null} [zwaveCmd] ZWaveMsg zwaveCmd
                     * @property {Array.<matrix_io.malos.v1.comm.ZWaveMsg.IZWaveNode>|null} [node] ZWaveMsg node
                     * @property {boolean|null} [result] ZWaveMsg result
                     */

                    /**
                     * Constructs a new ZWaveMsg.
                     * @memberof matrix_io.malos.v1.comm
                     * @classdesc Represents a ZWaveMsg.
                     * @implements IZWaveMsg
                     * @constructor
                     * @param {matrix_io.malos.v1.comm.IZWaveMsg=} [properties] Properties to set
                     */
                    function ZWaveMsg(properties) {
                        this.node = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * ZWaveMsg operation.
                     * @member {matrix_io.malos.v1.comm.ZWaveMsg.ZWaveOperations} operation
                     * @memberof matrix_io.malos.v1.comm.ZWaveMsg
                     * @instance
                     */
                    ZWaveMsg.prototype.operation = 0;

                    /**
                     * ZWaveMsg serviceToSend.
                     * @member {string} serviceToSend
                     * @memberof matrix_io.malos.v1.comm.ZWaveMsg
                     * @instance
                     */
                    ZWaveMsg.prototype.serviceToSend = "";

                    /**
                     * ZWaveMsg zwaveCmd.
                     * @member {matrix_io.malos.v1.comm.ZWaveMsg.IZWaveCommand|null|undefined} zwaveCmd
                     * @memberof matrix_io.malos.v1.comm.ZWaveMsg
                     * @instance
                     */
                    ZWaveMsg.prototype.zwaveCmd = null;

                    /**
                     * ZWaveMsg node.
                     * @member {Array.<matrix_io.malos.v1.comm.ZWaveMsg.IZWaveNode>} node
                     * @memberof matrix_io.malos.v1.comm.ZWaveMsg
                     * @instance
                     */
                    ZWaveMsg.prototype.node = $util.emptyArray;

                    /**
                     * ZWaveMsg result.
                     * @member {boolean} result
                     * @memberof matrix_io.malos.v1.comm.ZWaveMsg
                     * @instance
                     */
                    ZWaveMsg.prototype.result = false;

                    /**
                     * Creates a new ZWaveMsg instance using the specified properties.
                     * @function create
                     * @memberof matrix_io.malos.v1.comm.ZWaveMsg
                     * @static
                     * @param {matrix_io.malos.v1.comm.IZWaveMsg=} [properties] Properties to set
                     * @returns {matrix_io.malos.v1.comm.ZWaveMsg} ZWaveMsg instance
                     */
                    ZWaveMsg.create = function create(properties) {
                        return new ZWaveMsg(properties);
                    };

                    /**
                     * Encodes the specified ZWaveMsg message. Does not implicitly {@link matrix_io.malos.v1.comm.ZWaveMsg.verify|verify} messages.
                     * @function encode
                     * @memberof matrix_io.malos.v1.comm.ZWaveMsg
                     * @static
                     * @param {matrix_io.malos.v1.comm.IZWaveMsg} message ZWaveMsg message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ZWaveMsg.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.operation != null && message.hasOwnProperty("operation"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.operation);
                        if (message.serviceToSend != null && message.hasOwnProperty("serviceToSend"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.serviceToSend);
                        if (message.zwaveCmd != null && message.hasOwnProperty("zwaveCmd"))
                            $root.matrix_io.malos.v1.comm.ZWaveMsg.ZWaveCommand.encode(message.zwaveCmd, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.node != null && message.node.length)
                            for (var i = 0; i < message.node.length; ++i)
                                $root.matrix_io.malos.v1.comm.ZWaveMsg.ZWaveNode.encode(message.node[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        if (message.result != null && message.hasOwnProperty("result"))
                            writer.uint32(/* id 5, wireType 0 =*/40).bool(message.result);
                        return writer;
                    };

                    /**
                     * Encodes the specified ZWaveMsg message, length delimited. Does not implicitly {@link matrix_io.malos.v1.comm.ZWaveMsg.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof matrix_io.malos.v1.comm.ZWaveMsg
                     * @static
                     * @param {matrix_io.malos.v1.comm.IZWaveMsg} message ZWaveMsg message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ZWaveMsg.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a ZWaveMsg message from the specified reader or buffer.
                     * @function decode
                     * @memberof matrix_io.malos.v1.comm.ZWaveMsg
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {matrix_io.malos.v1.comm.ZWaveMsg} ZWaveMsg
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ZWaveMsg.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.malos.v1.comm.ZWaveMsg();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.operation = reader.int32();
                                break;
                            case 2:
                                message.serviceToSend = reader.string();
                                break;
                            case 3:
                                message.zwaveCmd = $root.matrix_io.malos.v1.comm.ZWaveMsg.ZWaveCommand.decode(reader, reader.uint32());
                                break;
                            case 4:
                                if (!(message.node && message.node.length))
                                    message.node = [];
                                message.node.push($root.matrix_io.malos.v1.comm.ZWaveMsg.ZWaveNode.decode(reader, reader.uint32()));
                                break;
                            case 5:
                                message.result = reader.bool();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a ZWaveMsg message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof matrix_io.malos.v1.comm.ZWaveMsg
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {matrix_io.malos.v1.comm.ZWaveMsg} ZWaveMsg
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ZWaveMsg.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a ZWaveMsg message.
                     * @function verify
                     * @memberof matrix_io.malos.v1.comm.ZWaveMsg
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ZWaveMsg.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.operation != null && message.hasOwnProperty("operation"))
                            switch (message.operation) {
                            default:
                                return "operation: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                            case 4:
                            case 5:
                                break;
                            }
                        if (message.serviceToSend != null && message.hasOwnProperty("serviceToSend"))
                            if (!$util.isString(message.serviceToSend))
                                return "serviceToSend: string expected";
                        if (message.zwaveCmd != null && message.hasOwnProperty("zwaveCmd")) {
                            var error = $root.matrix_io.malos.v1.comm.ZWaveMsg.ZWaveCommand.verify(message.zwaveCmd);
                            if (error)
                                return "zwaveCmd." + error;
                        }
                        if (message.node != null && message.hasOwnProperty("node")) {
                            if (!Array.isArray(message.node))
                                return "node: array expected";
                            for (var i = 0; i < message.node.length; ++i) {
                                var error = $root.matrix_io.malos.v1.comm.ZWaveMsg.ZWaveNode.verify(message.node[i]);
                                if (error)
                                    return "node." + error;
                            }
                        }
                        if (message.result != null && message.hasOwnProperty("result"))
                            if (typeof message.result !== "boolean")
                                return "result: boolean expected";
                        return null;
                    };

                    /**
                     * Creates a ZWaveMsg message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof matrix_io.malos.v1.comm.ZWaveMsg
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {matrix_io.malos.v1.comm.ZWaveMsg} ZWaveMsg
                     */
                    ZWaveMsg.fromObject = function fromObject(object) {
                        if (object instanceof $root.matrix_io.malos.v1.comm.ZWaveMsg)
                            return object;
                        var message = new $root.matrix_io.malos.v1.comm.ZWaveMsg();
                        switch (object.operation) {
                        case "UNDEF":
                        case 0:
                            message.operation = 0;
                            break;
                        case "SEND":
                        case 1:
                            message.operation = 1;
                            break;
                        case "ADDNODE":
                        case 2:
                            message.operation = 2;
                            break;
                        case "REMOVENODE":
                        case 3:
                            message.operation = 3;
                            break;
                        case "SETDEFAULT":
                        case 4:
                            message.operation = 4;
                            break;
                        case "LIST":
                        case 5:
                            message.operation = 5;
                            break;
                        }
                        if (object.serviceToSend != null)
                            message.serviceToSend = String(object.serviceToSend);
                        if (object.zwaveCmd != null) {
                            if (typeof object.zwaveCmd !== "object")
                                throw TypeError(".matrix_io.malos.v1.comm.ZWaveMsg.zwaveCmd: object expected");
                            message.zwaveCmd = $root.matrix_io.malos.v1.comm.ZWaveMsg.ZWaveCommand.fromObject(object.zwaveCmd);
                        }
                        if (object.node) {
                            if (!Array.isArray(object.node))
                                throw TypeError(".matrix_io.malos.v1.comm.ZWaveMsg.node: array expected");
                            message.node = [];
                            for (var i = 0; i < object.node.length; ++i) {
                                if (typeof object.node[i] !== "object")
                                    throw TypeError(".matrix_io.malos.v1.comm.ZWaveMsg.node: object expected");
                                message.node[i] = $root.matrix_io.malos.v1.comm.ZWaveMsg.ZWaveNode.fromObject(object.node[i]);
                            }
                        }
                        if (object.result != null)
                            message.result = Boolean(object.result);
                        return message;
                    };

                    /**
                     * Creates a plain object from a ZWaveMsg message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof matrix_io.malos.v1.comm.ZWaveMsg
                     * @static
                     * @param {matrix_io.malos.v1.comm.ZWaveMsg} message ZWaveMsg
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ZWaveMsg.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.node = [];
                        if (options.defaults) {
                            object.operation = options.enums === String ? "UNDEF" : 0;
                            object.serviceToSend = "";
                            object.zwaveCmd = null;
                            object.result = false;
                        }
                        if (message.operation != null && message.hasOwnProperty("operation"))
                            object.operation = options.enums === String ? $root.matrix_io.malos.v1.comm.ZWaveMsg.ZWaveOperations[message.operation] : message.operation;
                        if (message.serviceToSend != null && message.hasOwnProperty("serviceToSend"))
                            object.serviceToSend = message.serviceToSend;
                        if (message.zwaveCmd != null && message.hasOwnProperty("zwaveCmd"))
                            object.zwaveCmd = $root.matrix_io.malos.v1.comm.ZWaveMsg.ZWaveCommand.toObject(message.zwaveCmd, options);
                        if (message.node && message.node.length) {
                            object.node = [];
                            for (var j = 0; j < message.node.length; ++j)
                                object.node[j] = $root.matrix_io.malos.v1.comm.ZWaveMsg.ZWaveNode.toObject(message.node[j], options);
                        }
                        if (message.result != null && message.hasOwnProperty("result"))
                            object.result = message.result;
                        return object;
                    };

                    /**
                     * Converts this ZWaveMsg to JSON.
                     * @function toJSON
                     * @memberof matrix_io.malos.v1.comm.ZWaveMsg
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ZWaveMsg.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    /**
                     * ZWaveOperations enum.
                     * @name matrix_io.malos.v1.comm.ZWaveMsg.ZWaveOperations
                     * @enum {string}
                     * @property {number} UNDEF=0 UNDEF value
                     * @property {number} SEND=1 SEND value
                     * @property {number} ADDNODE=2 ADDNODE value
                     * @property {number} REMOVENODE=3 REMOVENODE value
                     * @property {number} SETDEFAULT=4 SETDEFAULT value
                     * @property {number} LIST=5 LIST value
                     */
                    ZWaveMsg.ZWaveOperations = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "UNDEF"] = 0;
                        values[valuesById[1] = "SEND"] = 1;
                        values[valuesById[2] = "ADDNODE"] = 2;
                        values[valuesById[3] = "REMOVENODE"] = 3;
                        values[valuesById[4] = "SETDEFAULT"] = 4;
                        values[valuesById[5] = "LIST"] = 5;
                        return values;
                    })();

                    ZWaveMsg.ZWaveCommandInfo = (function() {

                        /**
                         * Properties of a ZWaveCommandInfo.
                         * @memberof matrix_io.malos.v1.comm.ZWaveMsg
                         * @interface IZWaveCommandInfo
                         * @property {matrix_io.malos.v1.comm.ZWaveCmdType|null} [cmd] ZWaveCommandInfo cmd
                         * @property {Array.<string>|null} [param] ZWaveCommandInfo param
                         */

                        /**
                         * Constructs a new ZWaveCommandInfo.
                         * @memberof matrix_io.malos.v1.comm.ZWaveMsg
                         * @classdesc Represents a ZWaveCommandInfo.
                         * @implements IZWaveCommandInfo
                         * @constructor
                         * @param {matrix_io.malos.v1.comm.ZWaveMsg.IZWaveCommandInfo=} [properties] Properties to set
                         */
                        function ZWaveCommandInfo(properties) {
                            this.param = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * ZWaveCommandInfo cmd.
                         * @member {matrix_io.malos.v1.comm.ZWaveCmdType} cmd
                         * @memberof matrix_io.malos.v1.comm.ZWaveMsg.ZWaveCommandInfo
                         * @instance
                         */
                        ZWaveCommandInfo.prototype.cmd = 0;

                        /**
                         * ZWaveCommandInfo param.
                         * @member {Array.<string>} param
                         * @memberof matrix_io.malos.v1.comm.ZWaveMsg.ZWaveCommandInfo
                         * @instance
                         */
                        ZWaveCommandInfo.prototype.param = $util.emptyArray;

                        /**
                         * Creates a new ZWaveCommandInfo instance using the specified properties.
                         * @function create
                         * @memberof matrix_io.malos.v1.comm.ZWaveMsg.ZWaveCommandInfo
                         * @static
                         * @param {matrix_io.malos.v1.comm.ZWaveMsg.IZWaveCommandInfo=} [properties] Properties to set
                         * @returns {matrix_io.malos.v1.comm.ZWaveMsg.ZWaveCommandInfo} ZWaveCommandInfo instance
                         */
                        ZWaveCommandInfo.create = function create(properties) {
                            return new ZWaveCommandInfo(properties);
                        };

                        /**
                         * Encodes the specified ZWaveCommandInfo message. Does not implicitly {@link matrix_io.malos.v1.comm.ZWaveMsg.ZWaveCommandInfo.verify|verify} messages.
                         * @function encode
                         * @memberof matrix_io.malos.v1.comm.ZWaveMsg.ZWaveCommandInfo
                         * @static
                         * @param {matrix_io.malos.v1.comm.ZWaveMsg.IZWaveCommandInfo} message ZWaveCommandInfo message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ZWaveCommandInfo.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.cmd != null && message.hasOwnProperty("cmd"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.cmd);
                            if (message.param != null && message.param.length)
                                for (var i = 0; i < message.param.length; ++i)
                                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.param[i]);
                            return writer;
                        };

                        /**
                         * Encodes the specified ZWaveCommandInfo message, length delimited. Does not implicitly {@link matrix_io.malos.v1.comm.ZWaveMsg.ZWaveCommandInfo.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof matrix_io.malos.v1.comm.ZWaveMsg.ZWaveCommandInfo
                         * @static
                         * @param {matrix_io.malos.v1.comm.ZWaveMsg.IZWaveCommandInfo} message ZWaveCommandInfo message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ZWaveCommandInfo.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a ZWaveCommandInfo message from the specified reader or buffer.
                         * @function decode
                         * @memberof matrix_io.malos.v1.comm.ZWaveMsg.ZWaveCommandInfo
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {matrix_io.malos.v1.comm.ZWaveMsg.ZWaveCommandInfo} ZWaveCommandInfo
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ZWaveCommandInfo.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.malos.v1.comm.ZWaveMsg.ZWaveCommandInfo();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.cmd = reader.int32();
                                    break;
                                case 2:
                                    if (!(message.param && message.param.length))
                                        message.param = [];
                                    message.param.push(reader.string());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a ZWaveCommandInfo message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof matrix_io.malos.v1.comm.ZWaveMsg.ZWaveCommandInfo
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {matrix_io.malos.v1.comm.ZWaveMsg.ZWaveCommandInfo} ZWaveCommandInfo
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ZWaveCommandInfo.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a ZWaveCommandInfo message.
                         * @function verify
                         * @memberof matrix_io.malos.v1.comm.ZWaveMsg.ZWaveCommandInfo
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ZWaveCommandInfo.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.cmd != null && message.hasOwnProperty("cmd"))
                                switch (message.cmd) {
                                default:
                                    return "cmd: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                case 4:
                                case 5:
                                case 6:
                                case 7:
                                case 8:
                                case 9:
                                case 10:
                                case 11:
                                case 12:
                                case 13:
                                case 14:
                                case 15:
                                case 16:
                                case 17:
                                case 18:
                                case 19:
                                case 20:
                                case 21:
                                case 22:
                                case 23:
                                case 24:
                                case 25:
                                case 26:
                                case 27:
                                case 28:
                                case 29:
                                case 30:
                                case 31:
                                case 32:
                                case 33:
                                case 34:
                                case 35:
                                case 36:
                                case 37:
                                case 38:
                                case 39:
                                case 40:
                                case 41:
                                case 42:
                                case 43:
                                case 44:
                                case 45:
                                case 46:
                                case 47:
                                case 48:
                                case 49:
                                case 50:
                                case 51:
                                case 52:
                                case 53:
                                case 54:
                                case 55:
                                case 56:
                                case 57:
                                case 58:
                                case 59:
                                case 60:
                                case 61:
                                case 62:
                                case 63:
                                case 64:
                                case 65:
                                case 66:
                                case 67:
                                case 68:
                                case 69:
                                case 70:
                                case 71:
                                case 72:
                                case 73:
                                case 74:
                                case 75:
                                case 76:
                                case 77:
                                case 78:
                                case 79:
                                case 80:
                                case 81:
                                case 82:
                                case 83:
                                case 84:
                                case 85:
                                case 86:
                                case 87:
                                case 88:
                                case 89:
                                case 90:
                                case 91:
                                case 92:
                                case 93:
                                case 94:
                                case 95:
                                case 96:
                                case 97:
                                case 98:
                                case 99:
                                case 100:
                                case 101:
                                case 102:
                                case 103:
                                case 104:
                                case 105:
                                case 106:
                                case 107:
                                case 108:
                                case 109:
                                case 110:
                                case 111:
                                case 112:
                                case 113:
                                case 114:
                                case 115:
                                case 116:
                                case 117:
                                case 118:
                                case 119:
                                case 120:
                                case 121:
                                case 122:
                                case 123:
                                case 124:
                                case 125:
                                case 126:
                                case 127:
                                case 128:
                                case 129:
                                case 130:
                                case 131:
                                case 132:
                                case 133:
                                case 134:
                                case 135:
                                case 136:
                                case 137:
                                case 138:
                                case 139:
                                case 140:
                                case 141:
                                case 142:
                                case 143:
                                case 144:
                                case 145:
                                case 146:
                                case 147:
                                case 148:
                                case 149:
                                case 150:
                                case 151:
                                case 152:
                                case 153:
                                case 154:
                                case 155:
                                case 156:
                                case 157:
                                case 158:
                                case 159:
                                case 160:
                                case 161:
                                case 162:
                                case 163:
                                case 164:
                                case 165:
                                case 166:
                                case 167:
                                case 168:
                                case 169:
                                case 170:
                                case 171:
                                case 172:
                                case 173:
                                case 174:
                                case 175:
                                case 176:
                                case 177:
                                case 178:
                                case 179:
                                case 180:
                                case 181:
                                case 182:
                                case 183:
                                case 184:
                                case 185:
                                case 186:
                                case 187:
                                case 188:
                                case 189:
                                case 190:
                                case 191:
                                case 192:
                                case 193:
                                case 194:
                                case 195:
                                case 196:
                                case 197:
                                case 198:
                                case 199:
                                case 200:
                                case 201:
                                case 202:
                                case 203:
                                case 204:
                                case 205:
                                case 206:
                                case 207:
                                case 208:
                                case 209:
                                case 210:
                                case 211:
                                case 212:
                                case 213:
                                case 214:
                                case 215:
                                case 216:
                                case 217:
                                case 218:
                                case 219:
                                case 220:
                                case 221:
                                case 222:
                                case 223:
                                case 224:
                                case 225:
                                case 226:
                                case 227:
                                case 228:
                                case 229:
                                case 230:
                                case 231:
                                case 232:
                                case 233:
                                case 234:
                                case 235:
                                case 236:
                                case 237:
                                case 238:
                                case 239:
                                case 240:
                                case 241:
                                case 242:
                                case 243:
                                case 244:
                                case 245:
                                case 246:
                                case 247:
                                case 248:
                                case 249:
                                case 250:
                                case 251:
                                case 252:
                                case 253:
                                case 254:
                                case 255:
                                case 256:
                                case 257:
                                case 258:
                                case 259:
                                case 260:
                                case 261:
                                case 262:
                                case 263:
                                case 264:
                                case 265:
                                case 266:
                                case 267:
                                case 268:
                                case 269:
                                case 270:
                                case 271:
                                case 272:
                                case 273:
                                case 274:
                                case 275:
                                case 276:
                                case 277:
                                case 278:
                                case 279:
                                case 280:
                                case 281:
                                case 282:
                                case 283:
                                case 284:
                                case 285:
                                case 286:
                                case 287:
                                case 288:
                                case 289:
                                case 290:
                                case 291:
                                case 292:
                                case 293:
                                case 294:
                                case 295:
                                case 296:
                                case 297:
                                case 298:
                                case 299:
                                case 300:
                                case 301:
                                case 302:
                                case 303:
                                case 304:
                                case 305:
                                case 306:
                                case 307:
                                case 308:
                                case 309:
                                case 310:
                                case 311:
                                case 312:
                                case 313:
                                case 314:
                                case 315:
                                case 316:
                                case 317:
                                case 318:
                                case 319:
                                case 320:
                                case 321:
                                case 322:
                                case 323:
                                case 324:
                                case 325:
                                case 326:
                                case 327:
                                case 328:
                                case 329:
                                case 330:
                                case 331:
                                case 332:
                                case 333:
                                case 334:
                                case 335:
                                case 336:
                                case 337:
                                case 338:
                                case 339:
                                case 340:
                                case 341:
                                case 342:
                                case 343:
                                case 344:
                                case 345:
                                case 346:
                                case 347:
                                case 348:
                                case 349:
                                case 350:
                                case 351:
                                case 352:
                                case 353:
                                case 354:
                                case 355:
                                case 356:
                                case 357:
                                case 358:
                                case 359:
                                case 360:
                                case 361:
                                case 362:
                                case 363:
                                case 364:
                                case 365:
                                case 366:
                                case 367:
                                case 368:
                                case 369:
                                case 370:
                                case 371:
                                case 372:
                                case 373:
                                case 374:
                                case 375:
                                case 376:
                                case 377:
                                case 378:
                                case 379:
                                case 380:
                                case 381:
                                case 382:
                                case 383:
                                case 384:
                                case 385:
                                case 386:
                                case 387:
                                case 388:
                                case 389:
                                case 390:
                                case 391:
                                case 392:
                                case 393:
                                case 394:
                                case 395:
                                case 396:
                                case 397:
                                case 398:
                                case 399:
                                case 400:
                                case 401:
                                case 402:
                                case 403:
                                case 404:
                                case 405:
                                case 406:
                                case 407:
                                case 408:
                                case 409:
                                case 410:
                                case 411:
                                case 412:
                                case 413:
                                case 414:
                                case 415:
                                case 416:
                                case 417:
                                case 418:
                                case 419:
                                case 420:
                                case 421:
                                case 422:
                                case 423:
                                case 424:
                                case 425:
                                case 426:
                                case 427:
                                case 428:
                                case 429:
                                case 430:
                                case 431:
                                case 432:
                                case 433:
                                case 434:
                                case 435:
                                case 436:
                                case 437:
                                case 438:
                                case 439:
                                case 440:
                                case 441:
                                case 442:
                                case 443:
                                case 444:
                                case 445:
                                case 446:
                                case 447:
                                case 448:
                                case 449:
                                case 450:
                                case 451:
                                case 452:
                                case 453:
                                case 454:
                                case 455:
                                case 456:
                                case 457:
                                case 458:
                                case 459:
                                case 460:
                                case 461:
                                case 462:
                                case 463:
                                case 464:
                                case 465:
                                case 466:
                                case 467:
                                case 468:
                                case 469:
                                case 470:
                                case 471:
                                case 472:
                                case 473:
                                case 474:
                                case 475:
                                case 476:
                                case 477:
                                case 478:
                                case 479:
                                case 480:
                                case 481:
                                case 482:
                                case 483:
                                case 484:
                                case 485:
                                case 486:
                                case 487:
                                case 488:
                                case 489:
                                case 490:
                                case 491:
                                case 492:
                                case 493:
                                case 494:
                                case 495:
                                case 496:
                                case 497:
                                case 498:
                                case 499:
                                case 500:
                                case 501:
                                case 502:
                                case 503:
                                case 504:
                                case 505:
                                case 506:
                                case 507:
                                case 508:
                                case 509:
                                case 510:
                                case 511:
                                case 512:
                                case 513:
                                case 514:
                                case 515:
                                case 516:
                                case 517:
                                case 518:
                                case 519:
                                case 520:
                                case 521:
                                case 522:
                                case 523:
                                case 524:
                                case 525:
                                case 526:
                                case 527:
                                case 528:
                                case 529:
                                case 530:
                                case 531:
                                case 532:
                                case 533:
                                case 534:
                                case 535:
                                case 536:
                                case 537:
                                case 538:
                                case 539:
                                case 540:
                                case 541:
                                case 542:
                                case 543:
                                case 544:
                                case 545:
                                case 546:
                                case 547:
                                case 548:
                                case 549:
                                case 550:
                                case 551:
                                case 552:
                                case 553:
                                case 554:
                                case 555:
                                case 556:
                                case 557:
                                case 558:
                                case 559:
                                case 560:
                                case 561:
                                case 562:
                                case 563:
                                case 564:
                                case 565:
                                case 566:
                                case 567:
                                case 568:
                                case 569:
                                case 570:
                                case 571:
                                case 572:
                                case 573:
                                case 574:
                                case 575:
                                case 576:
                                case 577:
                                case 578:
                                case 579:
                                case 580:
                                case 581:
                                case 582:
                                case 583:
                                case 584:
                                case 585:
                                case 586:
                                case 587:
                                case 588:
                                case 589:
                                case 590:
                                case 591:
                                case 592:
                                case 593:
                                case 594:
                                case 595:
                                case 596:
                                case 597:
                                case 598:
                                case 599:
                                case 600:
                                case 601:
                                case 602:
                                case 603:
                                case 604:
                                case 605:
                                case 606:
                                case 607:
                                case 608:
                                case 609:
                                case 610:
                                case 611:
                                case 612:
                                case 613:
                                case 614:
                                case 615:
                                case 616:
                                case 617:
                                case 618:
                                case 619:
                                case 620:
                                case 621:
                                case 622:
                                case 623:
                                case 624:
                                case 625:
                                case 626:
                                case 627:
                                case 628:
                                case 629:
                                case 630:
                                case 631:
                                case 632:
                                case 633:
                                case 634:
                                case 635:
                                    break;
                                }
                            if (message.param != null && message.hasOwnProperty("param")) {
                                if (!Array.isArray(message.param))
                                    return "param: array expected";
                                for (var i = 0; i < message.param.length; ++i)
                                    if (!$util.isString(message.param[i]))
                                        return "param: string[] expected";
                            }
                            return null;
                        };

                        /**
                         * Creates a ZWaveCommandInfo message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof matrix_io.malos.v1.comm.ZWaveMsg.ZWaveCommandInfo
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {matrix_io.malos.v1.comm.ZWaveMsg.ZWaveCommandInfo} ZWaveCommandInfo
                         */
                        ZWaveCommandInfo.fromObject = function fromObject(object) {
                            if (object instanceof $root.matrix_io.malos.v1.comm.ZWaveMsg.ZWaveCommandInfo)
                                return object;
                            var message = new $root.matrix_io.malos.v1.comm.ZWaveMsg.ZWaveCommandInfo();
                            switch (object.cmd) {
                            case "CMD_UNDEFINED":
                            case 0:
                                message.cmd = 0;
                                break;
                            case "ACCEPT_LOST":
                            case 1:
                                message.cmd = 1;
                                break;
                            case "ALARM_GET":
                            case 2:
                                message.cmd = 2;
                                break;
                            case "ALARM_REPORT":
                            case 3:
                                message.cmd = 3;
                                break;
                            case "ANTITHEFT_GET":
                            case 4:
                                message.cmd = 4;
                                break;
                            case "ANTITHEFT_REPORT":
                            case 5:
                                message.cmd = 5;
                                break;
                            case "ANTITHEFT_SET":
                            case 6:
                                message.cmd = 6;
                                break;
                            case "APPLICATION_BUSY":
                            case 7:
                                message.cmd = 7;
                                break;
                            case "APPLICATION_REJECTED_REQUEST":
                            case 8:
                                message.cmd = 8;
                                break;
                            case "ASSIGN_ID":
                            case 9:
                                message.cmd = 9;
                                break;
                            case "ASSIGN_RETURN_ROUTE":
                            case 10:
                                message.cmd = 10;
                                break;
                            case "ASSIGN_RETURN_ROUTE_PRIORITY":
                            case 11:
                                message.cmd = 11;
                                break;
                            case "ASSIGN_SUC_RETURN_ROUTE_PRIORITY":
                            case 12:
                                message.cmd = 12;
                                break;
                            case "ASSOCIATION_GET":
                            case 13:
                                message.cmd = 13;
                                break;
                            case "ASSOCIATION_GROUPINGS_GET":
                            case 14:
                                message.cmd = 14;
                                break;
                            case "ASSOCIATION_GROUPINGS_REPORT":
                            case 15:
                                message.cmd = 15;
                                break;
                            case "ASSOCIATION_GROUP_COMMAND_LIST_GET":
                            case 16:
                                message.cmd = 16;
                                break;
                            case "ASSOCIATION_GROUP_COMMAND_LIST_REPORT":
                            case 17:
                                message.cmd = 17;
                                break;
                            case "ASSOCIATION_GROUP_INFO_GET":
                            case 18:
                                message.cmd = 18;
                                break;
                            case "ASSOCIATION_GROUP_INFO_REPORT":
                            case 19:
                                message.cmd = 19;
                                break;
                            case "ASSOCIATION_GROUP_NAME_GET":
                            case 20:
                                message.cmd = 20;
                                break;
                            case "ASSOCIATION_GROUP_NAME_REPORT":
                            case 21:
                                message.cmd = 21;
                                break;
                            case "ASSOCIATION_REMOVE":
                            case 22:
                                message.cmd = 22;
                                break;
                            case "ASSOCIATION_REPORT":
                            case 23:
                                message.cmd = 23;
                                break;
                            case "ASSOCIATION_SET":
                            case 24:
                                message.cmd = 24;
                                break;
                            case "AV_CONTENT_BROWSE_MD_BY_LETTER_GET":
                            case 25:
                                message.cmd = 25;
                                break;
                            case "AV_CONTENT_BROWSE_MD_BY_LETTER_REPORT":
                            case 26:
                                message.cmd = 26;
                                break;
                            case "AV_CONTENT_BROWSE_MD_CHILD_COUNT_GET":
                            case 27:
                                message.cmd = 27;
                                break;
                            case "AV_CONTENT_BROWSE_MD_CHILD_COUNT_REPORT":
                            case 28:
                                message.cmd = 28;
                                break;
                            case "AV_CONTENT_BROWSE_MD_GET":
                            case 29:
                                message.cmd = 29;
                                break;
                            case "AV_CONTENT_BROWSE_MD_REPORT":
                            case 30:
                                message.cmd = 30;
                                break;
                            case "AV_CONTENT_SEARCH_MD_GET":
                            case 31:
                                message.cmd = 31;
                                break;
                            case "AV_CONTENT_SEARCH_MD_REPORT":
                            case 32:
                                message.cmd = 32;
                                break;
                            case "AV_MATCH_ITEM_TO_RENDERER_MD_GET":
                            case 33:
                                message.cmd = 33;
                                break;
                            case "AV_MATCH_ITEM_TO_RENDERER_MD_REPORT":
                            case 34:
                                message.cmd = 34;
                                break;
                            case "AV_RENDERER_STATUS_GET":
                            case 35:
                                message.cmd = 35;
                                break;
                            case "AV_RENDERER_STATUS_REPORT":
                            case 36:
                                message.cmd = 36;
                                break;
                            case "AV_TAGGING_MD_GET":
                            case 37:
                                message.cmd = 37;
                                break;
                            case "AV_TAGGING_MD_REPORT":
                            case 38:
                                message.cmd = 38;
                                break;
                            case "BARRIER_OPERATOR_GET":
                            case 39:
                                message.cmd = 39;
                                break;
                            case "BARRIER_OPERATOR_REPORT":
                            case 40:
                                message.cmd = 40;
                                break;
                            case "BARRIER_OPERATOR_SET":
                            case 41:
                                message.cmd = 41;
                                break;
                            case "BARRIER_OPERATOR_SIGNAL_GET":
                            case 42:
                                message.cmd = 42;
                                break;
                            case "BARRIER_OPERATOR_SIGNAL_REPORT":
                            case 43:
                                message.cmd = 43;
                                break;
                            case "BARRIER_OPERATOR_SIGNAL_SET":
                            case 44:
                                message.cmd = 44;
                                break;
                            case "BARRIER_OPERATOR_SIGNAL_SUPPORTED_GET":
                            case 45:
                                message.cmd = 45;
                                break;
                            case "BARRIER_OPERATOR_SIGNAL_SUPPORTED_REPORT":
                            case 46:
                                message.cmd = 46;
                                break;
                            case "BASIC_GET":
                            case 47:
                                message.cmd = 47;
                                break;
                            case "BASIC_REPORT":
                            case 48:
                                message.cmd = 48;
                                break;
                            case "BASIC_SET":
                            case 49:
                                message.cmd = 49;
                                break;
                            case "BASIC_TARIFF_INFO_GET":
                            case 50:
                                message.cmd = 50;
                                break;
                            case "BASIC_TARIFF_INFO_REPORT":
                            case 51:
                                message.cmd = 51;
                                break;
                            case "BASIC_WINDOW_COVERING_START_LEVEL_CHANGE":
                            case 52:
                                message.cmd = 52;
                                break;
                            case "BASIC_WINDOW_COVERING_STOP_LEVEL_CHANGE":
                            case 53:
                                message.cmd = 53;
                                break;
                            case "BATTERY_GET":
                            case 54:
                                message.cmd = 54;
                                break;
                            case "BATTERY_REPORT":
                            case 55:
                                message.cmd = 55;
                                break;
                            case "BIND_ACCEPT":
                            case 56:
                                message.cmd = 56;
                                break;
                            case "BIND_COMPLETE":
                            case 57:
                                message.cmd = 57;
                                break;
                            case "BIND_REQUEST":
                            case 58:
                                message.cmd = 58;
                                break;
                            case "CENTRAL_SCENE_NOTIFICATION":
                            case 59:
                                message.cmd = 59;
                                break;
                            case "CENTRAL_SCENE_SUPPORTED_GET":
                            case 60:
                                message.cmd = 60;
                                break;
                            case "CENTRAL_SCENE_SUPPORTED_REPORT":
                            case 61:
                                message.cmd = 61;
                                break;
                            case "CHIMNEY_FAN_ALARM_LOG_GET":
                            case 62:
                                message.cmd = 62;
                                break;
                            case "CHIMNEY_FAN_ALARM_LOG_REPORT":
                            case 63:
                                message.cmd = 63;
                                break;
                            case "CHIMNEY_FAN_ALARM_LOG_SET":
                            case 64:
                                message.cmd = 64;
                                break;
                            case "CHIMNEY_FAN_ALARM_STATUS_GET":
                            case 65:
                                message.cmd = 65;
                                break;
                            case "CHIMNEY_FAN_ALARM_STATUS_REPORT":
                            case 66:
                                message.cmd = 66;
                                break;
                            case "CHIMNEY_FAN_ALARM_STATUS_SET":
                            case 67:
                                message.cmd = 67;
                                break;
                            case "CHIMNEY_FAN_ALARM_TEMP_GET":
                            case 68:
                                message.cmd = 68;
                                break;
                            case "CHIMNEY_FAN_ALARM_TEMP_REPORT":
                            case 69:
                                message.cmd = 69;
                                break;
                            case "CHIMNEY_FAN_ALARM_TEMP_SET":
                            case 70:
                                message.cmd = 70;
                                break;
                            case "CHIMNEY_FAN_BOOST_TIME_GET":
                            case 71:
                                message.cmd = 71;
                                break;
                            case "CHIMNEY_FAN_BOOST_TIME_REPORT":
                            case 72:
                                message.cmd = 72;
                                break;
                            case "CHIMNEY_FAN_BOOST_TIME_SET":
                            case 73:
                                message.cmd = 73;
                                break;
                            case "CHIMNEY_FAN_DEFAULT_SET":
                            case 74:
                                message.cmd = 74;
                                break;
                            case "CHIMNEY_FAN_MIN_SPEED_GET":
                            case 75:
                                message.cmd = 75;
                                break;
                            case "CHIMNEY_FAN_MIN_SPEED_REPORT":
                            case 76:
                                message.cmd = 76;
                                break;
                            case "CHIMNEY_FAN_MIN_SPEED_SET":
                            case 77:
                                message.cmd = 77;
                                break;
                            case "CHIMNEY_FAN_MODE_GET":
                            case 78:
                                message.cmd = 78;
                                break;
                            case "CHIMNEY_FAN_MODE_REPORT":
                            case 79:
                                message.cmd = 79;
                                break;
                            case "CHIMNEY_FAN_MODE_SET":
                            case 80:
                                message.cmd = 80;
                                break;
                            case "CHIMNEY_FAN_SETUP_GET":
                            case 81:
                                message.cmd = 81;
                                break;
                            case "CHIMNEY_FAN_SETUP_REPORT":
                            case 82:
                                message.cmd = 82;
                                break;
                            case "CHIMNEY_FAN_SETUP_SET":
                            case 83:
                                message.cmd = 83;
                                break;
                            case "CHIMNEY_FAN_SPEED_GET":
                            case 84:
                                message.cmd = 84;
                                break;
                            case "CHIMNEY_FAN_SPEED_REPORT":
                            case 85:
                                message.cmd = 85;
                                break;
                            case "CHIMNEY_FAN_SPEED_SET":
                            case 86:
                                message.cmd = 86;
                                break;
                            case "CHIMNEY_FAN_START_TEMP_GET":
                            case 87:
                                message.cmd = 87;
                                break;
                            case "CHIMNEY_FAN_START_TEMP_REPORT":
                            case 88:
                                message.cmd = 88;
                                break;
                            case "CHIMNEY_FAN_START_TEMP_SET":
                            case 89:
                                message.cmd = 89;
                                break;
                            case "CHIMNEY_FAN_STATE_GET":
                            case 90:
                                message.cmd = 90;
                                break;
                            case "CHIMNEY_FAN_STATE_REPORT":
                            case 91:
                                message.cmd = 91;
                                break;
                            case "CHIMNEY_FAN_STATE_SET":
                            case 92:
                                message.cmd = 92;
                                break;
                            case "CHIMNEY_FAN_STATUS_GET":
                            case 93:
                                message.cmd = 93;
                                break;
                            case "CHIMNEY_FAN_STATUS_REPORT":
                            case 94:
                                message.cmd = 94;
                                break;
                            case "CHIMNEY_FAN_STOP_TEMP_GET":
                            case 95:
                                message.cmd = 95;
                                break;
                            case "CHIMNEY_FAN_STOP_TEMP_REPORT":
                            case 96:
                                message.cmd = 96;
                                break;
                            case "CHIMNEY_FAN_STOP_TEMP_SET":
                            case 97:
                                message.cmd = 97;
                                break;
                            case "CHIMNEY_FAN_STOP_TIME_GET":
                            case 98:
                                message.cmd = 98;
                                break;
                            case "CHIMNEY_FAN_STOP_TIME_REPORT":
                            case 99:
                                message.cmd = 99;
                                break;
                            case "CHIMNEY_FAN_STOP_TIME_SET":
                            case 100:
                                message.cmd = 100;
                                break;
                            case "CLOCK_GET":
                            case 101:
                                message.cmd = 101;
                                break;
                            case "CLOCK_REPORT":
                            case 102:
                                message.cmd = 102;
                                break;
                            case "CLOCK_SET":
                            case 103:
                                message.cmd = 103;
                                break;
                            case "CMD_ASSIGN_SUC_RETURN_ROUTE":
                            case 104:
                                message.cmd = 104;
                                break;
                            case "CMD_AUTOMATIC_CONTROLLER_UPDATE_START":
                            case 105:
                                message.cmd = 105;
                                break;
                            case "CMD_ENCAPSULATION":
                            case 106:
                                message.cmd = 106;
                                break;
                            case "CMD_NODES_EXIST":
                            case 107:
                                message.cmd = 107;
                                break;
                            case "CMD_NODES_EXIST_REPLY":
                            case 108:
                                message.cmd = 108;
                                break;
                            case "CMD_NOP_POWER":
                            case 109:
                                message.cmd = 109;
                                break;
                            case "CMD_RESERVED_IDS":
                            case 110:
                                message.cmd = 110;
                                break;
                            case "CMD_SET_NWI_MODE":
                            case 111:
                                message.cmd = 111;
                                break;
                            case "CMD_SET_SUC":
                            case 112:
                                message.cmd = 112;
                                break;
                            case "CMD_SET_SUC_ACK":
                            case 113:
                                message.cmd = 113;
                                break;
                            case "CMD_STATIC_ROUTE_REQUEST":
                            case 114:
                                message.cmd = 114;
                                break;
                            case "CMD_SUC_NODE_ID":
                            case 115:
                                message.cmd = 115;
                                break;
                            case "COMMAND_APPLICATION_NODE_INFO_GET":
                            case 116:
                                message.cmd = 116;
                                break;
                            case "COMMAND_APPLICATION_NODE_INFO_REPORT":
                            case 117:
                                message.cmd = 117;
                                break;
                            case "COMMAND_APPLICATION_NODE_INFO_SET":
                            case 118:
                                message.cmd = 118;
                                break;
                            case "COMMAND_CLASS_SECURITY_PANEL_ZONE_SENSOR_INSTALLED_REPORT":
                            case 119:
                                message.cmd = 119;
                                break;
                            case "COMMAND_COMMAND_CLASS_NOT_SUPPORTED":
                            case 120:
                                message.cmd = 120;
                                break;
                            case "COMMAND_COMPLETE":
                            case 121:
                                message.cmd = 121;
                                break;
                            case "COMMAND_CONFIGURATION_GET":
                            case 122:
                                message.cmd = 122;
                                break;
                            case "COMMAND_CONFIGURATION_REPORT":
                            case 123:
                                message.cmd = 123;
                                break;
                            case "COMMAND_CONFIGURATION_SET":
                            case 124:
                                message.cmd = 124;
                                break;
                            case "COMMAND_FIRST_SEGMENT":
                            case 125:
                                message.cmd = 125;
                                break;
                            case "COMMAND_RECORDS_SUPPORTED_GET":
                            case 126:
                                message.cmd = 126;
                                break;
                            case "COMMAND_RECORDS_SUPPORTED_REPORT":
                            case 127:
                                message.cmd = 127;
                                break;
                            case "COMMAND_SCHEDULE_GET":
                            case 128:
                                message.cmd = 128;
                                break;
                            case "COMMAND_SCHEDULE_REPORT":
                            case 129:
                                message.cmd = 129;
                                break;
                            case "COMMAND_SCHEDULE_SET":
                            case 130:
                                message.cmd = 130;
                                break;
                            case "COMMAND_SEGMENT_COMPLETE":
                            case 131:
                                message.cmd = 131;
                                break;
                            case "COMMAND_SEGMENT_REQUEST":
                            case 132:
                                message.cmd = 132;
                                break;
                            case "COMMAND_SEGMENT_WAIT":
                            case 133:
                                message.cmd = 133;
                                break;
                            case "COMMAND_SUBSEQUENT_SEGMENT":
                            case 134:
                                message.cmd = 134;
                                break;
                            case "COMMAND_ZIP_PACKET":
                            case 135:
                                message.cmd = 135;
                                break;
                            case "COMPLETE":
                            case 136:
                                message.cmd = 136;
                                break;
                            case "CONFIGURATION_GET":
                            case 137:
                                message.cmd = 137;
                                break;
                            case "CONFIGURATION_REPORT":
                            case 138:
                                message.cmd = 138;
                                break;
                            case "CONFIGURATION_SET":
                            case 139:
                                message.cmd = 139;
                                break;
                            case "CONTROLLER_CHANGE":
                            case 140:
                                message.cmd = 140;
                                break;
                            case "CONTROLLER_CHANGE_STATUS":
                            case 141:
                                message.cmd = 141;
                                break;
                            case "CRC_16_ENCAP":
                            case 142:
                                message.cmd = 142;
                                break;
                            case "CTRL_REPLICATION_TRANSFER_GROUP":
                            case 143:
                                message.cmd = 143;
                                break;
                            case "CTRL_REPLICATION_TRANSFER_GROUP_NAME":
                            case 144:
                                message.cmd = 144;
                                break;
                            case "CTRL_REPLICATION_TRANSFER_SCENE":
                            case 145:
                                message.cmd = 145;
                                break;
                            case "CTRL_REPLICATION_TRANSFER_SCENE_NAME":
                            case 146:
                                message.cmd = 146;
                                break;
                            case "DATE_GET":
                            case 147:
                                message.cmd = 147;
                                break;
                            case "DATE_REPORT":
                            case 148:
                                message.cmd = 148;
                                break;
                            case "DCP_EVENT_STATUS_GET":
                            case 149:
                                message.cmd = 149;
                                break;
                            case "DCP_EVENT_STATUS_REPORT":
                            case 150:
                                message.cmd = 150;
                                break;
                            case "DCP_LIST_GET":
                            case 151:
                                message.cmd = 151;
                                break;
                            case "DCP_LIST_REMOVE":
                            case 152:
                                message.cmd = 152;
                                break;
                            case "DCP_LIST_REPORT":
                            case 153:
                                message.cmd = 153;
                                break;
                            case "DCP_LIST_SET":
                            case 154:
                                message.cmd = 154;
                                break;
                            case "DCP_LIST_SUPPORTED_GET":
                            case 155:
                                message.cmd = 155;
                                break;
                            case "DCP_LIST_SUPPORTED_REPORT":
                            case 156:
                                message.cmd = 156;
                                break;
                            case "DEFAULT_SET":
                            case 157:
                                message.cmd = 157;
                                break;
                            case "DEFAULT_SET_COMPLETE":
                            case 158:
                                message.cmd = 158;
                                break;
                            case "DEVICE_RESET_LOCALLY_NOTIFICATION":
                            case 159:
                                message.cmd = 159;
                                break;
                            case "DMX_ADDRESS_GET":
                            case 160:
                                message.cmd = 160;
                                break;
                            case "DMX_ADDRESS_REPORT":
                            case 161:
                                message.cmd = 161;
                                break;
                            case "DMX_ADDRESS_SET":
                            case 162:
                                message.cmd = 162;
                                break;
                            case "DMX_CAPABILITY_GET":
                            case 163:
                                message.cmd = 163;
                                break;
                            case "DMX_CAPABILITY_REPORT":
                            case 164:
                                message.cmd = 164;
                                break;
                            case "DMX_DATA":
                            case 165:
                                message.cmd = 165;
                                break;
                            case "DOOR_LOCK_CONFIGURATION_GET":
                            case 166:
                                message.cmd = 166;
                                break;
                            case "DOOR_LOCK_CONFIGURATION_REPORT":
                            case 167:
                                message.cmd = 167;
                                break;
                            case "DOOR_LOCK_CONFIGURATION_SET":
                            case 168:
                                message.cmd = 168;
                                break;
                            case "DOOR_LOCK_LOGGING_RECORDS_SUPPORTED_GET":
                            case 169:
                                message.cmd = 169;
                                break;
                            case "DOOR_LOCK_LOGGING_RECORDS_SUPPORTED_REPORT":
                            case 170:
                                message.cmd = 170;
                                break;
                            case "DOOR_LOCK_OPERATION_GET":
                            case 171:
                                message.cmd = 171;
                                break;
                            case "DOOR_LOCK_OPERATION_REPORT":
                            case 172:
                                message.cmd = 172;
                                break;
                            case "DOOR_LOCK_OPERATION_SET":
                            case 173:
                                message.cmd = 173;
                                break;
                            case "ENERGY_PRODUCTION_GET":
                            case 174:
                                message.cmd = 174;
                                break;
                            case "ENERGY_PRODUCTION_REPORT":
                            case 175:
                                message.cmd = 175;
                                break;
                            case "ENTRY_CONTROL_CONFIGURATION_GET":
                            case 176:
                                message.cmd = 176;
                                break;
                            case "ENTRY_CONTROL_CONFIGURATION_REPORT":
                            case 177:
                                message.cmd = 177;
                                break;
                            case "ENTRY_CONTROL_CONFIGURATION_SET":
                            case 178:
                                message.cmd = 178;
                                break;
                            case "ENTRY_CONTROL_EVENT_SUPPORTED_GET":
                            case 179:
                                message.cmd = 179;
                                break;
                            case "ENTRY_CONTROL_EVENT_SUPPORTED_REPORT":
                            case 180:
                                message.cmd = 180;
                                break;
                            case "ENTRY_CONTROL_KEY_SUPPORTED_GET":
                            case 181:
                                message.cmd = 181;
                                break;
                            case "ENTRY_CONTROL_KEY_SUPPORTED_REPORT":
                            case 182:
                                message.cmd = 182;
                                break;
                            case "ENTRY_CONTROL_NOTIFICATION":
                            case 183:
                                message.cmd = 183;
                                break;
                            case "EVENT_SUPPORTED_GET":
                            case 184:
                                message.cmd = 184;
                                break;
                            case "EVENT_SUPPORTED_REPORT":
                            case 185:
                                message.cmd = 185;
                                break;
                            case "EXCLUDE_REQUEST":
                            case 186:
                                message.cmd = 186;
                                break;
                            case "FAILED_NODE_REMOVE":
                            case 187:
                                message.cmd = 187;
                                break;
                            case "FAILED_NODE_REMOVE_STATUS":
                            case 188:
                                message.cmd = 188;
                                break;
                            case "FAILED_NODE_REPLACE":
                            case 189:
                                message.cmd = 189;
                                break;
                            case "FAILED_NODE_REPLACE_STATUS":
                            case 190:
                                message.cmd = 190;
                                break;
                            case "FIND_NODES_IN_RANGE":
                            case 191:
                                message.cmd = 191;
                                break;
                            case "FIRMWARE_MD_GET":
                            case 192:
                                message.cmd = 192;
                                break;
                            case "FIRMWARE_MD_REPORT":
                            case 193:
                                message.cmd = 193;
                                break;
                            case "FIRMWARE_UPDATE_MD_GET":
                            case 194:
                                message.cmd = 194;
                                break;
                            case "FIRMWARE_UPDATE_MD_REPORT":
                            case 195:
                                message.cmd = 195;
                                break;
                            case "FIRMWARE_UPDATE_MD_REQUEST_GET":
                            case 196:
                                message.cmd = 196;
                                break;
                            case "FIRMWARE_UPDATE_MD_REQUEST_REPORT":
                            case 197:
                                message.cmd = 197;
                                break;
                            case "FIRMWARE_UPDATE_MD_STATUS_REPORT":
                            case 198:
                                message.cmd = 198;
                                break;
                            case "GATEWAY_CONFIGURATION_GET":
                            case 199:
                                message.cmd = 199;
                                break;
                            case "GATEWAY_CONFIGURATION_REPORT":
                            case 200:
                                message.cmd = 200;
                                break;
                            case "GATEWAY_CONFIGURATION_SET":
                            case 201:
                                message.cmd = 201;
                                break;
                            case "GATEWAY_CONFIGURATION_STATUS":
                            case 202:
                                message.cmd = 202;
                                break;
                            case "GATEWAY_LOCK_SET":
                            case 203:
                                message.cmd = 203;
                                break;
                            case "GATEWAY_MODE_GET":
                            case 204:
                                message.cmd = 204;
                                break;
                            case "GATEWAY_MODE_REPORT":
                            case 205:
                                message.cmd = 205;
                                break;
                            case "GATEWAY_MODE_SET":
                            case 206:
                                message.cmd = 206;
                                break;
                            case "GATEWAY_PEER_GET":
                            case 207:
                                message.cmd = 207;
                                break;
                            case "GATEWAY_PEER_REPORT":
                            case 208:
                                message.cmd = 208;
                                break;
                            case "GATEWAY_PEER_SET":
                            case 209:
                                message.cmd = 209;
                                break;
                            case "GEOGRAPHIC_LOCATION_GET":
                            case 210:
                                message.cmd = 210;
                                break;
                            case "GEOGRAPHIC_LOCATION_REPORT":
                            case 211:
                                message.cmd = 211;
                                break;
                            case "GEOGRAPHIC_LOCATION_SET":
                            case 212:
                                message.cmd = 212;
                                break;
                            case "GET_NODES_IN_RANGE":
                            case 213:
                                message.cmd = 213;
                                break;
                            case "GROUPING_NAME_GET":
                            case 214:
                                message.cmd = 214;
                                break;
                            case "GROUPING_NAME_REPORT":
                            case 215:
                                message.cmd = 215;
                                break;
                            case "GROUPING_NAME_SET":
                            case 216:
                                message.cmd = 216;
                                break;
                            case "HAIL":
                            case 217:
                                message.cmd = 217;
                                break;
                            case "HRV_CONTROL_BYPASS_GET":
                            case 218:
                                message.cmd = 218;
                                break;
                            case "HRV_CONTROL_BYPASS_REPORT":
                            case 219:
                                message.cmd = 219;
                                break;
                            case "HRV_CONTROL_BYPASS_SET":
                            case 220:
                                message.cmd = 220;
                                break;
                            case "HRV_CONTROL_MODE_GET":
                            case 221:
                                message.cmd = 221;
                                break;
                            case "HRV_CONTROL_MODE_REPORT":
                            case 222:
                                message.cmd = 222;
                                break;
                            case "HRV_CONTROL_MODE_SET":
                            case 223:
                                message.cmd = 223;
                                break;
                            case "HRV_CONTROL_MODE_SUPPORTED_GET":
                            case 224:
                                message.cmd = 224;
                                break;
                            case "HRV_CONTROL_MODE_SUPPORTED_REPORT":
                            case 225:
                                message.cmd = 225;
                                break;
                            case "HRV_CONTROL_VENTILATION_RATE_GET":
                            case 226:
                                message.cmd = 226;
                                break;
                            case "HRV_CONTROL_VENTILATION_RATE_REPORT":
                            case 227:
                                message.cmd = 227;
                                break;
                            case "HRV_CONTROL_VENTILATION_RATE_SET":
                            case 228:
                                message.cmd = 228;
                                break;
                            case "HRV_STATUS_GET":
                            case 229:
                                message.cmd = 229;
                                break;
                            case "HRV_STATUS_REPORT":
                            case 230:
                                message.cmd = 230;
                                break;
                            case "HRV_STATUS_SUPPORTED_GET":
                            case 231:
                                message.cmd = 231;
                                break;
                            case "HRV_STATUS_SUPPORTED_REPORT":
                            case 232:
                                message.cmd = 232;
                                break;
                            case "HUMIDITY_CONTROL_MODE_GET":
                            case 233:
                                message.cmd = 233;
                                break;
                            case "HUMIDITY_CONTROL_MODE_REPORT":
                            case 234:
                                message.cmd = 234;
                                break;
                            case "HUMIDITY_CONTROL_MODE_SET":
                            case 235:
                                message.cmd = 235;
                                break;
                            case "HUMIDITY_CONTROL_MODE_SUPPORTED_GET":
                            case 236:
                                message.cmd = 236;
                                break;
                            case "HUMIDITY_CONTROL_MODE_SUPPORTED_REPORT":
                            case 237:
                                message.cmd = 237;
                                break;
                            case "HUMIDITY_CONTROL_OPERATING_STATE_GET":
                            case 238:
                                message.cmd = 238;
                                break;
                            case "HUMIDITY_CONTROL_OPERATING_STATE_REPORT":
                            case 239:
                                message.cmd = 239;
                                break;
                            case "HUMIDITY_CONTROL_SETPOINT_CAPABILITIES_GET":
                            case 240:
                                message.cmd = 240;
                                break;
                            case "HUMIDITY_CONTROL_SETPOINT_CAPABILITIES_REPORT":
                            case 241:
                                message.cmd = 241;
                                break;
                            case "HUMIDITY_CONTROL_SETPOINT_GET":
                            case 242:
                                message.cmd = 242;
                                break;
                            case "HUMIDITY_CONTROL_SETPOINT_REPORT":
                            case 243:
                                message.cmd = 243;
                                break;
                            case "HUMIDITY_CONTROL_SETPOINT_SCALE_SUPPORTED_GET":
                            case 244:
                                message.cmd = 244;
                                break;
                            case "HUMIDITY_CONTROL_SETPOINT_SCALE_SUPPORTED_REPORT":
                            case 245:
                                message.cmd = 245;
                                break;
                            case "HUMIDITY_CONTROL_SETPOINT_SET":
                            case 246:
                                message.cmd = 246;
                                break;
                            case "HUMIDITY_CONTROL_SETPOINT_SUPPORTED_GET":
                            case 247:
                                message.cmd = 247;
                                break;
                            case "HUMIDITY_CONTROL_SETPOINT_SUPPORTED_REPORT":
                            case 248:
                                message.cmd = 248;
                                break;
                            case "INDICATOR_GET":
                            case 249:
                                message.cmd = 249;
                                break;
                            case "INDICATOR_REPORT":
                            case 250:
                                message.cmd = 250;
                                break;
                            case "INDICATOR_SET":
                            case 251:
                                message.cmd = 251;
                                break;
                            case "INITIATE":
                            case 252:
                                message.cmd = 252;
                                break;
                            case "IP_ASSOCIATION_GET":
                            case 253:
                                message.cmd = 253;
                                break;
                            case "IP_ASSOCIATION_REMOVE":
                            case 254:
                                message.cmd = 254;
                                break;
                            case "IP_ASSOCIATION_REPORT":
                            case 255:
                                message.cmd = 255;
                                break;
                            case "IP_ASSOCIATION_SET":
                            case 256:
                                message.cmd = 256;
                                break;
                            case "IP_CONFIGURATION_GET":
                            case 257:
                                message.cmd = 257;
                                break;
                            case "IP_CONFIGURATION_RELEASE":
                            case 258:
                                message.cmd = 258;
                                break;
                            case "IP_CONFIGURATION_RENEW":
                            case 259:
                                message.cmd = 259;
                                break;
                            case "IP_CONFIGURATION_REPORT":
                            case 260:
                                message.cmd = 260;
                                break;
                            case "IP_CONFIGURATION_SET":
                            case 261:
                                message.cmd = 261;
                                break;
                            case "IRRIGATION_SYSTEM_CONFIG_GET":
                            case 262:
                                message.cmd = 262;
                                break;
                            case "IRRIGATION_SYSTEM_CONFIG_REPORT":
                            case 263:
                                message.cmd = 263;
                                break;
                            case "IRRIGATION_SYSTEM_CONFIG_SET":
                            case 264:
                                message.cmd = 264;
                                break;
                            case "IRRIGATION_SYSTEM_INFO_GET":
                            case 265:
                                message.cmd = 265;
                                break;
                            case "IRRIGATION_SYSTEM_INFO_REPORT":
                            case 266:
                                message.cmd = 266;
                                break;
                            case "IRRIGATION_SYSTEM_SHUTOFF":
                            case 267:
                                message.cmd = 267;
                                break;
                            case "IRRIGATION_SYSTEM_STATUS_GET":
                            case 268:
                                message.cmd = 268;
                                break;
                            case "IRRIGATION_SYSTEM_STATUS_REPORT":
                            case 269:
                                message.cmd = 269;
                                break;
                            case "IRRIGATION_VALVE_CONFIG_GET":
                            case 270:
                                message.cmd = 270;
                                break;
                            case "IRRIGATION_VALVE_CONFIG_REPORT":
                            case 271:
                                message.cmd = 271;
                                break;
                            case "IRRIGATION_VALVE_CONFIG_SET":
                            case 272:
                                message.cmd = 272;
                                break;
                            case "IRRIGATION_VALVE_INFO_GET":
                            case 273:
                                message.cmd = 273;
                                break;
                            case "IRRIGATION_VALVE_INFO_REPORT":
                            case 274:
                                message.cmd = 274;
                                break;
                            case "IRRIGATION_VALVE_RUN":
                            case 275:
                                message.cmd = 275;
                                break;
                            case "IRRIGATION_VALVE_TABLE_GET":
                            case 276:
                                message.cmd = 276;
                                break;
                            case "IRRIGATION_VALVE_TABLE_REPORT":
                            case 277:
                                message.cmd = 277;
                                break;
                            case "IRRIGATION_VALVE_TABLE_RUN":
                            case 278:
                                message.cmd = 278;
                                break;
                            case "IRRIGATION_VALVE_TABLE_SET":
                            case 279:
                                message.cmd = 279;
                                break;
                            case "KEX_FAIL":
                            case 280:
                                message.cmd = 280;
                                break;
                            case "KEX_GET":
                            case 281:
                                message.cmd = 281;
                                break;
                            case "KEX_REPORT":
                            case 282:
                                message.cmd = 282;
                                break;
                            case "KEX_SET":
                            case 283:
                                message.cmd = 283;
                                break;
                            case "LANGUAGE_GET":
                            case 284:
                                message.cmd = 284;
                                break;
                            case "LANGUAGE_REPORT":
                            case 285:
                                message.cmd = 285;
                                break;
                            case "LANGUAGE_SET":
                            case 286:
                                message.cmd = 286;
                                break;
                            case "LAST_WORKING_ROUTE_GET":
                            case 287:
                                message.cmd = 287;
                                break;
                            case "LAST_WORKING_ROUTE_REPORT":
                            case 288:
                                message.cmd = 288;
                                break;
                            case "LAST_WORKING_ROUTE_SET":
                            case 289:
                                message.cmd = 289;
                                break;
                            case "LEARN_MODE_SET":
                            case 290:
                                message.cmd = 290;
                                break;
                            case "LEARN_MODE_SET_STATUS":
                            case 291:
                                message.cmd = 291;
                                break;
                            case "LOCK_GET":
                            case 292:
                                message.cmd = 292;
                                break;
                            case "LOCK_REPORT":
                            case 293:
                                message.cmd = 293;
                                break;
                            case "LOCK_SET":
                            case 294:
                                message.cmd = 294;
                                break;
                            case "LOST":
                            case 295:
                                message.cmd = 295;
                                break;
                            case "LOWPAN_FIRST_FRAGMENT":
                            case 296:
                                message.cmd = 296;
                                break;
                            case "LOWPAN_SUBSEQUENT_FRAGMENT":
                            case 297:
                                message.cmd = 297;
                                break;
                            case "MAILBOX_CONFIGURATION_GET":
                            case 298:
                                message.cmd = 298;
                                break;
                            case "MAILBOX_CONFIGURATION_REPORT":
                            case 299:
                                message.cmd = 299;
                                break;
                            case "MAILBOX_CONFIGURATION_SET":
                            case 300:
                                message.cmd = 300;
                                break;
                            case "MAILBOX_NODE_FAILING":
                            case 301:
                                message.cmd = 301;
                                break;
                            case "MAILBOX_QUEUE":
                            case 302:
                                message.cmd = 302;
                                break;
                            case "MAILBOX_WAKEUP_NOTIFICATION":
                            case 303:
                                message.cmd = 303;
                                break;
                            case "MANUFACTURER_SPECIFIC_GET":
                            case 304:
                                message.cmd = 304;
                                break;
                            case "MANUFACTURER_SPECIFIC_REPORT":
                            case 305:
                                message.cmd = 305;
                                break;
                            case "METER_GET":
                            case 306:
                                message.cmd = 306;
                                break;
                            case "METER_PULSE_GET":
                            case 307:
                                message.cmd = 307;
                                break;
                            case "METER_PULSE_REPORT":
                            case 308:
                                message.cmd = 308;
                                break;
                            case "METER_REPORT":
                            case 309:
                                message.cmd = 309;
                                break;
                            case "METER_TBL_CURRENT_DATA_GET":
                            case 310:
                                message.cmd = 310;
                                break;
                            case "METER_TBL_CURRENT_DATA_REPORT":
                            case 311:
                                message.cmd = 311;
                                break;
                            case "METER_TBL_HISTORICAL_DATA_GET":
                            case 312:
                                message.cmd = 312;
                                break;
                            case "METER_TBL_HISTORICAL_DATA_REPORT":
                            case 313:
                                message.cmd = 313;
                                break;
                            case "METER_TBL_PUSH_CONFIGURATION_GET":
                            case 314:
                                message.cmd = 314;
                                break;
                            case "METER_TBL_PUSH_CONFIGURATION_REPORT":
                            case 315:
                                message.cmd = 315;
                                break;
                            case "METER_TBL_PUSH_CONFIGURATION_SET":
                            case 316:
                                message.cmd = 316;
                                break;
                            case "METER_TBL_REPORT":
                            case 317:
                                message.cmd = 317;
                                break;
                            case "METER_TBL_STATUS_DATE_GET":
                            case 318:
                                message.cmd = 318;
                                break;
                            case "METER_TBL_STATUS_DEPTH_GET":
                            case 319:
                                message.cmd = 319;
                                break;
                            case "METER_TBL_STATUS_REPORT":
                            case 320:
                                message.cmd = 320;
                                break;
                            case "METER_TBL_STATUS_SUPPORTED_GET":
                            case 321:
                                message.cmd = 321;
                                break;
                            case "METER_TBL_STATUS_SUPPORTED_REPORT":
                            case 322:
                                message.cmd = 322;
                                break;
                            case "METER_TBL_TABLE_CAPABILITY_GET":
                            case 323:
                                message.cmd = 323;
                                break;
                            case "METER_TBL_TABLE_ID_GET":
                            case 324:
                                message.cmd = 324;
                                break;
                            case "METER_TBL_TABLE_ID_REPORT":
                            case 325:
                                message.cmd = 325;
                                break;
                            case "METER_TBL_TABLE_POINT_ADM_NO_GET":
                            case 326:
                                message.cmd = 326;
                                break;
                            case "METER_TBL_TABLE_POINT_ADM_NO_REPORT":
                            case 327:
                                message.cmd = 327;
                                break;
                            case "METER_TBL_TABLE_POINT_ADM_NO_SET":
                            case 328:
                                message.cmd = 328;
                                break;
                            case "MOVE_TO_POSITION_GET":
                            case 329:
                                message.cmd = 329;
                                break;
                            case "MOVE_TO_POSITION_REPORT":
                            case 330:
                                message.cmd = 330;
                                break;
                            case "MOVE_TO_POSITION_SET":
                            case 331:
                                message.cmd = 331;
                                break;
                            case "MULTI_CHANNEL_ASSOCIATION_GET":
                            case 332:
                                message.cmd = 332;
                                break;
                            case "MULTI_CHANNEL_ASSOCIATION_GROUPINGS_GET":
                            case 333:
                                message.cmd = 333;
                                break;
                            case "MULTI_CHANNEL_ASSOCIATION_GROUPINGS_REPORT":
                            case 334:
                                message.cmd = 334;
                                break;
                            case "MULTI_CHANNEL_ASSOCIATION_REMOVE":
                            case 335:
                                message.cmd = 335;
                                break;
                            case "MULTI_CHANNEL_ASSOCIATION_REPORT":
                            case 336:
                                message.cmd = 336;
                                break;
                            case "MULTI_CHANNEL_ASSOCIATION_SET":
                            case 337:
                                message.cmd = 337;
                                break;
                            case "MULTI_CHANNEL_CAPABILITY_GET":
                            case 338:
                                message.cmd = 338;
                                break;
                            case "MULTI_CHANNEL_CAPABILITY_REPORT":
                            case 339:
                                message.cmd = 339;
                                break;
                            case "MULTI_CHANNEL_CMD_ENCAP":
                            case 340:
                                message.cmd = 340;
                                break;
                            case "MULTI_CHANNEL_END_POINT_FIND":
                            case 341:
                                message.cmd = 341;
                                break;
                            case "MULTI_CHANNEL_END_POINT_FIND_REPORT":
                            case 342:
                                message.cmd = 342;
                                break;
                            case "MULTI_CHANNEL_END_POINT_GET":
                            case 343:
                                message.cmd = 343;
                                break;
                            case "MULTI_CHANNEL_END_POINT_REPORT":
                            case 344:
                                message.cmd = 344;
                                break;
                            case "MULTI_CMD_ENCAP":
                            case 345:
                                message.cmd = 345;
                                break;
                            case "MULTI_INSTANCE_ASSOCIATION_GET":
                            case 346:
                                message.cmd = 346;
                                break;
                            case "MULTI_INSTANCE_ASSOCIATION_GROUPINGS_GET":
                            case 347:
                                message.cmd = 347;
                                break;
                            case "MULTI_INSTANCE_ASSOCIATION_GROUPINGS_REPORT":
                            case 348:
                                message.cmd = 348;
                                break;
                            case "MULTI_INSTANCE_ASSOCIATION_REMOVE":
                            case 349:
                                message.cmd = 349;
                                break;
                            case "MULTI_INSTANCE_ASSOCIATION_REPORT":
                            case 350:
                                message.cmd = 350;
                                break;
                            case "MULTI_INSTANCE_ASSOCIATION_SET":
                            case 351:
                                message.cmd = 351;
                                break;
                            case "MULTI_INSTANCE_CMD_ENCAP":
                            case 352:
                                message.cmd = 352;
                                break;
                            case "MULTI_INSTANCE_GET":
                            case 353:
                                message.cmd = 353;
                                break;
                            case "MULTI_INSTANCE_REPORT":
                            case 354:
                                message.cmd = 354;
                                break;
                            case "NETWORK_KEY_SET":
                            case 355:
                                message.cmd = 355;
                                break;
                            case "NETWORK_KEY_VERIFY":
                            case 356:
                                message.cmd = 356;
                                break;
                            case "NETWORK_UPDATE_REQUEST":
                            case 357:
                                message.cmd = 357;
                                break;
                            case "NETWORK_UPDATE_REQUEST_STATUS":
                            case 358:
                                message.cmd = 358;
                                break;
                            case "NEW_NODE_REGISTERED":
                            case 359:
                                message.cmd = 359;
                                break;
                            case "NEW_RANGE_REGISTERED":
                            case 360:
                                message.cmd = 360;
                                break;
                            case "NODE_ADD":
                            case 361:
                                message.cmd = 361;
                                break;
                            case "NODE_ADD_STATUS":
                            case 362:
                                message.cmd = 362;
                                break;
                            case "NODE_INFO":
                            case 363:
                                message.cmd = 363;
                                break;
                            case "NODE_INFORMATION_SEND":
                            case 364:
                                message.cmd = 364;
                                break;
                            case "NODE_INFO_CACHED_GET":
                            case 365:
                                message.cmd = 365;
                                break;
                            case "NODE_INFO_CACHED_REPORT":
                            case 366:
                                message.cmd = 366;
                                break;
                            case "NODE_LIST_GET":
                            case 367:
                                message.cmd = 367;
                                break;
                            case "NODE_LIST_REPORT":
                            case 368:
                                message.cmd = 368;
                                break;
                            case "NODE_NAMING_NODE_LOCATION_GET":
                            case 369:
                                message.cmd = 369;
                                break;
                            case "NODE_NAMING_NODE_LOCATION_REPORT":
                            case 370:
                                message.cmd = 370;
                                break;
                            case "NODE_NAMING_NODE_LOCATION_SET":
                            case 371:
                                message.cmd = 371;
                                break;
                            case "NODE_NAMING_NODE_NAME_GET":
                            case 372:
                                message.cmd = 372;
                                break;
                            case "NODE_NAMING_NODE_NAME_REPORT":
                            case 373:
                                message.cmd = 373;
                                break;
                            case "NODE_NAMING_NODE_NAME_SET":
                            case 374:
                                message.cmd = 374;
                                break;
                            case "NODE_NEIGHBOR_UPDATE_REQUEST":
                            case 375:
                                message.cmd = 375;
                                break;
                            case "NODE_NEIGHBOR_UPDATE_STATUS":
                            case 376:
                                message.cmd = 376;
                                break;
                            case "NODE_RANGE_INFO":
                            case 377:
                                message.cmd = 377;
                                break;
                            case "NODE_REMOVE":
                            case 378:
                                message.cmd = 378;
                                break;
                            case "NODE_REMOVE_STATUS":
                            case 379:
                                message.cmd = 379;
                                break;
                            case "NOTIFICATION_GET":
                            case 380:
                                message.cmd = 380;
                                break;
                            case "NOTIFICATION_REPORT":
                            case 381:
                                message.cmd = 381;
                                break;
                            case "NOTIFICATION_SET":
                            case 382:
                                message.cmd = 382;
                                break;
                            case "NOTIFICATION_SUPPORTED_GET":
                            case 383:
                                message.cmd = 383;
                                break;
                            case "NOTIFICATION_SUPPORTED_REPORT":
                            case 384:
                                message.cmd = 384;
                                break;
                            case "POWERLEVEL_GET":
                            case 385:
                                message.cmd = 385;
                                break;
                            case "POWERLEVEL_REPORT":
                            case 386:
                                message.cmd = 386;
                                break;
                            case "POWERLEVEL_SET":
                            case 387:
                                message.cmd = 387;
                                break;
                            case "POWERLEVEL_TEST_NODE_GET":
                            case 388:
                                message.cmd = 388;
                                break;
                            case "POWERLEVEL_TEST_NODE_REPORT":
                            case 389:
                                message.cmd = 389;
                                break;
                            case "POWERLEVEL_TEST_NODE_SET":
                            case 390:
                                message.cmd = 390;
                                break;
                            case "PREPAYMENT_BALANCE_GET":
                            case 391:
                                message.cmd = 391;
                                break;
                            case "PREPAYMENT_BALANCE_REPORT":
                            case 392:
                                message.cmd = 392;
                                break;
                            case "PREPAYMENT_SUPPORTED_GET":
                            case 393:
                                message.cmd = 393;
                                break;
                            case "PREPAYMENT_SUPPORTED_REPORT":
                            case 394:
                                message.cmd = 394;
                                break;
                            case "PROPRIETARY_GET":
                            case 395:
                                message.cmd = 395;
                                break;
                            case "PROPRIETARY_REPORT":
                            case 396:
                                message.cmd = 396;
                                break;
                            case "PROPRIETARY_SET":
                            case 397:
                                message.cmd = 397;
                                break;
                            case "PROTECTION_GET":
                            case 398:
                                message.cmd = 398;
                                break;
                            case "PROTECTION_REPORT":
                            case 399:
                                message.cmd = 399;
                                break;
                            case "PROTECTION_SET":
                            case 400:
                                message.cmd = 400;
                                break;
                            case "PUBLIC_KEY_REPORT":
                            case 401:
                                message.cmd = 401;
                                break;
                            case "RATE_TBL_ACTIVE_RATE_GET":
                            case 402:
                                message.cmd = 402;
                                break;
                            case "RATE_TBL_ACTIVE_RATE_REPORT":
                            case 403:
                                message.cmd = 403;
                                break;
                            case "RATE_TBL_CURRENT_DATA_GET":
                            case 404:
                                message.cmd = 404;
                                break;
                            case "RATE_TBL_CURRENT_DATA_REPORT":
                            case 405:
                                message.cmd = 405;
                                break;
                            case "RATE_TBL_GET":
                            case 406:
                                message.cmd = 406;
                                break;
                            case "RATE_TBL_HISTORICAL_DATA_GET":
                            case 407:
                                message.cmd = 407;
                                break;
                            case "RATE_TBL_HISTORICAL_DATA_REPORT":
                            case 408:
                                message.cmd = 408;
                                break;
                            case "RATE_TBL_REMOVE":
                            case 409:
                                message.cmd = 409;
                                break;
                            case "RATE_TBL_REPORT":
                            case 410:
                                message.cmd = 410;
                                break;
                            case "RATE_TBL_SET":
                            case 411:
                                message.cmd = 411;
                                break;
                            case "RATE_TBL_SUPPORTED_GET":
                            case 412:
                                message.cmd = 412;
                                break;
                            case "RATE_TBL_SUPPORTED_REPORT":
                            case 413:
                                message.cmd = 413;
                                break;
                            case "RECORD_GET":
                            case 414:
                                message.cmd = 414;
                                break;
                            case "RECORD_REPORT":
                            case 415:
                                message.cmd = 415;
                                break;
                            case "REMOTE_ASSOCIATION_ACTIVATE":
                            case 416:
                                message.cmd = 416;
                                break;
                            case "REMOTE_ASSOCIATION_CONFIGURATION_GET":
                            case 417:
                                message.cmd = 417;
                                break;
                            case "REMOTE_ASSOCIATION_CONFIGURATION_REPORT":
                            case 418:
                                message.cmd = 418;
                                break;
                            case "REMOTE_ASSOCIATION_CONFIGURATION_SET":
                            case 419:
                                message.cmd = 419;
                                break;
                            case "REQUEST_NODE_INFO":
                            case 420:
                                message.cmd = 420;
                                break;
                            case "RETURN_ROUTE_ASSIGN":
                            case 421:
                                message.cmd = 421;
                                break;
                            case "RETURN_ROUTE_ASSIGN_COMPLETE":
                            case 422:
                                message.cmd = 422;
                                break;
                            case "RETURN_ROUTE_DELETE":
                            case 423:
                                message.cmd = 423;
                                break;
                            case "RETURN_ROUTE_DELETE_COMPLETE":
                            case 424:
                                message.cmd = 424;
                                break;
                            case "SCENE_ACTIVATION_SET":
                            case 425:
                                message.cmd = 425;
                                break;
                            case "SCENE_ACTUATOR_CONF_GET":
                            case 426:
                                message.cmd = 426;
                                break;
                            case "SCENE_ACTUATOR_CONF_REPORT":
                            case 427:
                                message.cmd = 427;
                                break;
                            case "SCENE_ACTUATOR_CONF_SET":
                            case 428:
                                message.cmd = 428;
                                break;
                            case "SCENE_CONTROLLER_CONF_GET":
                            case 429:
                                message.cmd = 429;
                                break;
                            case "SCENE_CONTROLLER_CONF_REPORT":
                            case 430:
                                message.cmd = 430;
                                break;
                            case "SCENE_CONTROLLER_CONF_SET":
                            case 431:
                                message.cmd = 431;
                                break;
                            case "SCHEDULE_CHANGED_GET":
                            case 432:
                                message.cmd = 432;
                                break;
                            case "SCHEDULE_CHANGED_REPORT":
                            case 433:
                                message.cmd = 433;
                                break;
                            case "SCHEDULE_ENTRY_LOCK_ENABLE_ALL_SET":
                            case 434:
                                message.cmd = 434;
                                break;
                            case "SCHEDULE_ENTRY_LOCK_ENABLE_SET":
                            case 435:
                                message.cmd = 435;
                                break;
                            case "SCHEDULE_ENTRY_LOCK_WEEK_DAY_GET":
                            case 436:
                                message.cmd = 436;
                                break;
                            case "SCHEDULE_ENTRY_LOCK_WEEK_DAY_REPORT":
                            case 437:
                                message.cmd = 437;
                                break;
                            case "SCHEDULE_ENTRY_LOCK_WEEK_DAY_SET":
                            case 438:
                                message.cmd = 438;
                                break;
                            case "SCHEDULE_ENTRY_LOCK_YEAR_DAY_GET":
                            case 439:
                                message.cmd = 439;
                                break;
                            case "SCHEDULE_ENTRY_LOCK_YEAR_DAY_REPORT":
                            case 440:
                                message.cmd = 440;
                                break;
                            case "SCHEDULE_ENTRY_LOCK_YEAR_DAY_SET":
                            case 441:
                                message.cmd = 441;
                                break;
                            case "SCHEDULE_ENTRY_TYPE_SUPPORTED_GET":
                            case 442:
                                message.cmd = 442;
                                break;
                            case "SCHEDULE_ENTRY_TYPE_SUPPORTED_REPORT":
                            case 443:
                                message.cmd = 443;
                                break;
                            case "SCHEDULE_GET":
                            case 444:
                                message.cmd = 444;
                                break;
                            case "SCHEDULE_OVERRIDE_GET":
                            case 445:
                                message.cmd = 445;
                                break;
                            case "SCHEDULE_OVERRIDE_REPORT":
                            case 446:
                                message.cmd = 446;
                                break;
                            case "SCHEDULE_OVERRIDE_SET":
                            case 447:
                                message.cmd = 447;
                                break;
                            case "SCHEDULE_REMOVE":
                            case 448:
                                message.cmd = 448;
                                break;
                            case "SCHEDULE_REPORT":
                            case 449:
                                message.cmd = 449;
                                break;
                            case "SCHEDULE_SET":
                            case 450:
                                message.cmd = 450;
                                break;
                            case "SCHEDULE_STATE_GET":
                            case 451:
                                message.cmd = 451;
                                break;
                            case "SCHEDULE_STATE_REPORT":
                            case 452:
                                message.cmd = 452;
                                break;
                            case "SCHEDULE_STATE_SET":
                            case 453:
                                message.cmd = 453;
                                break;
                            case "SCHEDULE_SUPPORTED_GET":
                            case 454:
                                message.cmd = 454;
                                break;
                            case "SCHEDULE_SUPPORTED_REPORT":
                            case 455:
                                message.cmd = 455;
                                break;
                            case "SCREEN_ATTRIBUTES_GET":
                            case 456:
                                message.cmd = 456;
                                break;
                            case "SCREEN_ATTRIBUTES_REPORT":
                            case 457:
                                message.cmd = 457;
                                break;
                            case "SCREEN_MD_GET":
                            case 458:
                                message.cmd = 458;
                                break;
                            case "SCREEN_MD_REPORT":
                            case 459:
                                message.cmd = 459;
                                break;
                            case "SECURITY_2_CAPABILITIES_GET":
                            case 460:
                                message.cmd = 460;
                                break;
                            case "SECURITY_2_CAPABILITIES_REPORT":
                            case 461:
                                message.cmd = 461;
                                break;
                            case "SECURITY_2_COMMANDS_SUPPORTED_GET":
                            case 462:
                                message.cmd = 462;
                                break;
                            case "SECURITY_2_COMMANDS_SUPPORTED_REPORT":
                            case 463:
                                message.cmd = 463;
                                break;
                            case "SECURITY_2_MESSAGE_ENCAPSULATION":
                            case 464:
                                message.cmd = 464;
                                break;
                            case "SECURITY_2_NETWORK_KEY_GET":
                            case 465:
                                message.cmd = 465;
                                break;
                            case "SECURITY_2_NETWORK_KEY_REPORT":
                            case 466:
                                message.cmd = 466;
                                break;
                            case "SECURITY_2_NETWORK_KEY_VERIFY":
                            case 467:
                                message.cmd = 467;
                                break;
                            case "SECURITY_2_NONCE_GET":
                            case 468:
                                message.cmd = 468;
                                break;
                            case "SECURITY_2_NONCE_REPORT":
                            case 469:
                                message.cmd = 469;
                                break;
                            case "SECURITY_2_TRANSFER_END":
                            case 470:
                                message.cmd = 470;
                                break;
                            case "SECURITY_COMMANDS_SUPPORTED_GET":
                            case 471:
                                message.cmd = 471;
                                break;
                            case "SECURITY_COMMANDS_SUPPORTED_REPORT":
                            case 472:
                                message.cmd = 472;
                                break;
                            case "SECURITY_MESSAGE_ENCAPSULATION":
                            case 473:
                                message.cmd = 473;
                                break;
                            case "SECURITY_MESSAGE_ENCAPSULATION_NONCE_GET":
                            case 474:
                                message.cmd = 474;
                                break;
                            case "SECURITY_NONCE_GET":
                            case 475:
                                message.cmd = 475;
                                break;
                            case "SECURITY_NONCE_REPORT":
                            case 476:
                                message.cmd = 476;
                                break;
                            case "SECURITY_PANEL_MODE_GET":
                            case 477:
                                message.cmd = 477;
                                break;
                            case "SECURITY_PANEL_MODE_REPORT":
                            case 478:
                                message.cmd = 478;
                                break;
                            case "SECURITY_PANEL_MODE_SET":
                            case 479:
                                message.cmd = 479;
                                break;
                            case "SECURITY_PANEL_MODE_SUPPORTED_GET":
                            case 480:
                                message.cmd = 480;
                                break;
                            case "SECURITY_PANEL_MODE_SUPPORTED_REPORT":
                            case 481:
                                message.cmd = 481;
                                break;
                            case "SECURITY_PANEL_ZONE_NUMBER_SUPPORTED_GET":
                            case 482:
                                message.cmd = 482;
                                break;
                            case "SECURITY_PANEL_ZONE_SENSOR_INSTALLED_GET":
                            case 483:
                                message.cmd = 483;
                                break;
                            case "SECURITY_PANEL_ZONE_SENSOR_STATE_GET":
                            case 484:
                                message.cmd = 484;
                                break;
                            case "SECURITY_PANEL_ZONE_SENSOR_STATE_REPORT":
                            case 485:
                                message.cmd = 485;
                                break;
                            case "SECURITY_PANEL_ZONE_SENSOR_TYPE_GET":
                            case 486:
                                message.cmd = 486;
                                break;
                            case "SECURITY_PANEL_ZONE_SENSOR_TYPE_REPORT":
                            case 487:
                                message.cmd = 487;
                                break;
                            case "SECURITY_PANEL_ZONE_STATE_GET":
                            case 488:
                                message.cmd = 488;
                                break;
                            case "SECURITY_PANEL_ZONE_STATE_REPORT":
                            case 489:
                                message.cmd = 489;
                                break;
                            case "SECURITY_PANEL_ZONE_SUPPORTED_REPORT":
                            case 490:
                                message.cmd = 490;
                                break;
                            case "SECURITY_PANEL_ZONE_TYPE_GET":
                            case 491:
                                message.cmd = 491;
                                break;
                            case "SECURITY_PANEL_ZONE_TYPE_REPORT":
                            case 492:
                                message.cmd = 492;
                                break;
                            case "SECURITY_SCHEME_GET":
                            case 493:
                                message.cmd = 493;
                                break;
                            case "SECURITY_SCHEME_INHERIT":
                            case 494:
                                message.cmd = 494;
                                break;
                            case "SECURITY_SCHEME_REPORT":
                            case 495:
                                message.cmd = 495;
                                break;
                            case "SENSOR_ALARM_GET":
                            case 496:
                                message.cmd = 496;
                                break;
                            case "SENSOR_ALARM_REPORT":
                            case 497:
                                message.cmd = 497;
                                break;
                            case "SENSOR_ALARM_SET":
                            case 498:
                                message.cmd = 498;
                                break;
                            case "SENSOR_ALARM_SUPPORTED_GET":
                            case 499:
                                message.cmd = 499;
                                break;
                            case "SENSOR_ALARM_SUPPORTED_REPORT":
                            case 500:
                                message.cmd = 500;
                                break;
                            case "SENSOR_BINARY_GET":
                            case 501:
                                message.cmd = 501;
                                break;
                            case "SENSOR_BINARY_REPORT":
                            case 502:
                                message.cmd = 502;
                                break;
                            case "SENSOR_MULTILEVEL_GET":
                            case 503:
                                message.cmd = 503;
                                break;
                            case "SENSOR_MULTILEVEL_REPORT":
                            case 504:
                                message.cmd = 504;
                                break;
                            case "SENSOR_TRIGGER_LEVEL_GET":
                            case 505:
                                message.cmd = 505;
                                break;
                            case "SENSOR_TRIGGER_LEVEL_REPORT":
                            case 506:
                                message.cmd = 506;
                                break;
                            case "SENSOR_TRIGGER_LEVEL_SET":
                            case 507:
                                message.cmd = 507;
                                break;
                            case "SIMPLE_AV_CONTROL_GET":
                            case 508:
                                message.cmd = 508;
                                break;
                            case "SIMPLE_AV_CONTROL_REPORT":
                            case 509:
                                message.cmd = 509;
                                break;
                            case "SIMPLE_AV_CONTROL_SET":
                            case 510:
                                message.cmd = 510;
                                break;
                            case "SIMPLE_AV_CONTROL_SUPPORTED_GET":
                            case 511:
                                message.cmd = 511;
                                break;
                            case "SIMPLE_AV_CONTROL_SUPPORTED_REPORT":
                            case 512:
                                message.cmd = 512;
                                break;
                            case "STATISTICS_CLEAR":
                            case 513:
                                message.cmd = 513;
                                break;
                            case "STATISTICS_GET":
                            case 514:
                                message.cmd = 514;
                                break;
                            case "STATISTICS_REPORT":
                            case 515:
                                message.cmd = 515;
                                break;
                            case "SUPERVISION_GET":
                            case 516:
                                message.cmd = 516;
                                break;
                            case "SUPERVISION_REPORT":
                            case 517:
                                message.cmd = 517;
                                break;
                            case "SWITCH_ALL_GET":
                            case 518:
                                message.cmd = 518;
                                break;
                            case "SWITCH_ALL_OFF":
                            case 519:
                                message.cmd = 519;
                                break;
                            case "SWITCH_ALL_ON":
                            case 520:
                                message.cmd = 520;
                                break;
                            case "SWITCH_ALL_REPORT":
                            case 521:
                                message.cmd = 521;
                                break;
                            case "SWITCH_ALL_SET":
                            case 522:
                                message.cmd = 522;
                                break;
                            case "SWITCH_BINARY_GET":
                            case 523:
                                message.cmd = 523;
                                break;
                            case "SWITCH_BINARY_REPORT":
                            case 524:
                                message.cmd = 524;
                                break;
                            case "SWITCH_BINARY_SET":
                            case 525:
                                message.cmd = 525;
                                break;
                            case "SWITCH_COLOR_GET":
                            case 526:
                                message.cmd = 526;
                                break;
                            case "SWITCH_COLOR_REPORT":
                            case 527:
                                message.cmd = 527;
                                break;
                            case "SWITCH_COLOR_SET":
                            case 528:
                                message.cmd = 528;
                                break;
                            case "SWITCH_COLOR_START_LEVEL_CHANGE":
                            case 529:
                                message.cmd = 529;
                                break;
                            case "SWITCH_COLOR_STOP_LEVEL_CHANGE":
                            case 530:
                                message.cmd = 530;
                                break;
                            case "SWITCH_COLOR_SUPPORTED_GET":
                            case 531:
                                message.cmd = 531;
                                break;
                            case "SWITCH_COLOR_SUPPORTED_REPORT":
                            case 532:
                                message.cmd = 532;
                                break;
                            case "SWITCH_MULTILEVEL_GET":
                            case 533:
                                message.cmd = 533;
                                break;
                            case "SWITCH_MULTILEVEL_REPORT":
                            case 534:
                                message.cmd = 534;
                                break;
                            case "SWITCH_MULTILEVEL_SET":
                            case 535:
                                message.cmd = 535;
                                break;
                            case "SWITCH_MULTILEVEL_START_LEVEL_CHANGE":
                            case 536:
                                message.cmd = 536;
                                break;
                            case "SWITCH_MULTILEVEL_STOP_LEVEL_CHANGE":
                            case 537:
                                message.cmd = 537;
                                break;
                            case "SWITCH_TOGGLE_BINARY_GET":
                            case 538:
                                message.cmd = 538;
                                break;
                            case "SWITCH_TOGGLE_BINARY_REPORT":
                            case 539:
                                message.cmd = 539;
                                break;
                            case "SWITCH_TOGGLE_BINARY_SET":
                            case 540:
                                message.cmd = 540;
                                break;
                            case "SWITCH_TOGGLE_MULTILEVEL_GET":
                            case 541:
                                message.cmd = 541;
                                break;
                            case "SWITCH_TOGGLE_MULTILEVEL_REPORT":
                            case 542:
                                message.cmd = 542;
                                break;
                            case "SWITCH_TOGGLE_MULTILEVEL_SET":
                            case 543:
                                message.cmd = 543;
                                break;
                            case "SWITCH_TOGGLE_MULTILEVEL_START_LEVEL_CHANGE":
                            case 544:
                                message.cmd = 544;
                                break;
                            case "SWITCH_TOGGLE_MULTILEVEL_STOP_LEVEL_CHANGE":
                            case 545:
                                message.cmd = 545;
                                break;
                            case "TARIFF_TBL_COST_GET":
                            case 546:
                                message.cmd = 546;
                                break;
                            case "TARIFF_TBL_COST_REPORT":
                            case 547:
                                message.cmd = 547;
                                break;
                            case "TARIFF_TBL_GET":
                            case 548:
                                message.cmd = 548;
                                break;
                            case "TARIFF_TBL_REMOVE":
                            case 549:
                                message.cmd = 549;
                                break;
                            case "TARIFF_TBL_REPORT":
                            case 550:
                                message.cmd = 550;
                                break;
                            case "TARIFF_TBL_SET":
                            case 551:
                                message.cmd = 551;
                                break;
                            case "TARIFF_TBL_SUPPLIER_GET":
                            case 552:
                                message.cmd = 552;
                                break;
                            case "TARIFF_TBL_SUPPLIER_REPORT":
                            case 553:
                                message.cmd = 553;
                                break;
                            case "TARIFF_TBL_SUPPLIER_SET":
                            case 554:
                                message.cmd = 554;
                                break;
                            case "THERMOSTAT_FAN_MODE_GET":
                            case 555:
                                message.cmd = 555;
                                break;
                            case "THERMOSTAT_FAN_MODE_REPORT":
                            case 556:
                                message.cmd = 556;
                                break;
                            case "THERMOSTAT_FAN_MODE_SET":
                            case 557:
                                message.cmd = 557;
                                break;
                            case "THERMOSTAT_FAN_MODE_SUPPORTED_GET":
                            case 558:
                                message.cmd = 558;
                                break;
                            case "THERMOSTAT_FAN_MODE_SUPPORTED_REPORT":
                            case 559:
                                message.cmd = 559;
                                break;
                            case "THERMOSTAT_FAN_STATE_GET":
                            case 560:
                                message.cmd = 560;
                                break;
                            case "THERMOSTAT_FAN_STATE_REPORT":
                            case 561:
                                message.cmd = 561;
                                break;
                            case "THERMOSTAT_HEATING_MODE_GET":
                            case 562:
                                message.cmd = 562;
                                break;
                            case "THERMOSTAT_HEATING_MODE_REPORT":
                            case 563:
                                message.cmd = 563;
                                break;
                            case "THERMOSTAT_HEATING_MODE_SET":
                            case 564:
                                message.cmd = 564;
                                break;
                            case "THERMOSTAT_HEATING_RELAY_STATUS_GET":
                            case 565:
                                message.cmd = 565;
                                break;
                            case "THERMOSTAT_HEATING_RELAY_STATUS_REPORT":
                            case 566:
                                message.cmd = 566;
                                break;
                            case "THERMOSTAT_HEATING_SETPOINT_GET":
                            case 567:
                                message.cmd = 567;
                                break;
                            case "THERMOSTAT_HEATING_SETPOINT_REPORT":
                            case 568:
                                message.cmd = 568;
                                break;
                            case "THERMOSTAT_HEATING_SETPOINT_SET":
                            case 569:
                                message.cmd = 569;
                                break;
                            case "THERMOSTAT_HEATING_STATUS_GET":
                            case 570:
                                message.cmd = 570;
                                break;
                            case "THERMOSTAT_HEATING_STATUS_REPORT":
                            case 571:
                                message.cmd = 571;
                                break;
                            case "THERMOSTAT_HEATING_STATUS_SET":
                            case 572:
                                message.cmd = 572;
                                break;
                            case "THERMOSTAT_HEATING_TIMED_OFF_SET":
                            case 573:
                                message.cmd = 573;
                                break;
                            case "THERMOSTAT_MODE_GET":
                            case 574:
                                message.cmd = 574;
                                break;
                            case "THERMOSTAT_MODE_REPORT":
                            case 575:
                                message.cmd = 575;
                                break;
                            case "THERMOSTAT_MODE_SET":
                            case 576:
                                message.cmd = 576;
                                break;
                            case "THERMOSTAT_MODE_SUPPORTED_GET":
                            case 577:
                                message.cmd = 577;
                                break;
                            case "THERMOSTAT_MODE_SUPPORTED_REPORT":
                            case 578:
                                message.cmd = 578;
                                break;
                            case "THERMOSTAT_OPERATING_STATE_GET":
                            case 579:
                                message.cmd = 579;
                                break;
                            case "THERMOSTAT_OPERATING_STATE_REPORT":
                            case 580:
                                message.cmd = 580;
                                break;
                            case "THERMOSTAT_SETBACK_GET":
                            case 581:
                                message.cmd = 581;
                                break;
                            case "THERMOSTAT_SETBACK_REPORT":
                            case 582:
                                message.cmd = 582;
                                break;
                            case "THERMOSTAT_SETBACK_SET":
                            case 583:
                                message.cmd = 583;
                                break;
                            case "THERMOSTAT_SETPOINT_GET":
                            case 584:
                                message.cmd = 584;
                                break;
                            case "THERMOSTAT_SETPOINT_REPORT":
                            case 585:
                                message.cmd = 585;
                                break;
                            case "THERMOSTAT_SETPOINT_SET":
                            case 586:
                                message.cmd = 586;
                                break;
                            case "THERMOSTAT_SETPOINT_SUPPORTED_GET":
                            case 587:
                                message.cmd = 587;
                                break;
                            case "THERMOSTAT_SETPOINT_SUPPORTED_REPORT":
                            case 588:
                                message.cmd = 588;
                                break;
                            case "TIME_GET":
                            case 589:
                                message.cmd = 589;
                                break;
                            case "TIME_PARAMETERS_GET":
                            case 590:
                                message.cmd = 590;
                                break;
                            case "TIME_PARAMETERS_REPORT":
                            case 591:
                                message.cmd = 591;
                                break;
                            case "TIME_PARAMETERS_SET":
                            case 592:
                                message.cmd = 592;
                                break;
                            case "TIME_REPORT":
                            case 593:
                                message.cmd = 593;
                                break;
                            case "TRANSFER_END":
                            case 594:
                                message.cmd = 594;
                                break;
                            case "TRANSFER_NEW_PRIMARY_COMPLETE":
                            case 595:
                                message.cmd = 595;
                                break;
                            case "TRANSFER_NODE_INFO":
                            case 596:
                                message.cmd = 596;
                                break;
                            case "TRANSFER_PRESENTATION":
                            case 597:
                                message.cmd = 597;
                                break;
                            case "TRANSFER_RANGE_INFO":
                            case 598:
                                message.cmd = 598;
                                break;
                            case "UNSOLICITED_DESTINATION_GET":
                            case 599:
                                message.cmd = 599;
                                break;
                            case "UNSOLICITED_DESTINATION_REPORT":
                            case 600:
                                message.cmd = 600;
                                break;
                            case "UNSOLICITED_DESTINATION_SET":
                            case 601:
                                message.cmd = 601;
                                break;
                            case "USERS_NUMBER_GET":
                            case 602:
                                message.cmd = 602;
                                break;
                            case "USERS_NUMBER_REPORT":
                            case 603:
                                message.cmd = 603;
                                break;
                            case "USER_CODE_GET":
                            case 604:
                                message.cmd = 604;
                                break;
                            case "USER_CODE_REPORT":
                            case 605:
                                message.cmd = 605;
                                break;
                            case "USER_CODE_SET":
                            case 606:
                                message.cmd = 606;
                                break;
                            case "VERSION_COMMAND_CLASS_GET":
                            case 607:
                                message.cmd = 607;
                                break;
                            case "VERSION_COMMAND_CLASS_REPORT":
                            case 608:
                                message.cmd = 608;
                                break;
                            case "VERSION_GET":
                            case 609:
                                message.cmd = 609;
                                break;
                            case "VERSION_REPORT":
                            case 610:
                                message.cmd = 610;
                                break;
                            case "WAKE_UP_INTERVAL_GET":
                            case 611:
                                message.cmd = 611;
                                break;
                            case "WAKE_UP_INTERVAL_REPORT":
                            case 612:
                                message.cmd = 612;
                                break;
                            case "WAKE_UP_INTERVAL_SET":
                            case 613:
                                message.cmd = 613;
                                break;
                            case "WAKE_UP_NOTIFICATION":
                            case 614:
                                message.cmd = 614;
                                break;
                            case "WAKE_UP_NO_MORE_INFORMATION":
                            case 615:
                                message.cmd = 615;
                                break;
                            case "WINDOW_COVERING_GET":
                            case 616:
                                message.cmd = 616;
                                break;
                            case "WINDOW_COVERING_REPORT":
                            case 617:
                                message.cmd = 617;
                                break;
                            case "WINDOW_COVERING_SET":
                            case 618:
                                message.cmd = 618;
                                break;
                            case "WINDOW_COVERING_START_LEVEL_CHANGE":
                            case 619:
                                message.cmd = 619;
                                break;
                            case "WINDOW_COVERING_STOP_LEVEL_CHANGE":
                            case 620:
                                message.cmd = 620;
                                break;
                            case "WINDOW_COVERING_SUPPORTED_GET":
                            case 621:
                                message.cmd = 621;
                                break;
                            case "WINDOW_COVERING_SUPPORTED_REPORT":
                            case 622:
                                message.cmd = 622;
                                break;
                            case "ZIP_INV_NODE_SOLICITATION":
                            case 623:
                                message.cmd = 623;
                                break;
                            case "ZIP_NAMING_LOCATION_GET":
                            case 624:
                                message.cmd = 624;
                                break;
                            case "ZIP_NAMING_LOCATION_REPORT":
                            case 625:
                                message.cmd = 625;
                                break;
                            case "ZIP_NAMING_LOCATION_SET":
                            case 626:
                                message.cmd = 626;
                                break;
                            case "ZIP_NAMING_NAME_GET":
                            case 627:
                                message.cmd = 627;
                                break;
                            case "ZIP_NAMING_NAME_REPORT":
                            case 628:
                                message.cmd = 628;
                                break;
                            case "ZIP_NAMING_NAME_SET":
                            case 629:
                                message.cmd = 629;
                                break;
                            case "ZIP_NODE_ADVERTISEMENT":
                            case 630:
                                message.cmd = 630;
                                break;
                            case "ZIP_NODE_SOLICITATION":
                            case 631:
                                message.cmd = 631;
                                break;
                            case "ZWAVEPLUS_INFO_GET":
                            case 632:
                                message.cmd = 632;
                                break;
                            case "ZWAVEPLUS_INFO_REPORT":
                            case 633:
                                message.cmd = 633;
                                break;
                            case "ZWAVE_CMD_NOP":
                            case 634:
                                message.cmd = 634;
                                break;
                            case "ZWAVE_CMD_RESERVE_NODE_IDS":
                            case 635:
                                message.cmd = 635;
                                break;
                            }
                            if (object.param) {
                                if (!Array.isArray(object.param))
                                    throw TypeError(".matrix_io.malos.v1.comm.ZWaveMsg.ZWaveCommandInfo.param: array expected");
                                message.param = [];
                                for (var i = 0; i < object.param.length; ++i)
                                    message.param[i] = String(object.param[i]);
                            }
                            return message;
                        };

                        /**
                         * Creates a plain object from a ZWaveCommandInfo message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof matrix_io.malos.v1.comm.ZWaveMsg.ZWaveCommandInfo
                         * @static
                         * @param {matrix_io.malos.v1.comm.ZWaveMsg.ZWaveCommandInfo} message ZWaveCommandInfo
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ZWaveCommandInfo.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.param = [];
                            if (options.defaults)
                                object.cmd = options.enums === String ? "CMD_UNDEFINED" : 0;
                            if (message.cmd != null && message.hasOwnProperty("cmd"))
                                object.cmd = options.enums === String ? $root.matrix_io.malos.v1.comm.ZWaveCmdType[message.cmd] : message.cmd;
                            if (message.param && message.param.length) {
                                object.param = [];
                                for (var j = 0; j < message.param.length; ++j)
                                    object.param[j] = message.param[j];
                            }
                            return object;
                        };

                        /**
                         * Converts this ZWaveCommandInfo to JSON.
                         * @function toJSON
                         * @memberof matrix_io.malos.v1.comm.ZWaveMsg.ZWaveCommandInfo
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ZWaveCommandInfo.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return ZWaveCommandInfo;
                    })();

                    ZWaveMsg.ZWaveClassInfo = (function() {

                        /**
                         * Properties of a ZWaveClassInfo.
                         * @memberof matrix_io.malos.v1.comm.ZWaveMsg
                         * @interface IZWaveClassInfo
                         * @property {matrix_io.malos.v1.comm.ZWaveClassType|null} [zwaveClass] ZWaveClassInfo zwaveClass
                         * @property {Array.<matrix_io.malos.v1.comm.ZWaveMsg.IZWaveCommandInfo>|null} [command] ZWaveClassInfo command
                         */

                        /**
                         * Constructs a new ZWaveClassInfo.
                         * @memberof matrix_io.malos.v1.comm.ZWaveMsg
                         * @classdesc Represents a ZWaveClassInfo.
                         * @implements IZWaveClassInfo
                         * @constructor
                         * @param {matrix_io.malos.v1.comm.ZWaveMsg.IZWaveClassInfo=} [properties] Properties to set
                         */
                        function ZWaveClassInfo(properties) {
                            this.command = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * ZWaveClassInfo zwaveClass.
                         * @member {matrix_io.malos.v1.comm.ZWaveClassType} zwaveClass
                         * @memberof matrix_io.malos.v1.comm.ZWaveMsg.ZWaveClassInfo
                         * @instance
                         */
                        ZWaveClassInfo.prototype.zwaveClass = 0;

                        /**
                         * ZWaveClassInfo command.
                         * @member {Array.<matrix_io.malos.v1.comm.ZWaveMsg.IZWaveCommandInfo>} command
                         * @memberof matrix_io.malos.v1.comm.ZWaveMsg.ZWaveClassInfo
                         * @instance
                         */
                        ZWaveClassInfo.prototype.command = $util.emptyArray;

                        /**
                         * Creates a new ZWaveClassInfo instance using the specified properties.
                         * @function create
                         * @memberof matrix_io.malos.v1.comm.ZWaveMsg.ZWaveClassInfo
                         * @static
                         * @param {matrix_io.malos.v1.comm.ZWaveMsg.IZWaveClassInfo=} [properties] Properties to set
                         * @returns {matrix_io.malos.v1.comm.ZWaveMsg.ZWaveClassInfo} ZWaveClassInfo instance
                         */
                        ZWaveClassInfo.create = function create(properties) {
                            return new ZWaveClassInfo(properties);
                        };

                        /**
                         * Encodes the specified ZWaveClassInfo message. Does not implicitly {@link matrix_io.malos.v1.comm.ZWaveMsg.ZWaveClassInfo.verify|verify} messages.
                         * @function encode
                         * @memberof matrix_io.malos.v1.comm.ZWaveMsg.ZWaveClassInfo
                         * @static
                         * @param {matrix_io.malos.v1.comm.ZWaveMsg.IZWaveClassInfo} message ZWaveClassInfo message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ZWaveClassInfo.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.zwaveClass != null && message.hasOwnProperty("zwaveClass"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.zwaveClass);
                            if (message.command != null && message.command.length)
                                for (var i = 0; i < message.command.length; ++i)
                                    $root.matrix_io.malos.v1.comm.ZWaveMsg.ZWaveCommandInfo.encode(message.command[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            return writer;
                        };

                        /**
                         * Encodes the specified ZWaveClassInfo message, length delimited. Does not implicitly {@link matrix_io.malos.v1.comm.ZWaveMsg.ZWaveClassInfo.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof matrix_io.malos.v1.comm.ZWaveMsg.ZWaveClassInfo
                         * @static
                         * @param {matrix_io.malos.v1.comm.ZWaveMsg.IZWaveClassInfo} message ZWaveClassInfo message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ZWaveClassInfo.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a ZWaveClassInfo message from the specified reader or buffer.
                         * @function decode
                         * @memberof matrix_io.malos.v1.comm.ZWaveMsg.ZWaveClassInfo
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {matrix_io.malos.v1.comm.ZWaveMsg.ZWaveClassInfo} ZWaveClassInfo
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ZWaveClassInfo.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.malos.v1.comm.ZWaveMsg.ZWaveClassInfo();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.zwaveClass = reader.int32();
                                    break;
                                case 2:
                                    if (!(message.command && message.command.length))
                                        message.command = [];
                                    message.command.push($root.matrix_io.malos.v1.comm.ZWaveMsg.ZWaveCommandInfo.decode(reader, reader.uint32()));
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a ZWaveClassInfo message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof matrix_io.malos.v1.comm.ZWaveMsg.ZWaveClassInfo
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {matrix_io.malos.v1.comm.ZWaveMsg.ZWaveClassInfo} ZWaveClassInfo
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ZWaveClassInfo.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a ZWaveClassInfo message.
                         * @function verify
                         * @memberof matrix_io.malos.v1.comm.ZWaveMsg.ZWaveClassInfo
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ZWaveClassInfo.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.zwaveClass != null && message.hasOwnProperty("zwaveClass"))
                                switch (message.zwaveClass) {
                                default:
                                    return "zwaveClass: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 32:
                                case 33:
                                case 34:
                                case 35:
                                case 36:
                                case 37:
                                case 38:
                                case 39:
                                case 40:
                                case 41:
                                case 42:
                                case 43:
                                case 44:
                                case 45:
                                case 46:
                                case 47:
                                case 48:
                                case 49:
                                case 50:
                                case 51:
                                case 52:
                                case 53:
                                case 54:
                                case 55:
                                case 56:
                                case 57:
                                case 58:
                                case 59:
                                case 60:
                                case 61:
                                case 62:
                                case 63:
                                case 64:
                                case 65:
                                case 66:
                                case 67:
                                case 68:
                                case 69:
                                case 70:
                                case 71:
                                case 72:
                                case 73:
                                case 74:
                                case 75:
                                case 76:
                                case 77:
                                case 78:
                                case 79:
                                case 80:
                                case 81:
                                case 82:
                                case 83:
                                case 84:
                                case 85:
                                case 86:
                                case 87:
                                case 88:
                                case 89:
                                case 90:
                                case 91:
                                case 92:
                                case 93:
                                case 94:
                                case 95:
                                case 96:
                                case 96:
                                case 97:
                                case 98:
                                case 99:
                                case 100:
                                case 101:
                                case 102:
                                case 103:
                                case 104:
                                case 105:
                                case 106:
                                case 107:
                                case 108:
                                case 109:
                                case 110:
                                case 111:
                                case 112:
                                case 113:
                                case 113:
                                case 114:
                                case 115:
                                case 116:
                                case 117:
                                case 118:
                                case 119:
                                case 122:
                                case 123:
                                case 124:
                                case 125:
                                case 128:
                                case 129:
                                case 130:
                                case 132:
                                case 133:
                                case 134:
                                case 135:
                                case 136:
                                case 137:
                                case 138:
                                case 139:
                                case 140:
                                case 142:
                                case 142:
                                case 143:
                                case 144:
                                case 145:
                                case 146:
                                case 147:
                                case 148:
                                case 149:
                                case 150:
                                case 151:
                                case 152:
                                case 153:
                                case 154:
                                case 155:
                                case 156:
                                case 157:
                                case 158:
                                case 159:
                                case 239:
                                case 240:
                                    break;
                                }
                            if (message.command != null && message.hasOwnProperty("command")) {
                                if (!Array.isArray(message.command))
                                    return "command: array expected";
                                for (var i = 0; i < message.command.length; ++i) {
                                    var error = $root.matrix_io.malos.v1.comm.ZWaveMsg.ZWaveCommandInfo.verify(message.command[i]);
                                    if (error)
                                        return "command." + error;
                                }
                            }
                            return null;
                        };

                        /**
                         * Creates a ZWaveClassInfo message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof matrix_io.malos.v1.comm.ZWaveMsg.ZWaveClassInfo
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {matrix_io.malos.v1.comm.ZWaveMsg.ZWaveClassInfo} ZWaveClassInfo
                         */
                        ZWaveClassInfo.fromObject = function fromObject(object) {
                            if (object instanceof $root.matrix_io.malos.v1.comm.ZWaveMsg.ZWaveClassInfo)
                                return object;
                            var message = new $root.matrix_io.malos.v1.comm.ZWaveMsg.ZWaveClassInfo();
                            switch (object.zwaveClass) {
                            case "COMMAND_CLASS_NO_OPERATION":
                            case 0:
                                message.zwaveClass = 0;
                                break;
                            case "ZWAVE_CMD_CLASS":
                            case 1:
                                message.zwaveClass = 1;
                                break;
                            case "COMMAND_CLASS_ZENSOR_NET":
                            case 2:
                                message.zwaveClass = 2;
                                break;
                            case "COMMAND_CLASS_BASIC":
                            case 32:
                                message.zwaveClass = 32;
                                break;
                            case "COMMAND_CLASS_CONTROLLER_REPLICATION":
                            case 33:
                                message.zwaveClass = 33;
                                break;
                            case "COMMAND_CLASS_APPLICATION_STATUS":
                            case 34:
                                message.zwaveClass = 34;
                                break;
                            case "COMMAND_CLASS_ZIP":
                            case 35:
                                message.zwaveClass = 35;
                                break;
                            case "COMMAND_CLASS_SECURITY_PANEL_MODE":
                            case 36:
                                message.zwaveClass = 36;
                                break;
                            case "COMMAND_CLASS_SWITCH_BINARY":
                            case 37:
                                message.zwaveClass = 37;
                                break;
                            case "COMMAND_CLASS_SWITCH_MULTILEVEL":
                            case 38:
                                message.zwaveClass = 38;
                                break;
                            case "COMMAND_CLASS_SWITCH_ALL":
                            case 39:
                                message.zwaveClass = 39;
                                break;
                            case "COMMAND_CLASS_SWITCH_TOGGLE_BINARY":
                            case 40:
                                message.zwaveClass = 40;
                                break;
                            case "COMMAND_CLASS_SWITCH_TOGGLE_MULTILEVEL":
                            case 41:
                                message.zwaveClass = 41;
                                break;
                            case "COMMAND_CLASS_CHIMNEY_FAN":
                            case 42:
                                message.zwaveClass = 42;
                                break;
                            case "COMMAND_CLASS_SCENE_ACTIVATION":
                            case 43:
                                message.zwaveClass = 43;
                                break;
                            case "COMMAND_CLASS_SCENE_ACTUATOR_CONF":
                            case 44:
                                message.zwaveClass = 44;
                                break;
                            case "COMMAND_CLASS_SCENE_CONTROLLER_CONF":
                            case 45:
                                message.zwaveClass = 45;
                                break;
                            case "COMMAND_CLASS_SECURITY_PANEL_ZONE":
                            case 46:
                                message.zwaveClass = 46;
                                break;
                            case "COMMAND_CLASS_SECURITY_PANEL_ZONE_SENSOR":
                            case 47:
                                message.zwaveClass = 47;
                                break;
                            case "COMMAND_CLASS_SENSOR_BINARY":
                            case 48:
                                message.zwaveClass = 48;
                                break;
                            case "COMMAND_CLASS_SENSOR_MULTILEVEL":
                            case 49:
                                message.zwaveClass = 49;
                                break;
                            case "COMMAND_CLASS_METER":
                            case 50:
                                message.zwaveClass = 50;
                                break;
                            case "COMMAND_CLASS_SWITCH_COLOR":
                            case 51:
                                message.zwaveClass = 51;
                                break;
                            case "COMMAND_CLASS_NETWORK_MANAGEMENT_INCLUSION":
                            case 52:
                                message.zwaveClass = 52;
                                break;
                            case "COMMAND_CLASS_METER_PULSE":
                            case 53:
                                message.zwaveClass = 53;
                                break;
                            case "COMMAND_CLASS_BASIC_TARIFF_INFO":
                            case 54:
                                message.zwaveClass = 54;
                                break;
                            case "COMMAND_CLASS_HRV_STATUS":
                            case 55:
                                message.zwaveClass = 55;
                                break;
                            case "COMMAND_CLASS_THERMOSTAT_HEATING":
                            case 56:
                                message.zwaveClass = 56;
                                break;
                            case "COMMAND_CLASS_HRV_CONTROL":
                            case 57:
                                message.zwaveClass = 57;
                                break;
                            case "COMMAND_CLASS_DCP_CONFIG":
                            case 58:
                                message.zwaveClass = 58;
                                break;
                            case "COMMAND_CLASS_DCP_MONITOR":
                            case 59:
                                message.zwaveClass = 59;
                                break;
                            case "COMMAND_CLASS_METER_TBL_CONFIG":
                            case 60:
                                message.zwaveClass = 60;
                                break;
                            case "COMMAND_CLASS_METER_TBL_MONITOR":
                            case 61:
                                message.zwaveClass = 61;
                                break;
                            case "COMMAND_CLASS_METER_TBL_PUSH":
                            case 62:
                                message.zwaveClass = 62;
                                break;
                            case "COMMAND_CLASS_PREPAYMENT":
                            case 63:
                                message.zwaveClass = 63;
                                break;
                            case "COMMAND_CLASS_THERMOSTAT_MODE":
                            case 64:
                                message.zwaveClass = 64;
                                break;
                            case "COMMAND_CLASS_PREPAYMENT_ENCAPSULATION":
                            case 65:
                                message.zwaveClass = 65;
                                break;
                            case "COMMAND_CLASS_THERMOSTAT_OPERATING_STATE":
                            case 66:
                                message.zwaveClass = 66;
                                break;
                            case "COMMAND_CLASS_THERMOSTAT_SETPOINT":
                            case 67:
                                message.zwaveClass = 67;
                                break;
                            case "COMMAND_CLASS_THERMOSTAT_FAN_MODE":
                            case 68:
                                message.zwaveClass = 68;
                                break;
                            case "COMMAND_CLASS_THERMOSTAT_FAN_STATE":
                            case 69:
                                message.zwaveClass = 69;
                                break;
                            case "COMMAND_CLASS_CLIMATE_CONTROL_SCHEDULE":
                            case 70:
                                message.zwaveClass = 70;
                                break;
                            case "COMMAND_CLASS_THERMOSTAT_SETBACK":
                            case 71:
                                message.zwaveClass = 71;
                                break;
                            case "COMMAND_CLASS_RATE_TBL_CONFIG":
                            case 72:
                                message.zwaveClass = 72;
                                break;
                            case "COMMAND_CLASS_RATE_TBL_MONITOR":
                            case 73:
                                message.zwaveClass = 73;
                                break;
                            case "COMMAND_CLASS_TARIFF_CONFIG":
                            case 74:
                                message.zwaveClass = 74;
                                break;
                            case "COMMAND_CLASS_TARIFF_TBL_MONITOR":
                            case 75:
                                message.zwaveClass = 75;
                                break;
                            case "COMMAND_CLASS_DOOR_LOCK_LOGGING":
                            case 76:
                                message.zwaveClass = 76;
                                break;
                            case "COMMAND_CLASS_NETWORK_MANAGEMENT_BASIC":
                            case 77:
                                message.zwaveClass = 77;
                                break;
                            case "COMMAND_CLASS_SCHEDULE_ENTRY_LOCK":
                            case 78:
                                message.zwaveClass = 78;
                                break;
                            case "COMMAND_CLASS_ZIP_6LOWPAN":
                            case 79:
                                message.zwaveClass = 79;
                                break;
                            case "COMMAND_CLASS_BASIC_WINDOW_COVERING":
                            case 80:
                                message.zwaveClass = 80;
                                break;
                            case "COMMAND_CLASS_MTP_WINDOW_COVERING":
                            case 81:
                                message.zwaveClass = 81;
                                break;
                            case "COMMAND_CLASS_NETWORK_MANAGEMENT_PROXY":
                            case 82:
                                message.zwaveClass = 82;
                                break;
                            case "COMMAND_CLASS_SCHEDULE":
                            case 83:
                                message.zwaveClass = 83;
                                break;
                            case "COMMAND_CLASS_NETWORK_MANAGEMENT_PRIMARY":
                            case 84:
                                message.zwaveClass = 84;
                                break;
                            case "COMMAND_CLASS_TRANSPORT_SERVICE":
                            case 85:
                                message.zwaveClass = 85;
                                break;
                            case "COMMAND_CLASS_CRC_16_ENCAP":
                            case 86:
                                message.zwaveClass = 86;
                                break;
                            case "COMMAND_CLASS_APPLICATION_CAPABILITY":
                            case 87:
                                message.zwaveClass = 87;
                                break;
                            case "COMMAND_CLASS_ZIP_ND":
                            case 88:
                                message.zwaveClass = 88;
                                break;
                            case "COMMAND_CLASS_ASSOCIATION_GRP_INFO":
                            case 89:
                                message.zwaveClass = 89;
                                break;
                            case "COMMAND_CLASS_DEVICE_RESET_LOCALLY":
                            case 90:
                                message.zwaveClass = 90;
                                break;
                            case "COMMAND_CLASS_CENTRAL_SCENE":
                            case 91:
                                message.zwaveClass = 91;
                                break;
                            case "COMMAND_CLASS_IP_ASSOCIATION":
                            case 92:
                                message.zwaveClass = 92;
                                break;
                            case "COMMAND_CLASS_ANTITHEFT":
                            case 93:
                                message.zwaveClass = 93;
                                break;
                            case "COMMAND_CLASS_ZWAVEPLUS_INFO":
                            case 94:
                                message.zwaveClass = 94;
                                break;
                            case "COMMAND_CLASS_ZIP_GATEWAY":
                            case 95:
                                message.zwaveClass = 95;
                                break;
                            case "COMMAND_CLASS_MULTI_CHANNEL":
                            case 96:
                                message.zwaveClass = 96;
                                break;
                            case "COMMAND_CLASS_MULTI_INSTANCE":
                            case 96:
                                message.zwaveClass = 96;
                                break;
                            case "COMMAND_CLASS_ZIP_PORTAL":
                            case 97:
                                message.zwaveClass = 97;
                                break;
                            case "COMMAND_CLASS_DOOR_LOCK":
                            case 98:
                                message.zwaveClass = 98;
                                break;
                            case "COMMAND_CLASS_USER_CODE":
                            case 99:
                                message.zwaveClass = 99;
                                break;
                            case "COMMAND_CLASS_HUMIDITY_CONTROL_SETPOINT":
                            case 100:
                                message.zwaveClass = 100;
                                break;
                            case "COMMAND_CLASS_DMX":
                            case 101:
                                message.zwaveClass = 101;
                                break;
                            case "COMMAND_CLASS_BARRIER_OPERATOR":
                            case 102:
                                message.zwaveClass = 102;
                                break;
                            case "COMMAND_CLASS_NETWORK_MANAGEMENT_INSTALLATION_MAINTENANCE":
                            case 103:
                                message.zwaveClass = 103;
                                break;
                            case "COMMAND_CLASS_ZIP_NAMING":
                            case 104:
                                message.zwaveClass = 104;
                                break;
                            case "COMMAND_CLASS_MAILBOX":
                            case 105:
                                message.zwaveClass = 105;
                                break;
                            case "COMMAND_CLASS_WINDOW_COVERING":
                            case 106:
                                message.zwaveClass = 106;
                                break;
                            case "COMMAND_CLASS_IRRIGATION":
                            case 107:
                                message.zwaveClass = 107;
                                break;
                            case "COMMAND_CLASS_SUPERVISION":
                            case 108:
                                message.zwaveClass = 108;
                                break;
                            case "COMMAND_CLASS_HUMIDITY_CONTROL_MODE":
                            case 109:
                                message.zwaveClass = 109;
                                break;
                            case "COMMAND_CLASS_HUMIDITY_CONTROL_OPERATING_STATE":
                            case 110:
                                message.zwaveClass = 110;
                                break;
                            case "COMMAND_CLASS_ENTRY_CONTROL":
                            case 111:
                                message.zwaveClass = 111;
                                break;
                            case "COMMAND_CLASS_CONFIGURATION":
                            case 112:
                                message.zwaveClass = 112;
                                break;
                            case "COMMAND_CLASS_ALARM":
                            case 113:
                                message.zwaveClass = 113;
                                break;
                            case "COMMAND_CLASS_NOTIFICATION":
                            case 113:
                                message.zwaveClass = 113;
                                break;
                            case "COMMAND_CLASS_MANUFACTURER_SPECIFIC":
                            case 114:
                                message.zwaveClass = 114;
                                break;
                            case "COMMAND_CLASS_POWERLEVEL":
                            case 115:
                                message.zwaveClass = 115;
                                break;
                            case "COMMAND_CLASS_INCLUSION_CONTROLLER":
                            case 116:
                                message.zwaveClass = 116;
                                break;
                            case "COMMAND_CLASS_PROTECTION":
                            case 117:
                                message.zwaveClass = 117;
                                break;
                            case "COMMAND_CLASS_LOCK":
                            case 118:
                                message.zwaveClass = 118;
                                break;
                            case "COMMAND_CLASS_NODE_NAMING":
                            case 119:
                                message.zwaveClass = 119;
                                break;
                            case "COMMAND_CLASS_FIRMWARE_UPDATE_MD":
                            case 122:
                                message.zwaveClass = 122;
                                break;
                            case "COMMAND_CLASS_GROUPING_NAME":
                            case 123:
                                message.zwaveClass = 123;
                                break;
                            case "COMMAND_CLASS_REMOTE_ASSOCIATION_ACTIVATE":
                            case 124:
                                message.zwaveClass = 124;
                                break;
                            case "COMMAND_CLASS_REMOTE_ASSOCIATION":
                            case 125:
                                message.zwaveClass = 125;
                                break;
                            case "COMMAND_CLASS_BATTERY":
                            case 128:
                                message.zwaveClass = 128;
                                break;
                            case "COMMAND_CLASS_CLOCK":
                            case 129:
                                message.zwaveClass = 129;
                                break;
                            case "COMMAND_CLASS_HAIL":
                            case 130:
                                message.zwaveClass = 130;
                                break;
                            case "COMMAND_CLASS_WAKE_UP":
                            case 132:
                                message.zwaveClass = 132;
                                break;
                            case "COMMAND_CLASS_ASSOCIATION":
                            case 133:
                                message.zwaveClass = 133;
                                break;
                            case "COMMAND_CLASS_VERSION":
                            case 134:
                                message.zwaveClass = 134;
                                break;
                            case "COMMAND_CLASS_INDICATOR":
                            case 135:
                                message.zwaveClass = 135;
                                break;
                            case "COMMAND_CLASS_PROPRIETARY":
                            case 136:
                                message.zwaveClass = 136;
                                break;
                            case "COMMAND_CLASS_LANGUAGE":
                            case 137:
                                message.zwaveClass = 137;
                                break;
                            case "COMMAND_CLASS_TIME":
                            case 138:
                                message.zwaveClass = 138;
                                break;
                            case "COMMAND_CLASS_TIME_PARAMETERS":
                            case 139:
                                message.zwaveClass = 139;
                                break;
                            case "COMMAND_CLASS_GEOGRAPHIC_LOCATION":
                            case 140:
                                message.zwaveClass = 140;
                                break;
                            case "COMMAND_CLASS_MULTI_CHANNEL_ASSOCIATION":
                            case 142:
                                message.zwaveClass = 142;
                                break;
                            case "COMMAND_CLASS_MULTI_INSTANCE_ASSOCIATION":
                            case 142:
                                message.zwaveClass = 142;
                                break;
                            case "COMMAND_CLASS_MULTI_CMD":
                            case 143:
                                message.zwaveClass = 143;
                                break;
                            case "COMMAND_CLASS_ENERGY_PRODUCTION":
                            case 144:
                                message.zwaveClass = 144;
                                break;
                            case "COMMAND_CLASS_MANUFACTURER_PROPRIETARY":
                            case 145:
                                message.zwaveClass = 145;
                                break;
                            case "COMMAND_CLASS_SCREEN_MD":
                            case 146:
                                message.zwaveClass = 146;
                                break;
                            case "COMMAND_CLASS_SCREEN_ATTRIBUTES":
                            case 147:
                                message.zwaveClass = 147;
                                break;
                            case "COMMAND_CLASS_SIMPLE_AV_CONTROL":
                            case 148:
                                message.zwaveClass = 148;
                                break;
                            case "COMMAND_CLASS_AV_CONTENT_DIRECTORY_MD":
                            case 149:
                                message.zwaveClass = 149;
                                break;
                            case "COMMAND_CLASS_AV_RENDERER_STATUS":
                            case 150:
                                message.zwaveClass = 150;
                                break;
                            case "COMMAND_CLASS_AV_CONTENT_SEARCH_MD":
                            case 151:
                                message.zwaveClass = 151;
                                break;
                            case "COMMAND_CLASS_SECURITY":
                            case 152:
                                message.zwaveClass = 152;
                                break;
                            case "COMMAND_CLASS_AV_TAGGING_MD":
                            case 153:
                                message.zwaveClass = 153;
                                break;
                            case "COMMAND_CLASS_IP_CONFIGURATION":
                            case 154:
                                message.zwaveClass = 154;
                                break;
                            case "COMMAND_CLASS_ASSOCIATION_COMMAND_CONFIGURATION":
                            case 155:
                                message.zwaveClass = 155;
                                break;
                            case "COMMAND_CLASS_SENSOR_ALARM":
                            case 156:
                                message.zwaveClass = 156;
                                break;
                            case "COMMAND_CLASS_SILENCE_ALARM":
                            case 157:
                                message.zwaveClass = 157;
                                break;
                            case "COMMAND_CLASS_SENSOR_CONFIGURATION":
                            case 158:
                                message.zwaveClass = 158;
                                break;
                            case "COMMAND_CLASS_SECURITY_2":
                            case 159:
                                message.zwaveClass = 159;
                                break;
                            case "COMMAND_CLASS_MARK":
                            case 239:
                                message.zwaveClass = 239;
                                break;
                            case "COMMAND_CLASS_NON_INTEROPERABLE":
                            case 240:
                                message.zwaveClass = 240;
                                break;
                            }
                            if (object.command) {
                                if (!Array.isArray(object.command))
                                    throw TypeError(".matrix_io.malos.v1.comm.ZWaveMsg.ZWaveClassInfo.command: array expected");
                                message.command = [];
                                for (var i = 0; i < object.command.length; ++i) {
                                    if (typeof object.command[i] !== "object")
                                        throw TypeError(".matrix_io.malos.v1.comm.ZWaveMsg.ZWaveClassInfo.command: object expected");
                                    message.command[i] = $root.matrix_io.malos.v1.comm.ZWaveMsg.ZWaveCommandInfo.fromObject(object.command[i]);
                                }
                            }
                            return message;
                        };

                        /**
                         * Creates a plain object from a ZWaveClassInfo message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof matrix_io.malos.v1.comm.ZWaveMsg.ZWaveClassInfo
                         * @static
                         * @param {matrix_io.malos.v1.comm.ZWaveMsg.ZWaveClassInfo} message ZWaveClassInfo
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ZWaveClassInfo.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.command = [];
                            if (options.defaults)
                                object.zwaveClass = options.enums === String ? "COMMAND_CLASS_NO_OPERATION" : 0;
                            if (message.zwaveClass != null && message.hasOwnProperty("zwaveClass"))
                                object.zwaveClass = options.enums === String ? $root.matrix_io.malos.v1.comm.ZWaveClassType[message.zwaveClass] : message.zwaveClass;
                            if (message.command && message.command.length) {
                                object.command = [];
                                for (var j = 0; j < message.command.length; ++j)
                                    object.command[j] = $root.matrix_io.malos.v1.comm.ZWaveMsg.ZWaveCommandInfo.toObject(message.command[j], options);
                            }
                            return object;
                        };

                        /**
                         * Converts this ZWaveClassInfo to JSON.
                         * @function toJSON
                         * @memberof matrix_io.malos.v1.comm.ZWaveMsg.ZWaveClassInfo
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ZWaveClassInfo.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return ZWaveClassInfo;
                    })();

                    ZWaveMsg.ZWaveNode = (function() {

                        /**
                         * Properties of a ZWaveNode.
                         * @memberof matrix_io.malos.v1.comm.ZWaveMsg
                         * @interface IZWaveNode
                         * @property {string|null} [serviceName] ZWaveNode serviceName
                         * @property {Array.<matrix_io.malos.v1.comm.ZWaveMsg.IZWaveClassInfo>|null} [zwaveClass] ZWaveNode zwaveClass
                         */

                        /**
                         * Constructs a new ZWaveNode.
                         * @memberof matrix_io.malos.v1.comm.ZWaveMsg
                         * @classdesc Represents a ZWaveNode.
                         * @implements IZWaveNode
                         * @constructor
                         * @param {matrix_io.malos.v1.comm.ZWaveMsg.IZWaveNode=} [properties] Properties to set
                         */
                        function ZWaveNode(properties) {
                            this.zwaveClass = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * ZWaveNode serviceName.
                         * @member {string} serviceName
                         * @memberof matrix_io.malos.v1.comm.ZWaveMsg.ZWaveNode
                         * @instance
                         */
                        ZWaveNode.prototype.serviceName = "";

                        /**
                         * ZWaveNode zwaveClass.
                         * @member {Array.<matrix_io.malos.v1.comm.ZWaveMsg.IZWaveClassInfo>} zwaveClass
                         * @memberof matrix_io.malos.v1.comm.ZWaveMsg.ZWaveNode
                         * @instance
                         */
                        ZWaveNode.prototype.zwaveClass = $util.emptyArray;

                        /**
                         * Creates a new ZWaveNode instance using the specified properties.
                         * @function create
                         * @memberof matrix_io.malos.v1.comm.ZWaveMsg.ZWaveNode
                         * @static
                         * @param {matrix_io.malos.v1.comm.ZWaveMsg.IZWaveNode=} [properties] Properties to set
                         * @returns {matrix_io.malos.v1.comm.ZWaveMsg.ZWaveNode} ZWaveNode instance
                         */
                        ZWaveNode.create = function create(properties) {
                            return new ZWaveNode(properties);
                        };

                        /**
                         * Encodes the specified ZWaveNode message. Does not implicitly {@link matrix_io.malos.v1.comm.ZWaveMsg.ZWaveNode.verify|verify} messages.
                         * @function encode
                         * @memberof matrix_io.malos.v1.comm.ZWaveMsg.ZWaveNode
                         * @static
                         * @param {matrix_io.malos.v1.comm.ZWaveMsg.IZWaveNode} message ZWaveNode message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ZWaveNode.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.serviceName != null && message.hasOwnProperty("serviceName"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.serviceName);
                            if (message.zwaveClass != null && message.zwaveClass.length)
                                for (var i = 0; i < message.zwaveClass.length; ++i)
                                    $root.matrix_io.malos.v1.comm.ZWaveMsg.ZWaveClassInfo.encode(message.zwaveClass[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            return writer;
                        };

                        /**
                         * Encodes the specified ZWaveNode message, length delimited. Does not implicitly {@link matrix_io.malos.v1.comm.ZWaveMsg.ZWaveNode.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof matrix_io.malos.v1.comm.ZWaveMsg.ZWaveNode
                         * @static
                         * @param {matrix_io.malos.v1.comm.ZWaveMsg.IZWaveNode} message ZWaveNode message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ZWaveNode.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a ZWaveNode message from the specified reader or buffer.
                         * @function decode
                         * @memberof matrix_io.malos.v1.comm.ZWaveMsg.ZWaveNode
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {matrix_io.malos.v1.comm.ZWaveMsg.ZWaveNode} ZWaveNode
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ZWaveNode.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.malos.v1.comm.ZWaveMsg.ZWaveNode();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.serviceName = reader.string();
                                    break;
                                case 2:
                                    if (!(message.zwaveClass && message.zwaveClass.length))
                                        message.zwaveClass = [];
                                    message.zwaveClass.push($root.matrix_io.malos.v1.comm.ZWaveMsg.ZWaveClassInfo.decode(reader, reader.uint32()));
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a ZWaveNode message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof matrix_io.malos.v1.comm.ZWaveMsg.ZWaveNode
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {matrix_io.malos.v1.comm.ZWaveMsg.ZWaveNode} ZWaveNode
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ZWaveNode.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a ZWaveNode message.
                         * @function verify
                         * @memberof matrix_io.malos.v1.comm.ZWaveMsg.ZWaveNode
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ZWaveNode.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.serviceName != null && message.hasOwnProperty("serviceName"))
                                if (!$util.isString(message.serviceName))
                                    return "serviceName: string expected";
                            if (message.zwaveClass != null && message.hasOwnProperty("zwaveClass")) {
                                if (!Array.isArray(message.zwaveClass))
                                    return "zwaveClass: array expected";
                                for (var i = 0; i < message.zwaveClass.length; ++i) {
                                    var error = $root.matrix_io.malos.v1.comm.ZWaveMsg.ZWaveClassInfo.verify(message.zwaveClass[i]);
                                    if (error)
                                        return "zwaveClass." + error;
                                }
                            }
                            return null;
                        };

                        /**
                         * Creates a ZWaveNode message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof matrix_io.malos.v1.comm.ZWaveMsg.ZWaveNode
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {matrix_io.malos.v1.comm.ZWaveMsg.ZWaveNode} ZWaveNode
                         */
                        ZWaveNode.fromObject = function fromObject(object) {
                            if (object instanceof $root.matrix_io.malos.v1.comm.ZWaveMsg.ZWaveNode)
                                return object;
                            var message = new $root.matrix_io.malos.v1.comm.ZWaveMsg.ZWaveNode();
                            if (object.serviceName != null)
                                message.serviceName = String(object.serviceName);
                            if (object.zwaveClass) {
                                if (!Array.isArray(object.zwaveClass))
                                    throw TypeError(".matrix_io.malos.v1.comm.ZWaveMsg.ZWaveNode.zwaveClass: array expected");
                                message.zwaveClass = [];
                                for (var i = 0; i < object.zwaveClass.length; ++i) {
                                    if (typeof object.zwaveClass[i] !== "object")
                                        throw TypeError(".matrix_io.malos.v1.comm.ZWaveMsg.ZWaveNode.zwaveClass: object expected");
                                    message.zwaveClass[i] = $root.matrix_io.malos.v1.comm.ZWaveMsg.ZWaveClassInfo.fromObject(object.zwaveClass[i]);
                                }
                            }
                            return message;
                        };

                        /**
                         * Creates a plain object from a ZWaveNode message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof matrix_io.malos.v1.comm.ZWaveMsg.ZWaveNode
                         * @static
                         * @param {matrix_io.malos.v1.comm.ZWaveMsg.ZWaveNode} message ZWaveNode
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ZWaveNode.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.zwaveClass = [];
                            if (options.defaults)
                                object.serviceName = "";
                            if (message.serviceName != null && message.hasOwnProperty("serviceName"))
                                object.serviceName = message.serviceName;
                            if (message.zwaveClass && message.zwaveClass.length) {
                                object.zwaveClass = [];
                                for (var j = 0; j < message.zwaveClass.length; ++j)
                                    object.zwaveClass[j] = $root.matrix_io.malos.v1.comm.ZWaveMsg.ZWaveClassInfo.toObject(message.zwaveClass[j], options);
                            }
                            return object;
                        };

                        /**
                         * Converts this ZWaveNode to JSON.
                         * @function toJSON
                         * @memberof matrix_io.malos.v1.comm.ZWaveMsg.ZWaveNode
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ZWaveNode.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return ZWaveNode;
                    })();

                    ZWaveMsg.ZWaveCommand = (function() {

                        /**
                         * Properties of a ZWaveCommand.
                         * @memberof matrix_io.malos.v1.comm.ZWaveMsg
                         * @interface IZWaveCommand
                         * @property {matrix_io.malos.v1.comm.ZWaveClassType|null} [zwclass] ZWaveCommand zwclass
                         * @property {matrix_io.malos.v1.comm.ZWaveCmdType|null} [cmd] ZWaveCommand cmd
                         * @property {Uint8Array|null} [params] ZWaveCommand params
                         */

                        /**
                         * Constructs a new ZWaveCommand.
                         * @memberof matrix_io.malos.v1.comm.ZWaveMsg
                         * @classdesc Represents a ZWaveCommand.
                         * @implements IZWaveCommand
                         * @constructor
                         * @param {matrix_io.malos.v1.comm.ZWaveMsg.IZWaveCommand=} [properties] Properties to set
                         */
                        function ZWaveCommand(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * ZWaveCommand zwclass.
                         * @member {matrix_io.malos.v1.comm.ZWaveClassType} zwclass
                         * @memberof matrix_io.malos.v1.comm.ZWaveMsg.ZWaveCommand
                         * @instance
                         */
                        ZWaveCommand.prototype.zwclass = 0;

                        /**
                         * ZWaveCommand cmd.
                         * @member {matrix_io.malos.v1.comm.ZWaveCmdType} cmd
                         * @memberof matrix_io.malos.v1.comm.ZWaveMsg.ZWaveCommand
                         * @instance
                         */
                        ZWaveCommand.prototype.cmd = 0;

                        /**
                         * ZWaveCommand params.
                         * @member {Uint8Array} params
                         * @memberof matrix_io.malos.v1.comm.ZWaveMsg.ZWaveCommand
                         * @instance
                         */
                        ZWaveCommand.prototype.params = $util.newBuffer([]);

                        /**
                         * Creates a new ZWaveCommand instance using the specified properties.
                         * @function create
                         * @memberof matrix_io.malos.v1.comm.ZWaveMsg.ZWaveCommand
                         * @static
                         * @param {matrix_io.malos.v1.comm.ZWaveMsg.IZWaveCommand=} [properties] Properties to set
                         * @returns {matrix_io.malos.v1.comm.ZWaveMsg.ZWaveCommand} ZWaveCommand instance
                         */
                        ZWaveCommand.create = function create(properties) {
                            return new ZWaveCommand(properties);
                        };

                        /**
                         * Encodes the specified ZWaveCommand message. Does not implicitly {@link matrix_io.malos.v1.comm.ZWaveMsg.ZWaveCommand.verify|verify} messages.
                         * @function encode
                         * @memberof matrix_io.malos.v1.comm.ZWaveMsg.ZWaveCommand
                         * @static
                         * @param {matrix_io.malos.v1.comm.ZWaveMsg.IZWaveCommand} message ZWaveCommand message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ZWaveCommand.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.zwclass != null && message.hasOwnProperty("zwclass"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.zwclass);
                            if (message.cmd != null && message.hasOwnProperty("cmd"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.cmd);
                            if (message.params != null && message.hasOwnProperty("params"))
                                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.params);
                            return writer;
                        };

                        /**
                         * Encodes the specified ZWaveCommand message, length delimited. Does not implicitly {@link matrix_io.malos.v1.comm.ZWaveMsg.ZWaveCommand.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof matrix_io.malos.v1.comm.ZWaveMsg.ZWaveCommand
                         * @static
                         * @param {matrix_io.malos.v1.comm.ZWaveMsg.IZWaveCommand} message ZWaveCommand message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ZWaveCommand.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a ZWaveCommand message from the specified reader or buffer.
                         * @function decode
                         * @memberof matrix_io.malos.v1.comm.ZWaveMsg.ZWaveCommand
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {matrix_io.malos.v1.comm.ZWaveMsg.ZWaveCommand} ZWaveCommand
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ZWaveCommand.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.malos.v1.comm.ZWaveMsg.ZWaveCommand();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.zwclass = reader.int32();
                                    break;
                                case 2:
                                    message.cmd = reader.int32();
                                    break;
                                case 3:
                                    message.params = reader.bytes();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a ZWaveCommand message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof matrix_io.malos.v1.comm.ZWaveMsg.ZWaveCommand
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {matrix_io.malos.v1.comm.ZWaveMsg.ZWaveCommand} ZWaveCommand
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ZWaveCommand.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a ZWaveCommand message.
                         * @function verify
                         * @memberof matrix_io.malos.v1.comm.ZWaveMsg.ZWaveCommand
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ZWaveCommand.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.zwclass != null && message.hasOwnProperty("zwclass"))
                                switch (message.zwclass) {
                                default:
                                    return "zwclass: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 32:
                                case 33:
                                case 34:
                                case 35:
                                case 36:
                                case 37:
                                case 38:
                                case 39:
                                case 40:
                                case 41:
                                case 42:
                                case 43:
                                case 44:
                                case 45:
                                case 46:
                                case 47:
                                case 48:
                                case 49:
                                case 50:
                                case 51:
                                case 52:
                                case 53:
                                case 54:
                                case 55:
                                case 56:
                                case 57:
                                case 58:
                                case 59:
                                case 60:
                                case 61:
                                case 62:
                                case 63:
                                case 64:
                                case 65:
                                case 66:
                                case 67:
                                case 68:
                                case 69:
                                case 70:
                                case 71:
                                case 72:
                                case 73:
                                case 74:
                                case 75:
                                case 76:
                                case 77:
                                case 78:
                                case 79:
                                case 80:
                                case 81:
                                case 82:
                                case 83:
                                case 84:
                                case 85:
                                case 86:
                                case 87:
                                case 88:
                                case 89:
                                case 90:
                                case 91:
                                case 92:
                                case 93:
                                case 94:
                                case 95:
                                case 96:
                                case 96:
                                case 97:
                                case 98:
                                case 99:
                                case 100:
                                case 101:
                                case 102:
                                case 103:
                                case 104:
                                case 105:
                                case 106:
                                case 107:
                                case 108:
                                case 109:
                                case 110:
                                case 111:
                                case 112:
                                case 113:
                                case 113:
                                case 114:
                                case 115:
                                case 116:
                                case 117:
                                case 118:
                                case 119:
                                case 122:
                                case 123:
                                case 124:
                                case 125:
                                case 128:
                                case 129:
                                case 130:
                                case 132:
                                case 133:
                                case 134:
                                case 135:
                                case 136:
                                case 137:
                                case 138:
                                case 139:
                                case 140:
                                case 142:
                                case 142:
                                case 143:
                                case 144:
                                case 145:
                                case 146:
                                case 147:
                                case 148:
                                case 149:
                                case 150:
                                case 151:
                                case 152:
                                case 153:
                                case 154:
                                case 155:
                                case 156:
                                case 157:
                                case 158:
                                case 159:
                                case 239:
                                case 240:
                                    break;
                                }
                            if (message.cmd != null && message.hasOwnProperty("cmd"))
                                switch (message.cmd) {
                                default:
                                    return "cmd: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                case 4:
                                case 5:
                                case 6:
                                case 7:
                                case 8:
                                case 9:
                                case 10:
                                case 11:
                                case 12:
                                case 13:
                                case 14:
                                case 15:
                                case 16:
                                case 17:
                                case 18:
                                case 19:
                                case 20:
                                case 21:
                                case 22:
                                case 23:
                                case 24:
                                case 25:
                                case 26:
                                case 27:
                                case 28:
                                case 29:
                                case 30:
                                case 31:
                                case 32:
                                case 33:
                                case 34:
                                case 35:
                                case 36:
                                case 37:
                                case 38:
                                case 39:
                                case 40:
                                case 41:
                                case 42:
                                case 43:
                                case 44:
                                case 45:
                                case 46:
                                case 47:
                                case 48:
                                case 49:
                                case 50:
                                case 51:
                                case 52:
                                case 53:
                                case 54:
                                case 55:
                                case 56:
                                case 57:
                                case 58:
                                case 59:
                                case 60:
                                case 61:
                                case 62:
                                case 63:
                                case 64:
                                case 65:
                                case 66:
                                case 67:
                                case 68:
                                case 69:
                                case 70:
                                case 71:
                                case 72:
                                case 73:
                                case 74:
                                case 75:
                                case 76:
                                case 77:
                                case 78:
                                case 79:
                                case 80:
                                case 81:
                                case 82:
                                case 83:
                                case 84:
                                case 85:
                                case 86:
                                case 87:
                                case 88:
                                case 89:
                                case 90:
                                case 91:
                                case 92:
                                case 93:
                                case 94:
                                case 95:
                                case 96:
                                case 97:
                                case 98:
                                case 99:
                                case 100:
                                case 101:
                                case 102:
                                case 103:
                                case 104:
                                case 105:
                                case 106:
                                case 107:
                                case 108:
                                case 109:
                                case 110:
                                case 111:
                                case 112:
                                case 113:
                                case 114:
                                case 115:
                                case 116:
                                case 117:
                                case 118:
                                case 119:
                                case 120:
                                case 121:
                                case 122:
                                case 123:
                                case 124:
                                case 125:
                                case 126:
                                case 127:
                                case 128:
                                case 129:
                                case 130:
                                case 131:
                                case 132:
                                case 133:
                                case 134:
                                case 135:
                                case 136:
                                case 137:
                                case 138:
                                case 139:
                                case 140:
                                case 141:
                                case 142:
                                case 143:
                                case 144:
                                case 145:
                                case 146:
                                case 147:
                                case 148:
                                case 149:
                                case 150:
                                case 151:
                                case 152:
                                case 153:
                                case 154:
                                case 155:
                                case 156:
                                case 157:
                                case 158:
                                case 159:
                                case 160:
                                case 161:
                                case 162:
                                case 163:
                                case 164:
                                case 165:
                                case 166:
                                case 167:
                                case 168:
                                case 169:
                                case 170:
                                case 171:
                                case 172:
                                case 173:
                                case 174:
                                case 175:
                                case 176:
                                case 177:
                                case 178:
                                case 179:
                                case 180:
                                case 181:
                                case 182:
                                case 183:
                                case 184:
                                case 185:
                                case 186:
                                case 187:
                                case 188:
                                case 189:
                                case 190:
                                case 191:
                                case 192:
                                case 193:
                                case 194:
                                case 195:
                                case 196:
                                case 197:
                                case 198:
                                case 199:
                                case 200:
                                case 201:
                                case 202:
                                case 203:
                                case 204:
                                case 205:
                                case 206:
                                case 207:
                                case 208:
                                case 209:
                                case 210:
                                case 211:
                                case 212:
                                case 213:
                                case 214:
                                case 215:
                                case 216:
                                case 217:
                                case 218:
                                case 219:
                                case 220:
                                case 221:
                                case 222:
                                case 223:
                                case 224:
                                case 225:
                                case 226:
                                case 227:
                                case 228:
                                case 229:
                                case 230:
                                case 231:
                                case 232:
                                case 233:
                                case 234:
                                case 235:
                                case 236:
                                case 237:
                                case 238:
                                case 239:
                                case 240:
                                case 241:
                                case 242:
                                case 243:
                                case 244:
                                case 245:
                                case 246:
                                case 247:
                                case 248:
                                case 249:
                                case 250:
                                case 251:
                                case 252:
                                case 253:
                                case 254:
                                case 255:
                                case 256:
                                case 257:
                                case 258:
                                case 259:
                                case 260:
                                case 261:
                                case 262:
                                case 263:
                                case 264:
                                case 265:
                                case 266:
                                case 267:
                                case 268:
                                case 269:
                                case 270:
                                case 271:
                                case 272:
                                case 273:
                                case 274:
                                case 275:
                                case 276:
                                case 277:
                                case 278:
                                case 279:
                                case 280:
                                case 281:
                                case 282:
                                case 283:
                                case 284:
                                case 285:
                                case 286:
                                case 287:
                                case 288:
                                case 289:
                                case 290:
                                case 291:
                                case 292:
                                case 293:
                                case 294:
                                case 295:
                                case 296:
                                case 297:
                                case 298:
                                case 299:
                                case 300:
                                case 301:
                                case 302:
                                case 303:
                                case 304:
                                case 305:
                                case 306:
                                case 307:
                                case 308:
                                case 309:
                                case 310:
                                case 311:
                                case 312:
                                case 313:
                                case 314:
                                case 315:
                                case 316:
                                case 317:
                                case 318:
                                case 319:
                                case 320:
                                case 321:
                                case 322:
                                case 323:
                                case 324:
                                case 325:
                                case 326:
                                case 327:
                                case 328:
                                case 329:
                                case 330:
                                case 331:
                                case 332:
                                case 333:
                                case 334:
                                case 335:
                                case 336:
                                case 337:
                                case 338:
                                case 339:
                                case 340:
                                case 341:
                                case 342:
                                case 343:
                                case 344:
                                case 345:
                                case 346:
                                case 347:
                                case 348:
                                case 349:
                                case 350:
                                case 351:
                                case 352:
                                case 353:
                                case 354:
                                case 355:
                                case 356:
                                case 357:
                                case 358:
                                case 359:
                                case 360:
                                case 361:
                                case 362:
                                case 363:
                                case 364:
                                case 365:
                                case 366:
                                case 367:
                                case 368:
                                case 369:
                                case 370:
                                case 371:
                                case 372:
                                case 373:
                                case 374:
                                case 375:
                                case 376:
                                case 377:
                                case 378:
                                case 379:
                                case 380:
                                case 381:
                                case 382:
                                case 383:
                                case 384:
                                case 385:
                                case 386:
                                case 387:
                                case 388:
                                case 389:
                                case 390:
                                case 391:
                                case 392:
                                case 393:
                                case 394:
                                case 395:
                                case 396:
                                case 397:
                                case 398:
                                case 399:
                                case 400:
                                case 401:
                                case 402:
                                case 403:
                                case 404:
                                case 405:
                                case 406:
                                case 407:
                                case 408:
                                case 409:
                                case 410:
                                case 411:
                                case 412:
                                case 413:
                                case 414:
                                case 415:
                                case 416:
                                case 417:
                                case 418:
                                case 419:
                                case 420:
                                case 421:
                                case 422:
                                case 423:
                                case 424:
                                case 425:
                                case 426:
                                case 427:
                                case 428:
                                case 429:
                                case 430:
                                case 431:
                                case 432:
                                case 433:
                                case 434:
                                case 435:
                                case 436:
                                case 437:
                                case 438:
                                case 439:
                                case 440:
                                case 441:
                                case 442:
                                case 443:
                                case 444:
                                case 445:
                                case 446:
                                case 447:
                                case 448:
                                case 449:
                                case 450:
                                case 451:
                                case 452:
                                case 453:
                                case 454:
                                case 455:
                                case 456:
                                case 457:
                                case 458:
                                case 459:
                                case 460:
                                case 461:
                                case 462:
                                case 463:
                                case 464:
                                case 465:
                                case 466:
                                case 467:
                                case 468:
                                case 469:
                                case 470:
                                case 471:
                                case 472:
                                case 473:
                                case 474:
                                case 475:
                                case 476:
                                case 477:
                                case 478:
                                case 479:
                                case 480:
                                case 481:
                                case 482:
                                case 483:
                                case 484:
                                case 485:
                                case 486:
                                case 487:
                                case 488:
                                case 489:
                                case 490:
                                case 491:
                                case 492:
                                case 493:
                                case 494:
                                case 495:
                                case 496:
                                case 497:
                                case 498:
                                case 499:
                                case 500:
                                case 501:
                                case 502:
                                case 503:
                                case 504:
                                case 505:
                                case 506:
                                case 507:
                                case 508:
                                case 509:
                                case 510:
                                case 511:
                                case 512:
                                case 513:
                                case 514:
                                case 515:
                                case 516:
                                case 517:
                                case 518:
                                case 519:
                                case 520:
                                case 521:
                                case 522:
                                case 523:
                                case 524:
                                case 525:
                                case 526:
                                case 527:
                                case 528:
                                case 529:
                                case 530:
                                case 531:
                                case 532:
                                case 533:
                                case 534:
                                case 535:
                                case 536:
                                case 537:
                                case 538:
                                case 539:
                                case 540:
                                case 541:
                                case 542:
                                case 543:
                                case 544:
                                case 545:
                                case 546:
                                case 547:
                                case 548:
                                case 549:
                                case 550:
                                case 551:
                                case 552:
                                case 553:
                                case 554:
                                case 555:
                                case 556:
                                case 557:
                                case 558:
                                case 559:
                                case 560:
                                case 561:
                                case 562:
                                case 563:
                                case 564:
                                case 565:
                                case 566:
                                case 567:
                                case 568:
                                case 569:
                                case 570:
                                case 571:
                                case 572:
                                case 573:
                                case 574:
                                case 575:
                                case 576:
                                case 577:
                                case 578:
                                case 579:
                                case 580:
                                case 581:
                                case 582:
                                case 583:
                                case 584:
                                case 585:
                                case 586:
                                case 587:
                                case 588:
                                case 589:
                                case 590:
                                case 591:
                                case 592:
                                case 593:
                                case 594:
                                case 595:
                                case 596:
                                case 597:
                                case 598:
                                case 599:
                                case 600:
                                case 601:
                                case 602:
                                case 603:
                                case 604:
                                case 605:
                                case 606:
                                case 607:
                                case 608:
                                case 609:
                                case 610:
                                case 611:
                                case 612:
                                case 613:
                                case 614:
                                case 615:
                                case 616:
                                case 617:
                                case 618:
                                case 619:
                                case 620:
                                case 621:
                                case 622:
                                case 623:
                                case 624:
                                case 625:
                                case 626:
                                case 627:
                                case 628:
                                case 629:
                                case 630:
                                case 631:
                                case 632:
                                case 633:
                                case 634:
                                case 635:
                                    break;
                                }
                            if (message.params != null && message.hasOwnProperty("params"))
                                if (!(message.params && typeof message.params.length === "number" || $util.isString(message.params)))
                                    return "params: buffer expected";
                            return null;
                        };

                        /**
                         * Creates a ZWaveCommand message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof matrix_io.malos.v1.comm.ZWaveMsg.ZWaveCommand
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {matrix_io.malos.v1.comm.ZWaveMsg.ZWaveCommand} ZWaveCommand
                         */
                        ZWaveCommand.fromObject = function fromObject(object) {
                            if (object instanceof $root.matrix_io.malos.v1.comm.ZWaveMsg.ZWaveCommand)
                                return object;
                            var message = new $root.matrix_io.malos.v1.comm.ZWaveMsg.ZWaveCommand();
                            switch (object.zwclass) {
                            case "COMMAND_CLASS_NO_OPERATION":
                            case 0:
                                message.zwclass = 0;
                                break;
                            case "ZWAVE_CMD_CLASS":
                            case 1:
                                message.zwclass = 1;
                                break;
                            case "COMMAND_CLASS_ZENSOR_NET":
                            case 2:
                                message.zwclass = 2;
                                break;
                            case "COMMAND_CLASS_BASIC":
                            case 32:
                                message.zwclass = 32;
                                break;
                            case "COMMAND_CLASS_CONTROLLER_REPLICATION":
                            case 33:
                                message.zwclass = 33;
                                break;
                            case "COMMAND_CLASS_APPLICATION_STATUS":
                            case 34:
                                message.zwclass = 34;
                                break;
                            case "COMMAND_CLASS_ZIP":
                            case 35:
                                message.zwclass = 35;
                                break;
                            case "COMMAND_CLASS_SECURITY_PANEL_MODE":
                            case 36:
                                message.zwclass = 36;
                                break;
                            case "COMMAND_CLASS_SWITCH_BINARY":
                            case 37:
                                message.zwclass = 37;
                                break;
                            case "COMMAND_CLASS_SWITCH_MULTILEVEL":
                            case 38:
                                message.zwclass = 38;
                                break;
                            case "COMMAND_CLASS_SWITCH_ALL":
                            case 39:
                                message.zwclass = 39;
                                break;
                            case "COMMAND_CLASS_SWITCH_TOGGLE_BINARY":
                            case 40:
                                message.zwclass = 40;
                                break;
                            case "COMMAND_CLASS_SWITCH_TOGGLE_MULTILEVEL":
                            case 41:
                                message.zwclass = 41;
                                break;
                            case "COMMAND_CLASS_CHIMNEY_FAN":
                            case 42:
                                message.zwclass = 42;
                                break;
                            case "COMMAND_CLASS_SCENE_ACTIVATION":
                            case 43:
                                message.zwclass = 43;
                                break;
                            case "COMMAND_CLASS_SCENE_ACTUATOR_CONF":
                            case 44:
                                message.zwclass = 44;
                                break;
                            case "COMMAND_CLASS_SCENE_CONTROLLER_CONF":
                            case 45:
                                message.zwclass = 45;
                                break;
                            case "COMMAND_CLASS_SECURITY_PANEL_ZONE":
                            case 46:
                                message.zwclass = 46;
                                break;
                            case "COMMAND_CLASS_SECURITY_PANEL_ZONE_SENSOR":
                            case 47:
                                message.zwclass = 47;
                                break;
                            case "COMMAND_CLASS_SENSOR_BINARY":
                            case 48:
                                message.zwclass = 48;
                                break;
                            case "COMMAND_CLASS_SENSOR_MULTILEVEL":
                            case 49:
                                message.zwclass = 49;
                                break;
                            case "COMMAND_CLASS_METER":
                            case 50:
                                message.zwclass = 50;
                                break;
                            case "COMMAND_CLASS_SWITCH_COLOR":
                            case 51:
                                message.zwclass = 51;
                                break;
                            case "COMMAND_CLASS_NETWORK_MANAGEMENT_INCLUSION":
                            case 52:
                                message.zwclass = 52;
                                break;
                            case "COMMAND_CLASS_METER_PULSE":
                            case 53:
                                message.zwclass = 53;
                                break;
                            case "COMMAND_CLASS_BASIC_TARIFF_INFO":
                            case 54:
                                message.zwclass = 54;
                                break;
                            case "COMMAND_CLASS_HRV_STATUS":
                            case 55:
                                message.zwclass = 55;
                                break;
                            case "COMMAND_CLASS_THERMOSTAT_HEATING":
                            case 56:
                                message.zwclass = 56;
                                break;
                            case "COMMAND_CLASS_HRV_CONTROL":
                            case 57:
                                message.zwclass = 57;
                                break;
                            case "COMMAND_CLASS_DCP_CONFIG":
                            case 58:
                                message.zwclass = 58;
                                break;
                            case "COMMAND_CLASS_DCP_MONITOR":
                            case 59:
                                message.zwclass = 59;
                                break;
                            case "COMMAND_CLASS_METER_TBL_CONFIG":
                            case 60:
                                message.zwclass = 60;
                                break;
                            case "COMMAND_CLASS_METER_TBL_MONITOR":
                            case 61:
                                message.zwclass = 61;
                                break;
                            case "COMMAND_CLASS_METER_TBL_PUSH":
                            case 62:
                                message.zwclass = 62;
                                break;
                            case "COMMAND_CLASS_PREPAYMENT":
                            case 63:
                                message.zwclass = 63;
                                break;
                            case "COMMAND_CLASS_THERMOSTAT_MODE":
                            case 64:
                                message.zwclass = 64;
                                break;
                            case "COMMAND_CLASS_PREPAYMENT_ENCAPSULATION":
                            case 65:
                                message.zwclass = 65;
                                break;
                            case "COMMAND_CLASS_THERMOSTAT_OPERATING_STATE":
                            case 66:
                                message.zwclass = 66;
                                break;
                            case "COMMAND_CLASS_THERMOSTAT_SETPOINT":
                            case 67:
                                message.zwclass = 67;
                                break;
                            case "COMMAND_CLASS_THERMOSTAT_FAN_MODE":
                            case 68:
                                message.zwclass = 68;
                                break;
                            case "COMMAND_CLASS_THERMOSTAT_FAN_STATE":
                            case 69:
                                message.zwclass = 69;
                                break;
                            case "COMMAND_CLASS_CLIMATE_CONTROL_SCHEDULE":
                            case 70:
                                message.zwclass = 70;
                                break;
                            case "COMMAND_CLASS_THERMOSTAT_SETBACK":
                            case 71:
                                message.zwclass = 71;
                                break;
                            case "COMMAND_CLASS_RATE_TBL_CONFIG":
                            case 72:
                                message.zwclass = 72;
                                break;
                            case "COMMAND_CLASS_RATE_TBL_MONITOR":
                            case 73:
                                message.zwclass = 73;
                                break;
                            case "COMMAND_CLASS_TARIFF_CONFIG":
                            case 74:
                                message.zwclass = 74;
                                break;
                            case "COMMAND_CLASS_TARIFF_TBL_MONITOR":
                            case 75:
                                message.zwclass = 75;
                                break;
                            case "COMMAND_CLASS_DOOR_LOCK_LOGGING":
                            case 76:
                                message.zwclass = 76;
                                break;
                            case "COMMAND_CLASS_NETWORK_MANAGEMENT_BASIC":
                            case 77:
                                message.zwclass = 77;
                                break;
                            case "COMMAND_CLASS_SCHEDULE_ENTRY_LOCK":
                            case 78:
                                message.zwclass = 78;
                                break;
                            case "COMMAND_CLASS_ZIP_6LOWPAN":
                            case 79:
                                message.zwclass = 79;
                                break;
                            case "COMMAND_CLASS_BASIC_WINDOW_COVERING":
                            case 80:
                                message.zwclass = 80;
                                break;
                            case "COMMAND_CLASS_MTP_WINDOW_COVERING":
                            case 81:
                                message.zwclass = 81;
                                break;
                            case "COMMAND_CLASS_NETWORK_MANAGEMENT_PROXY":
                            case 82:
                                message.zwclass = 82;
                                break;
                            case "COMMAND_CLASS_SCHEDULE":
                            case 83:
                                message.zwclass = 83;
                                break;
                            case "COMMAND_CLASS_NETWORK_MANAGEMENT_PRIMARY":
                            case 84:
                                message.zwclass = 84;
                                break;
                            case "COMMAND_CLASS_TRANSPORT_SERVICE":
                            case 85:
                                message.zwclass = 85;
                                break;
                            case "COMMAND_CLASS_CRC_16_ENCAP":
                            case 86:
                                message.zwclass = 86;
                                break;
                            case "COMMAND_CLASS_APPLICATION_CAPABILITY":
                            case 87:
                                message.zwclass = 87;
                                break;
                            case "COMMAND_CLASS_ZIP_ND":
                            case 88:
                                message.zwclass = 88;
                                break;
                            case "COMMAND_CLASS_ASSOCIATION_GRP_INFO":
                            case 89:
                                message.zwclass = 89;
                                break;
                            case "COMMAND_CLASS_DEVICE_RESET_LOCALLY":
                            case 90:
                                message.zwclass = 90;
                                break;
                            case "COMMAND_CLASS_CENTRAL_SCENE":
                            case 91:
                                message.zwclass = 91;
                                break;
                            case "COMMAND_CLASS_IP_ASSOCIATION":
                            case 92:
                                message.zwclass = 92;
                                break;
                            case "COMMAND_CLASS_ANTITHEFT":
                            case 93:
                                message.zwclass = 93;
                                break;
                            case "COMMAND_CLASS_ZWAVEPLUS_INFO":
                            case 94:
                                message.zwclass = 94;
                                break;
                            case "COMMAND_CLASS_ZIP_GATEWAY":
                            case 95:
                                message.zwclass = 95;
                                break;
                            case "COMMAND_CLASS_MULTI_CHANNEL":
                            case 96:
                                message.zwclass = 96;
                                break;
                            case "COMMAND_CLASS_MULTI_INSTANCE":
                            case 96:
                                message.zwclass = 96;
                                break;
                            case "COMMAND_CLASS_ZIP_PORTAL":
                            case 97:
                                message.zwclass = 97;
                                break;
                            case "COMMAND_CLASS_DOOR_LOCK":
                            case 98:
                                message.zwclass = 98;
                                break;
                            case "COMMAND_CLASS_USER_CODE":
                            case 99:
                                message.zwclass = 99;
                                break;
                            case "COMMAND_CLASS_HUMIDITY_CONTROL_SETPOINT":
                            case 100:
                                message.zwclass = 100;
                                break;
                            case "COMMAND_CLASS_DMX":
                            case 101:
                                message.zwclass = 101;
                                break;
                            case "COMMAND_CLASS_BARRIER_OPERATOR":
                            case 102:
                                message.zwclass = 102;
                                break;
                            case "COMMAND_CLASS_NETWORK_MANAGEMENT_INSTALLATION_MAINTENANCE":
                            case 103:
                                message.zwclass = 103;
                                break;
                            case "COMMAND_CLASS_ZIP_NAMING":
                            case 104:
                                message.zwclass = 104;
                                break;
                            case "COMMAND_CLASS_MAILBOX":
                            case 105:
                                message.zwclass = 105;
                                break;
                            case "COMMAND_CLASS_WINDOW_COVERING":
                            case 106:
                                message.zwclass = 106;
                                break;
                            case "COMMAND_CLASS_IRRIGATION":
                            case 107:
                                message.zwclass = 107;
                                break;
                            case "COMMAND_CLASS_SUPERVISION":
                            case 108:
                                message.zwclass = 108;
                                break;
                            case "COMMAND_CLASS_HUMIDITY_CONTROL_MODE":
                            case 109:
                                message.zwclass = 109;
                                break;
                            case "COMMAND_CLASS_HUMIDITY_CONTROL_OPERATING_STATE":
                            case 110:
                                message.zwclass = 110;
                                break;
                            case "COMMAND_CLASS_ENTRY_CONTROL":
                            case 111:
                                message.zwclass = 111;
                                break;
                            case "COMMAND_CLASS_CONFIGURATION":
                            case 112:
                                message.zwclass = 112;
                                break;
                            case "COMMAND_CLASS_ALARM":
                            case 113:
                                message.zwclass = 113;
                                break;
                            case "COMMAND_CLASS_NOTIFICATION":
                            case 113:
                                message.zwclass = 113;
                                break;
                            case "COMMAND_CLASS_MANUFACTURER_SPECIFIC":
                            case 114:
                                message.zwclass = 114;
                                break;
                            case "COMMAND_CLASS_POWERLEVEL":
                            case 115:
                                message.zwclass = 115;
                                break;
                            case "COMMAND_CLASS_INCLUSION_CONTROLLER":
                            case 116:
                                message.zwclass = 116;
                                break;
                            case "COMMAND_CLASS_PROTECTION":
                            case 117:
                                message.zwclass = 117;
                                break;
                            case "COMMAND_CLASS_LOCK":
                            case 118:
                                message.zwclass = 118;
                                break;
                            case "COMMAND_CLASS_NODE_NAMING":
                            case 119:
                                message.zwclass = 119;
                                break;
                            case "COMMAND_CLASS_FIRMWARE_UPDATE_MD":
                            case 122:
                                message.zwclass = 122;
                                break;
                            case "COMMAND_CLASS_GROUPING_NAME":
                            case 123:
                                message.zwclass = 123;
                                break;
                            case "COMMAND_CLASS_REMOTE_ASSOCIATION_ACTIVATE":
                            case 124:
                                message.zwclass = 124;
                                break;
                            case "COMMAND_CLASS_REMOTE_ASSOCIATION":
                            case 125:
                                message.zwclass = 125;
                                break;
                            case "COMMAND_CLASS_BATTERY":
                            case 128:
                                message.zwclass = 128;
                                break;
                            case "COMMAND_CLASS_CLOCK":
                            case 129:
                                message.zwclass = 129;
                                break;
                            case "COMMAND_CLASS_HAIL":
                            case 130:
                                message.zwclass = 130;
                                break;
                            case "COMMAND_CLASS_WAKE_UP":
                            case 132:
                                message.zwclass = 132;
                                break;
                            case "COMMAND_CLASS_ASSOCIATION":
                            case 133:
                                message.zwclass = 133;
                                break;
                            case "COMMAND_CLASS_VERSION":
                            case 134:
                                message.zwclass = 134;
                                break;
                            case "COMMAND_CLASS_INDICATOR":
                            case 135:
                                message.zwclass = 135;
                                break;
                            case "COMMAND_CLASS_PROPRIETARY":
                            case 136:
                                message.zwclass = 136;
                                break;
                            case "COMMAND_CLASS_LANGUAGE":
                            case 137:
                                message.zwclass = 137;
                                break;
                            case "COMMAND_CLASS_TIME":
                            case 138:
                                message.zwclass = 138;
                                break;
                            case "COMMAND_CLASS_TIME_PARAMETERS":
                            case 139:
                                message.zwclass = 139;
                                break;
                            case "COMMAND_CLASS_GEOGRAPHIC_LOCATION":
                            case 140:
                                message.zwclass = 140;
                                break;
                            case "COMMAND_CLASS_MULTI_CHANNEL_ASSOCIATION":
                            case 142:
                                message.zwclass = 142;
                                break;
                            case "COMMAND_CLASS_MULTI_INSTANCE_ASSOCIATION":
                            case 142:
                                message.zwclass = 142;
                                break;
                            case "COMMAND_CLASS_MULTI_CMD":
                            case 143:
                                message.zwclass = 143;
                                break;
                            case "COMMAND_CLASS_ENERGY_PRODUCTION":
                            case 144:
                                message.zwclass = 144;
                                break;
                            case "COMMAND_CLASS_MANUFACTURER_PROPRIETARY":
                            case 145:
                                message.zwclass = 145;
                                break;
                            case "COMMAND_CLASS_SCREEN_MD":
                            case 146:
                                message.zwclass = 146;
                                break;
                            case "COMMAND_CLASS_SCREEN_ATTRIBUTES":
                            case 147:
                                message.zwclass = 147;
                                break;
                            case "COMMAND_CLASS_SIMPLE_AV_CONTROL":
                            case 148:
                                message.zwclass = 148;
                                break;
                            case "COMMAND_CLASS_AV_CONTENT_DIRECTORY_MD":
                            case 149:
                                message.zwclass = 149;
                                break;
                            case "COMMAND_CLASS_AV_RENDERER_STATUS":
                            case 150:
                                message.zwclass = 150;
                                break;
                            case "COMMAND_CLASS_AV_CONTENT_SEARCH_MD":
                            case 151:
                                message.zwclass = 151;
                                break;
                            case "COMMAND_CLASS_SECURITY":
                            case 152:
                                message.zwclass = 152;
                                break;
                            case "COMMAND_CLASS_AV_TAGGING_MD":
                            case 153:
                                message.zwclass = 153;
                                break;
                            case "COMMAND_CLASS_IP_CONFIGURATION":
                            case 154:
                                message.zwclass = 154;
                                break;
                            case "COMMAND_CLASS_ASSOCIATION_COMMAND_CONFIGURATION":
                            case 155:
                                message.zwclass = 155;
                                break;
                            case "COMMAND_CLASS_SENSOR_ALARM":
                            case 156:
                                message.zwclass = 156;
                                break;
                            case "COMMAND_CLASS_SILENCE_ALARM":
                            case 157:
                                message.zwclass = 157;
                                break;
                            case "COMMAND_CLASS_SENSOR_CONFIGURATION":
                            case 158:
                                message.zwclass = 158;
                                break;
                            case "COMMAND_CLASS_SECURITY_2":
                            case 159:
                                message.zwclass = 159;
                                break;
                            case "COMMAND_CLASS_MARK":
                            case 239:
                                message.zwclass = 239;
                                break;
                            case "COMMAND_CLASS_NON_INTEROPERABLE":
                            case 240:
                                message.zwclass = 240;
                                break;
                            }
                            switch (object.cmd) {
                            case "CMD_UNDEFINED":
                            case 0:
                                message.cmd = 0;
                                break;
                            case "ACCEPT_LOST":
                            case 1:
                                message.cmd = 1;
                                break;
                            case "ALARM_GET":
                            case 2:
                                message.cmd = 2;
                                break;
                            case "ALARM_REPORT":
                            case 3:
                                message.cmd = 3;
                                break;
                            case "ANTITHEFT_GET":
                            case 4:
                                message.cmd = 4;
                                break;
                            case "ANTITHEFT_REPORT":
                            case 5:
                                message.cmd = 5;
                                break;
                            case "ANTITHEFT_SET":
                            case 6:
                                message.cmd = 6;
                                break;
                            case "APPLICATION_BUSY":
                            case 7:
                                message.cmd = 7;
                                break;
                            case "APPLICATION_REJECTED_REQUEST":
                            case 8:
                                message.cmd = 8;
                                break;
                            case "ASSIGN_ID":
                            case 9:
                                message.cmd = 9;
                                break;
                            case "ASSIGN_RETURN_ROUTE":
                            case 10:
                                message.cmd = 10;
                                break;
                            case "ASSIGN_RETURN_ROUTE_PRIORITY":
                            case 11:
                                message.cmd = 11;
                                break;
                            case "ASSIGN_SUC_RETURN_ROUTE_PRIORITY":
                            case 12:
                                message.cmd = 12;
                                break;
                            case "ASSOCIATION_GET":
                            case 13:
                                message.cmd = 13;
                                break;
                            case "ASSOCIATION_GROUPINGS_GET":
                            case 14:
                                message.cmd = 14;
                                break;
                            case "ASSOCIATION_GROUPINGS_REPORT":
                            case 15:
                                message.cmd = 15;
                                break;
                            case "ASSOCIATION_GROUP_COMMAND_LIST_GET":
                            case 16:
                                message.cmd = 16;
                                break;
                            case "ASSOCIATION_GROUP_COMMAND_LIST_REPORT":
                            case 17:
                                message.cmd = 17;
                                break;
                            case "ASSOCIATION_GROUP_INFO_GET":
                            case 18:
                                message.cmd = 18;
                                break;
                            case "ASSOCIATION_GROUP_INFO_REPORT":
                            case 19:
                                message.cmd = 19;
                                break;
                            case "ASSOCIATION_GROUP_NAME_GET":
                            case 20:
                                message.cmd = 20;
                                break;
                            case "ASSOCIATION_GROUP_NAME_REPORT":
                            case 21:
                                message.cmd = 21;
                                break;
                            case "ASSOCIATION_REMOVE":
                            case 22:
                                message.cmd = 22;
                                break;
                            case "ASSOCIATION_REPORT":
                            case 23:
                                message.cmd = 23;
                                break;
                            case "ASSOCIATION_SET":
                            case 24:
                                message.cmd = 24;
                                break;
                            case "AV_CONTENT_BROWSE_MD_BY_LETTER_GET":
                            case 25:
                                message.cmd = 25;
                                break;
                            case "AV_CONTENT_BROWSE_MD_BY_LETTER_REPORT":
                            case 26:
                                message.cmd = 26;
                                break;
                            case "AV_CONTENT_BROWSE_MD_CHILD_COUNT_GET":
                            case 27:
                                message.cmd = 27;
                                break;
                            case "AV_CONTENT_BROWSE_MD_CHILD_COUNT_REPORT":
                            case 28:
                                message.cmd = 28;
                                break;
                            case "AV_CONTENT_BROWSE_MD_GET":
                            case 29:
                                message.cmd = 29;
                                break;
                            case "AV_CONTENT_BROWSE_MD_REPORT":
                            case 30:
                                message.cmd = 30;
                                break;
                            case "AV_CONTENT_SEARCH_MD_GET":
                            case 31:
                                message.cmd = 31;
                                break;
                            case "AV_CONTENT_SEARCH_MD_REPORT":
                            case 32:
                                message.cmd = 32;
                                break;
                            case "AV_MATCH_ITEM_TO_RENDERER_MD_GET":
                            case 33:
                                message.cmd = 33;
                                break;
                            case "AV_MATCH_ITEM_TO_RENDERER_MD_REPORT":
                            case 34:
                                message.cmd = 34;
                                break;
                            case "AV_RENDERER_STATUS_GET":
                            case 35:
                                message.cmd = 35;
                                break;
                            case "AV_RENDERER_STATUS_REPORT":
                            case 36:
                                message.cmd = 36;
                                break;
                            case "AV_TAGGING_MD_GET":
                            case 37:
                                message.cmd = 37;
                                break;
                            case "AV_TAGGING_MD_REPORT":
                            case 38:
                                message.cmd = 38;
                                break;
                            case "BARRIER_OPERATOR_GET":
                            case 39:
                                message.cmd = 39;
                                break;
                            case "BARRIER_OPERATOR_REPORT":
                            case 40:
                                message.cmd = 40;
                                break;
                            case "BARRIER_OPERATOR_SET":
                            case 41:
                                message.cmd = 41;
                                break;
                            case "BARRIER_OPERATOR_SIGNAL_GET":
                            case 42:
                                message.cmd = 42;
                                break;
                            case "BARRIER_OPERATOR_SIGNAL_REPORT":
                            case 43:
                                message.cmd = 43;
                                break;
                            case "BARRIER_OPERATOR_SIGNAL_SET":
                            case 44:
                                message.cmd = 44;
                                break;
                            case "BARRIER_OPERATOR_SIGNAL_SUPPORTED_GET":
                            case 45:
                                message.cmd = 45;
                                break;
                            case "BARRIER_OPERATOR_SIGNAL_SUPPORTED_REPORT":
                            case 46:
                                message.cmd = 46;
                                break;
                            case "BASIC_GET":
                            case 47:
                                message.cmd = 47;
                                break;
                            case "BASIC_REPORT":
                            case 48:
                                message.cmd = 48;
                                break;
                            case "BASIC_SET":
                            case 49:
                                message.cmd = 49;
                                break;
                            case "BASIC_TARIFF_INFO_GET":
                            case 50:
                                message.cmd = 50;
                                break;
                            case "BASIC_TARIFF_INFO_REPORT":
                            case 51:
                                message.cmd = 51;
                                break;
                            case "BASIC_WINDOW_COVERING_START_LEVEL_CHANGE":
                            case 52:
                                message.cmd = 52;
                                break;
                            case "BASIC_WINDOW_COVERING_STOP_LEVEL_CHANGE":
                            case 53:
                                message.cmd = 53;
                                break;
                            case "BATTERY_GET":
                            case 54:
                                message.cmd = 54;
                                break;
                            case "BATTERY_REPORT":
                            case 55:
                                message.cmd = 55;
                                break;
                            case "BIND_ACCEPT":
                            case 56:
                                message.cmd = 56;
                                break;
                            case "BIND_COMPLETE":
                            case 57:
                                message.cmd = 57;
                                break;
                            case "BIND_REQUEST":
                            case 58:
                                message.cmd = 58;
                                break;
                            case "CENTRAL_SCENE_NOTIFICATION":
                            case 59:
                                message.cmd = 59;
                                break;
                            case "CENTRAL_SCENE_SUPPORTED_GET":
                            case 60:
                                message.cmd = 60;
                                break;
                            case "CENTRAL_SCENE_SUPPORTED_REPORT":
                            case 61:
                                message.cmd = 61;
                                break;
                            case "CHIMNEY_FAN_ALARM_LOG_GET":
                            case 62:
                                message.cmd = 62;
                                break;
                            case "CHIMNEY_FAN_ALARM_LOG_REPORT":
                            case 63:
                                message.cmd = 63;
                                break;
                            case "CHIMNEY_FAN_ALARM_LOG_SET":
                            case 64:
                                message.cmd = 64;
                                break;
                            case "CHIMNEY_FAN_ALARM_STATUS_GET":
                            case 65:
                                message.cmd = 65;
                                break;
                            case "CHIMNEY_FAN_ALARM_STATUS_REPORT":
                            case 66:
                                message.cmd = 66;
                                break;
                            case "CHIMNEY_FAN_ALARM_STATUS_SET":
                            case 67:
                                message.cmd = 67;
                                break;
                            case "CHIMNEY_FAN_ALARM_TEMP_GET":
                            case 68:
                                message.cmd = 68;
                                break;
                            case "CHIMNEY_FAN_ALARM_TEMP_REPORT":
                            case 69:
                                message.cmd = 69;
                                break;
                            case "CHIMNEY_FAN_ALARM_TEMP_SET":
                            case 70:
                                message.cmd = 70;
                                break;
                            case "CHIMNEY_FAN_BOOST_TIME_GET":
                            case 71:
                                message.cmd = 71;
                                break;
                            case "CHIMNEY_FAN_BOOST_TIME_REPORT":
                            case 72:
                                message.cmd = 72;
                                break;
                            case "CHIMNEY_FAN_BOOST_TIME_SET":
                            case 73:
                                message.cmd = 73;
                                break;
                            case "CHIMNEY_FAN_DEFAULT_SET":
                            case 74:
                                message.cmd = 74;
                                break;
                            case "CHIMNEY_FAN_MIN_SPEED_GET":
                            case 75:
                                message.cmd = 75;
                                break;
                            case "CHIMNEY_FAN_MIN_SPEED_REPORT":
                            case 76:
                                message.cmd = 76;
                                break;
                            case "CHIMNEY_FAN_MIN_SPEED_SET":
                            case 77:
                                message.cmd = 77;
                                break;
                            case "CHIMNEY_FAN_MODE_GET":
                            case 78:
                                message.cmd = 78;
                                break;
                            case "CHIMNEY_FAN_MODE_REPORT":
                            case 79:
                                message.cmd = 79;
                                break;
                            case "CHIMNEY_FAN_MODE_SET":
                            case 80:
                                message.cmd = 80;
                                break;
                            case "CHIMNEY_FAN_SETUP_GET":
                            case 81:
                                message.cmd = 81;
                                break;
                            case "CHIMNEY_FAN_SETUP_REPORT":
                            case 82:
                                message.cmd = 82;
                                break;
                            case "CHIMNEY_FAN_SETUP_SET":
                            case 83:
                                message.cmd = 83;
                                break;
                            case "CHIMNEY_FAN_SPEED_GET":
                            case 84:
                                message.cmd = 84;
                                break;
                            case "CHIMNEY_FAN_SPEED_REPORT":
                            case 85:
                                message.cmd = 85;
                                break;
                            case "CHIMNEY_FAN_SPEED_SET":
                            case 86:
                                message.cmd = 86;
                                break;
                            case "CHIMNEY_FAN_START_TEMP_GET":
                            case 87:
                                message.cmd = 87;
                                break;
                            case "CHIMNEY_FAN_START_TEMP_REPORT":
                            case 88:
                                message.cmd = 88;
                                break;
                            case "CHIMNEY_FAN_START_TEMP_SET":
                            case 89:
                                message.cmd = 89;
                                break;
                            case "CHIMNEY_FAN_STATE_GET":
                            case 90:
                                message.cmd = 90;
                                break;
                            case "CHIMNEY_FAN_STATE_REPORT":
                            case 91:
                                message.cmd = 91;
                                break;
                            case "CHIMNEY_FAN_STATE_SET":
                            case 92:
                                message.cmd = 92;
                                break;
                            case "CHIMNEY_FAN_STATUS_GET":
                            case 93:
                                message.cmd = 93;
                                break;
                            case "CHIMNEY_FAN_STATUS_REPORT":
                            case 94:
                                message.cmd = 94;
                                break;
                            case "CHIMNEY_FAN_STOP_TEMP_GET":
                            case 95:
                                message.cmd = 95;
                                break;
                            case "CHIMNEY_FAN_STOP_TEMP_REPORT":
                            case 96:
                                message.cmd = 96;
                                break;
                            case "CHIMNEY_FAN_STOP_TEMP_SET":
                            case 97:
                                message.cmd = 97;
                                break;
                            case "CHIMNEY_FAN_STOP_TIME_GET":
                            case 98:
                                message.cmd = 98;
                                break;
                            case "CHIMNEY_FAN_STOP_TIME_REPORT":
                            case 99:
                                message.cmd = 99;
                                break;
                            case "CHIMNEY_FAN_STOP_TIME_SET":
                            case 100:
                                message.cmd = 100;
                                break;
                            case "CLOCK_GET":
                            case 101:
                                message.cmd = 101;
                                break;
                            case "CLOCK_REPORT":
                            case 102:
                                message.cmd = 102;
                                break;
                            case "CLOCK_SET":
                            case 103:
                                message.cmd = 103;
                                break;
                            case "CMD_ASSIGN_SUC_RETURN_ROUTE":
                            case 104:
                                message.cmd = 104;
                                break;
                            case "CMD_AUTOMATIC_CONTROLLER_UPDATE_START":
                            case 105:
                                message.cmd = 105;
                                break;
                            case "CMD_ENCAPSULATION":
                            case 106:
                                message.cmd = 106;
                                break;
                            case "CMD_NODES_EXIST":
                            case 107:
                                message.cmd = 107;
                                break;
                            case "CMD_NODES_EXIST_REPLY":
                            case 108:
                                message.cmd = 108;
                                break;
                            case "CMD_NOP_POWER":
                            case 109:
                                message.cmd = 109;
                                break;
                            case "CMD_RESERVED_IDS":
                            case 110:
                                message.cmd = 110;
                                break;
                            case "CMD_SET_NWI_MODE":
                            case 111:
                                message.cmd = 111;
                                break;
                            case "CMD_SET_SUC":
                            case 112:
                                message.cmd = 112;
                                break;
                            case "CMD_SET_SUC_ACK":
                            case 113:
                                message.cmd = 113;
                                break;
                            case "CMD_STATIC_ROUTE_REQUEST":
                            case 114:
                                message.cmd = 114;
                                break;
                            case "CMD_SUC_NODE_ID":
                            case 115:
                                message.cmd = 115;
                                break;
                            case "COMMAND_APPLICATION_NODE_INFO_GET":
                            case 116:
                                message.cmd = 116;
                                break;
                            case "COMMAND_APPLICATION_NODE_INFO_REPORT":
                            case 117:
                                message.cmd = 117;
                                break;
                            case "COMMAND_APPLICATION_NODE_INFO_SET":
                            case 118:
                                message.cmd = 118;
                                break;
                            case "COMMAND_CLASS_SECURITY_PANEL_ZONE_SENSOR_INSTALLED_REPORT":
                            case 119:
                                message.cmd = 119;
                                break;
                            case "COMMAND_COMMAND_CLASS_NOT_SUPPORTED":
                            case 120:
                                message.cmd = 120;
                                break;
                            case "COMMAND_COMPLETE":
                            case 121:
                                message.cmd = 121;
                                break;
                            case "COMMAND_CONFIGURATION_GET":
                            case 122:
                                message.cmd = 122;
                                break;
                            case "COMMAND_CONFIGURATION_REPORT":
                            case 123:
                                message.cmd = 123;
                                break;
                            case "COMMAND_CONFIGURATION_SET":
                            case 124:
                                message.cmd = 124;
                                break;
                            case "COMMAND_FIRST_SEGMENT":
                            case 125:
                                message.cmd = 125;
                                break;
                            case "COMMAND_RECORDS_SUPPORTED_GET":
                            case 126:
                                message.cmd = 126;
                                break;
                            case "COMMAND_RECORDS_SUPPORTED_REPORT":
                            case 127:
                                message.cmd = 127;
                                break;
                            case "COMMAND_SCHEDULE_GET":
                            case 128:
                                message.cmd = 128;
                                break;
                            case "COMMAND_SCHEDULE_REPORT":
                            case 129:
                                message.cmd = 129;
                                break;
                            case "COMMAND_SCHEDULE_SET":
                            case 130:
                                message.cmd = 130;
                                break;
                            case "COMMAND_SEGMENT_COMPLETE":
                            case 131:
                                message.cmd = 131;
                                break;
                            case "COMMAND_SEGMENT_REQUEST":
                            case 132:
                                message.cmd = 132;
                                break;
                            case "COMMAND_SEGMENT_WAIT":
                            case 133:
                                message.cmd = 133;
                                break;
                            case "COMMAND_SUBSEQUENT_SEGMENT":
                            case 134:
                                message.cmd = 134;
                                break;
                            case "COMMAND_ZIP_PACKET":
                            case 135:
                                message.cmd = 135;
                                break;
                            case "COMPLETE":
                            case 136:
                                message.cmd = 136;
                                break;
                            case "CONFIGURATION_GET":
                            case 137:
                                message.cmd = 137;
                                break;
                            case "CONFIGURATION_REPORT":
                            case 138:
                                message.cmd = 138;
                                break;
                            case "CONFIGURATION_SET":
                            case 139:
                                message.cmd = 139;
                                break;
                            case "CONTROLLER_CHANGE":
                            case 140:
                                message.cmd = 140;
                                break;
                            case "CONTROLLER_CHANGE_STATUS":
                            case 141:
                                message.cmd = 141;
                                break;
                            case "CRC_16_ENCAP":
                            case 142:
                                message.cmd = 142;
                                break;
                            case "CTRL_REPLICATION_TRANSFER_GROUP":
                            case 143:
                                message.cmd = 143;
                                break;
                            case "CTRL_REPLICATION_TRANSFER_GROUP_NAME":
                            case 144:
                                message.cmd = 144;
                                break;
                            case "CTRL_REPLICATION_TRANSFER_SCENE":
                            case 145:
                                message.cmd = 145;
                                break;
                            case "CTRL_REPLICATION_TRANSFER_SCENE_NAME":
                            case 146:
                                message.cmd = 146;
                                break;
                            case "DATE_GET":
                            case 147:
                                message.cmd = 147;
                                break;
                            case "DATE_REPORT":
                            case 148:
                                message.cmd = 148;
                                break;
                            case "DCP_EVENT_STATUS_GET":
                            case 149:
                                message.cmd = 149;
                                break;
                            case "DCP_EVENT_STATUS_REPORT":
                            case 150:
                                message.cmd = 150;
                                break;
                            case "DCP_LIST_GET":
                            case 151:
                                message.cmd = 151;
                                break;
                            case "DCP_LIST_REMOVE":
                            case 152:
                                message.cmd = 152;
                                break;
                            case "DCP_LIST_REPORT":
                            case 153:
                                message.cmd = 153;
                                break;
                            case "DCP_LIST_SET":
                            case 154:
                                message.cmd = 154;
                                break;
                            case "DCP_LIST_SUPPORTED_GET":
                            case 155:
                                message.cmd = 155;
                                break;
                            case "DCP_LIST_SUPPORTED_REPORT":
                            case 156:
                                message.cmd = 156;
                                break;
                            case "DEFAULT_SET":
                            case 157:
                                message.cmd = 157;
                                break;
                            case "DEFAULT_SET_COMPLETE":
                            case 158:
                                message.cmd = 158;
                                break;
                            case "DEVICE_RESET_LOCALLY_NOTIFICATION":
                            case 159:
                                message.cmd = 159;
                                break;
                            case "DMX_ADDRESS_GET":
                            case 160:
                                message.cmd = 160;
                                break;
                            case "DMX_ADDRESS_REPORT":
                            case 161:
                                message.cmd = 161;
                                break;
                            case "DMX_ADDRESS_SET":
                            case 162:
                                message.cmd = 162;
                                break;
                            case "DMX_CAPABILITY_GET":
                            case 163:
                                message.cmd = 163;
                                break;
                            case "DMX_CAPABILITY_REPORT":
                            case 164:
                                message.cmd = 164;
                                break;
                            case "DMX_DATA":
                            case 165:
                                message.cmd = 165;
                                break;
                            case "DOOR_LOCK_CONFIGURATION_GET":
                            case 166:
                                message.cmd = 166;
                                break;
                            case "DOOR_LOCK_CONFIGURATION_REPORT":
                            case 167:
                                message.cmd = 167;
                                break;
                            case "DOOR_LOCK_CONFIGURATION_SET":
                            case 168:
                                message.cmd = 168;
                                break;
                            case "DOOR_LOCK_LOGGING_RECORDS_SUPPORTED_GET":
                            case 169:
                                message.cmd = 169;
                                break;
                            case "DOOR_LOCK_LOGGING_RECORDS_SUPPORTED_REPORT":
                            case 170:
                                message.cmd = 170;
                                break;
                            case "DOOR_LOCK_OPERATION_GET":
                            case 171:
                                message.cmd = 171;
                                break;
                            case "DOOR_LOCK_OPERATION_REPORT":
                            case 172:
                                message.cmd = 172;
                                break;
                            case "DOOR_LOCK_OPERATION_SET":
                            case 173:
                                message.cmd = 173;
                                break;
                            case "ENERGY_PRODUCTION_GET":
                            case 174:
                                message.cmd = 174;
                                break;
                            case "ENERGY_PRODUCTION_REPORT":
                            case 175:
                                message.cmd = 175;
                                break;
                            case "ENTRY_CONTROL_CONFIGURATION_GET":
                            case 176:
                                message.cmd = 176;
                                break;
                            case "ENTRY_CONTROL_CONFIGURATION_REPORT":
                            case 177:
                                message.cmd = 177;
                                break;
                            case "ENTRY_CONTROL_CONFIGURATION_SET":
                            case 178:
                                message.cmd = 178;
                                break;
                            case "ENTRY_CONTROL_EVENT_SUPPORTED_GET":
                            case 179:
                                message.cmd = 179;
                                break;
                            case "ENTRY_CONTROL_EVENT_SUPPORTED_REPORT":
                            case 180:
                                message.cmd = 180;
                                break;
                            case "ENTRY_CONTROL_KEY_SUPPORTED_GET":
                            case 181:
                                message.cmd = 181;
                                break;
                            case "ENTRY_CONTROL_KEY_SUPPORTED_REPORT":
                            case 182:
                                message.cmd = 182;
                                break;
                            case "ENTRY_CONTROL_NOTIFICATION":
                            case 183:
                                message.cmd = 183;
                                break;
                            case "EVENT_SUPPORTED_GET":
                            case 184:
                                message.cmd = 184;
                                break;
                            case "EVENT_SUPPORTED_REPORT":
                            case 185:
                                message.cmd = 185;
                                break;
                            case "EXCLUDE_REQUEST":
                            case 186:
                                message.cmd = 186;
                                break;
                            case "FAILED_NODE_REMOVE":
                            case 187:
                                message.cmd = 187;
                                break;
                            case "FAILED_NODE_REMOVE_STATUS":
                            case 188:
                                message.cmd = 188;
                                break;
                            case "FAILED_NODE_REPLACE":
                            case 189:
                                message.cmd = 189;
                                break;
                            case "FAILED_NODE_REPLACE_STATUS":
                            case 190:
                                message.cmd = 190;
                                break;
                            case "FIND_NODES_IN_RANGE":
                            case 191:
                                message.cmd = 191;
                                break;
                            case "FIRMWARE_MD_GET":
                            case 192:
                                message.cmd = 192;
                                break;
                            case "FIRMWARE_MD_REPORT":
                            case 193:
                                message.cmd = 193;
                                break;
                            case "FIRMWARE_UPDATE_MD_GET":
                            case 194:
                                message.cmd = 194;
                                break;
                            case "FIRMWARE_UPDATE_MD_REPORT":
                            case 195:
                                message.cmd = 195;
                                break;
                            case "FIRMWARE_UPDATE_MD_REQUEST_GET":
                            case 196:
                                message.cmd = 196;
                                break;
                            case "FIRMWARE_UPDATE_MD_REQUEST_REPORT":
                            case 197:
                                message.cmd = 197;
                                break;
                            case "FIRMWARE_UPDATE_MD_STATUS_REPORT":
                            case 198:
                                message.cmd = 198;
                                break;
                            case "GATEWAY_CONFIGURATION_GET":
                            case 199:
                                message.cmd = 199;
                                break;
                            case "GATEWAY_CONFIGURATION_REPORT":
                            case 200:
                                message.cmd = 200;
                                break;
                            case "GATEWAY_CONFIGURATION_SET":
                            case 201:
                                message.cmd = 201;
                                break;
                            case "GATEWAY_CONFIGURATION_STATUS":
                            case 202:
                                message.cmd = 202;
                                break;
                            case "GATEWAY_LOCK_SET":
                            case 203:
                                message.cmd = 203;
                                break;
                            case "GATEWAY_MODE_GET":
                            case 204:
                                message.cmd = 204;
                                break;
                            case "GATEWAY_MODE_REPORT":
                            case 205:
                                message.cmd = 205;
                                break;
                            case "GATEWAY_MODE_SET":
                            case 206:
                                message.cmd = 206;
                                break;
                            case "GATEWAY_PEER_GET":
                            case 207:
                                message.cmd = 207;
                                break;
                            case "GATEWAY_PEER_REPORT":
                            case 208:
                                message.cmd = 208;
                                break;
                            case "GATEWAY_PEER_SET":
                            case 209:
                                message.cmd = 209;
                                break;
                            case "GEOGRAPHIC_LOCATION_GET":
                            case 210:
                                message.cmd = 210;
                                break;
                            case "GEOGRAPHIC_LOCATION_REPORT":
                            case 211:
                                message.cmd = 211;
                                break;
                            case "GEOGRAPHIC_LOCATION_SET":
                            case 212:
                                message.cmd = 212;
                                break;
                            case "GET_NODES_IN_RANGE":
                            case 213:
                                message.cmd = 213;
                                break;
                            case "GROUPING_NAME_GET":
                            case 214:
                                message.cmd = 214;
                                break;
                            case "GROUPING_NAME_REPORT":
                            case 215:
                                message.cmd = 215;
                                break;
                            case "GROUPING_NAME_SET":
                            case 216:
                                message.cmd = 216;
                                break;
                            case "HAIL":
                            case 217:
                                message.cmd = 217;
                                break;
                            case "HRV_CONTROL_BYPASS_GET":
                            case 218:
                                message.cmd = 218;
                                break;
                            case "HRV_CONTROL_BYPASS_REPORT":
                            case 219:
                                message.cmd = 219;
                                break;
                            case "HRV_CONTROL_BYPASS_SET":
                            case 220:
                                message.cmd = 220;
                                break;
                            case "HRV_CONTROL_MODE_GET":
                            case 221:
                                message.cmd = 221;
                                break;
                            case "HRV_CONTROL_MODE_REPORT":
                            case 222:
                                message.cmd = 222;
                                break;
                            case "HRV_CONTROL_MODE_SET":
                            case 223:
                                message.cmd = 223;
                                break;
                            case "HRV_CONTROL_MODE_SUPPORTED_GET":
                            case 224:
                                message.cmd = 224;
                                break;
                            case "HRV_CONTROL_MODE_SUPPORTED_REPORT":
                            case 225:
                                message.cmd = 225;
                                break;
                            case "HRV_CONTROL_VENTILATION_RATE_GET":
                            case 226:
                                message.cmd = 226;
                                break;
                            case "HRV_CONTROL_VENTILATION_RATE_REPORT":
                            case 227:
                                message.cmd = 227;
                                break;
                            case "HRV_CONTROL_VENTILATION_RATE_SET":
                            case 228:
                                message.cmd = 228;
                                break;
                            case "HRV_STATUS_GET":
                            case 229:
                                message.cmd = 229;
                                break;
                            case "HRV_STATUS_REPORT":
                            case 230:
                                message.cmd = 230;
                                break;
                            case "HRV_STATUS_SUPPORTED_GET":
                            case 231:
                                message.cmd = 231;
                                break;
                            case "HRV_STATUS_SUPPORTED_REPORT":
                            case 232:
                                message.cmd = 232;
                                break;
                            case "HUMIDITY_CONTROL_MODE_GET":
                            case 233:
                                message.cmd = 233;
                                break;
                            case "HUMIDITY_CONTROL_MODE_REPORT":
                            case 234:
                                message.cmd = 234;
                                break;
                            case "HUMIDITY_CONTROL_MODE_SET":
                            case 235:
                                message.cmd = 235;
                                break;
                            case "HUMIDITY_CONTROL_MODE_SUPPORTED_GET":
                            case 236:
                                message.cmd = 236;
                                break;
                            case "HUMIDITY_CONTROL_MODE_SUPPORTED_REPORT":
                            case 237:
                                message.cmd = 237;
                                break;
                            case "HUMIDITY_CONTROL_OPERATING_STATE_GET":
                            case 238:
                                message.cmd = 238;
                                break;
                            case "HUMIDITY_CONTROL_OPERATING_STATE_REPORT":
                            case 239:
                                message.cmd = 239;
                                break;
                            case "HUMIDITY_CONTROL_SETPOINT_CAPABILITIES_GET":
                            case 240:
                                message.cmd = 240;
                                break;
                            case "HUMIDITY_CONTROL_SETPOINT_CAPABILITIES_REPORT":
                            case 241:
                                message.cmd = 241;
                                break;
                            case "HUMIDITY_CONTROL_SETPOINT_GET":
                            case 242:
                                message.cmd = 242;
                                break;
                            case "HUMIDITY_CONTROL_SETPOINT_REPORT":
                            case 243:
                                message.cmd = 243;
                                break;
                            case "HUMIDITY_CONTROL_SETPOINT_SCALE_SUPPORTED_GET":
                            case 244:
                                message.cmd = 244;
                                break;
                            case "HUMIDITY_CONTROL_SETPOINT_SCALE_SUPPORTED_REPORT":
                            case 245:
                                message.cmd = 245;
                                break;
                            case "HUMIDITY_CONTROL_SETPOINT_SET":
                            case 246:
                                message.cmd = 246;
                                break;
                            case "HUMIDITY_CONTROL_SETPOINT_SUPPORTED_GET":
                            case 247:
                                message.cmd = 247;
                                break;
                            case "HUMIDITY_CONTROL_SETPOINT_SUPPORTED_REPORT":
                            case 248:
                                message.cmd = 248;
                                break;
                            case "INDICATOR_GET":
                            case 249:
                                message.cmd = 249;
                                break;
                            case "INDICATOR_REPORT":
                            case 250:
                                message.cmd = 250;
                                break;
                            case "INDICATOR_SET":
                            case 251:
                                message.cmd = 251;
                                break;
                            case "INITIATE":
                            case 252:
                                message.cmd = 252;
                                break;
                            case "IP_ASSOCIATION_GET":
                            case 253:
                                message.cmd = 253;
                                break;
                            case "IP_ASSOCIATION_REMOVE":
                            case 254:
                                message.cmd = 254;
                                break;
                            case "IP_ASSOCIATION_REPORT":
                            case 255:
                                message.cmd = 255;
                                break;
                            case "IP_ASSOCIATION_SET":
                            case 256:
                                message.cmd = 256;
                                break;
                            case "IP_CONFIGURATION_GET":
                            case 257:
                                message.cmd = 257;
                                break;
                            case "IP_CONFIGURATION_RELEASE":
                            case 258:
                                message.cmd = 258;
                                break;
                            case "IP_CONFIGURATION_RENEW":
                            case 259:
                                message.cmd = 259;
                                break;
                            case "IP_CONFIGURATION_REPORT":
                            case 260:
                                message.cmd = 260;
                                break;
                            case "IP_CONFIGURATION_SET":
                            case 261:
                                message.cmd = 261;
                                break;
                            case "IRRIGATION_SYSTEM_CONFIG_GET":
                            case 262:
                                message.cmd = 262;
                                break;
                            case "IRRIGATION_SYSTEM_CONFIG_REPORT":
                            case 263:
                                message.cmd = 263;
                                break;
                            case "IRRIGATION_SYSTEM_CONFIG_SET":
                            case 264:
                                message.cmd = 264;
                                break;
                            case "IRRIGATION_SYSTEM_INFO_GET":
                            case 265:
                                message.cmd = 265;
                                break;
                            case "IRRIGATION_SYSTEM_INFO_REPORT":
                            case 266:
                                message.cmd = 266;
                                break;
                            case "IRRIGATION_SYSTEM_SHUTOFF":
                            case 267:
                                message.cmd = 267;
                                break;
                            case "IRRIGATION_SYSTEM_STATUS_GET":
                            case 268:
                                message.cmd = 268;
                                break;
                            case "IRRIGATION_SYSTEM_STATUS_REPORT":
                            case 269:
                                message.cmd = 269;
                                break;
                            case "IRRIGATION_VALVE_CONFIG_GET":
                            case 270:
                                message.cmd = 270;
                                break;
                            case "IRRIGATION_VALVE_CONFIG_REPORT":
                            case 271:
                                message.cmd = 271;
                                break;
                            case "IRRIGATION_VALVE_CONFIG_SET":
                            case 272:
                                message.cmd = 272;
                                break;
                            case "IRRIGATION_VALVE_INFO_GET":
                            case 273:
                                message.cmd = 273;
                                break;
                            case "IRRIGATION_VALVE_INFO_REPORT":
                            case 274:
                                message.cmd = 274;
                                break;
                            case "IRRIGATION_VALVE_RUN":
                            case 275:
                                message.cmd = 275;
                                break;
                            case "IRRIGATION_VALVE_TABLE_GET":
                            case 276:
                                message.cmd = 276;
                                break;
                            case "IRRIGATION_VALVE_TABLE_REPORT":
                            case 277:
                                message.cmd = 277;
                                break;
                            case "IRRIGATION_VALVE_TABLE_RUN":
                            case 278:
                                message.cmd = 278;
                                break;
                            case "IRRIGATION_VALVE_TABLE_SET":
                            case 279:
                                message.cmd = 279;
                                break;
                            case "KEX_FAIL":
                            case 280:
                                message.cmd = 280;
                                break;
                            case "KEX_GET":
                            case 281:
                                message.cmd = 281;
                                break;
                            case "KEX_REPORT":
                            case 282:
                                message.cmd = 282;
                                break;
                            case "KEX_SET":
                            case 283:
                                message.cmd = 283;
                                break;
                            case "LANGUAGE_GET":
                            case 284:
                                message.cmd = 284;
                                break;
                            case "LANGUAGE_REPORT":
                            case 285:
                                message.cmd = 285;
                                break;
                            case "LANGUAGE_SET":
                            case 286:
                                message.cmd = 286;
                                break;
                            case "LAST_WORKING_ROUTE_GET":
                            case 287:
                                message.cmd = 287;
                                break;
                            case "LAST_WORKING_ROUTE_REPORT":
                            case 288:
                                message.cmd = 288;
                                break;
                            case "LAST_WORKING_ROUTE_SET":
                            case 289:
                                message.cmd = 289;
                                break;
                            case "LEARN_MODE_SET":
                            case 290:
                                message.cmd = 290;
                                break;
                            case "LEARN_MODE_SET_STATUS":
                            case 291:
                                message.cmd = 291;
                                break;
                            case "LOCK_GET":
                            case 292:
                                message.cmd = 292;
                                break;
                            case "LOCK_REPORT":
                            case 293:
                                message.cmd = 293;
                                break;
                            case "LOCK_SET":
                            case 294:
                                message.cmd = 294;
                                break;
                            case "LOST":
                            case 295:
                                message.cmd = 295;
                                break;
                            case "LOWPAN_FIRST_FRAGMENT":
                            case 296:
                                message.cmd = 296;
                                break;
                            case "LOWPAN_SUBSEQUENT_FRAGMENT":
                            case 297:
                                message.cmd = 297;
                                break;
                            case "MAILBOX_CONFIGURATION_GET":
                            case 298:
                                message.cmd = 298;
                                break;
                            case "MAILBOX_CONFIGURATION_REPORT":
                            case 299:
                                message.cmd = 299;
                                break;
                            case "MAILBOX_CONFIGURATION_SET":
                            case 300:
                                message.cmd = 300;
                                break;
                            case "MAILBOX_NODE_FAILING":
                            case 301:
                                message.cmd = 301;
                                break;
                            case "MAILBOX_QUEUE":
                            case 302:
                                message.cmd = 302;
                                break;
                            case "MAILBOX_WAKEUP_NOTIFICATION":
                            case 303:
                                message.cmd = 303;
                                break;
                            case "MANUFACTURER_SPECIFIC_GET":
                            case 304:
                                message.cmd = 304;
                                break;
                            case "MANUFACTURER_SPECIFIC_REPORT":
                            case 305:
                                message.cmd = 305;
                                break;
                            case "METER_GET":
                            case 306:
                                message.cmd = 306;
                                break;
                            case "METER_PULSE_GET":
                            case 307:
                                message.cmd = 307;
                                break;
                            case "METER_PULSE_REPORT":
                            case 308:
                                message.cmd = 308;
                                break;
                            case "METER_REPORT":
                            case 309:
                                message.cmd = 309;
                                break;
                            case "METER_TBL_CURRENT_DATA_GET":
                            case 310:
                                message.cmd = 310;
                                break;
                            case "METER_TBL_CURRENT_DATA_REPORT":
                            case 311:
                                message.cmd = 311;
                                break;
                            case "METER_TBL_HISTORICAL_DATA_GET":
                            case 312:
                                message.cmd = 312;
                                break;
                            case "METER_TBL_HISTORICAL_DATA_REPORT":
                            case 313:
                                message.cmd = 313;
                                break;
                            case "METER_TBL_PUSH_CONFIGURATION_GET":
                            case 314:
                                message.cmd = 314;
                                break;
                            case "METER_TBL_PUSH_CONFIGURATION_REPORT":
                            case 315:
                                message.cmd = 315;
                                break;
                            case "METER_TBL_PUSH_CONFIGURATION_SET":
                            case 316:
                                message.cmd = 316;
                                break;
                            case "METER_TBL_REPORT":
                            case 317:
                                message.cmd = 317;
                                break;
                            case "METER_TBL_STATUS_DATE_GET":
                            case 318:
                                message.cmd = 318;
                                break;
                            case "METER_TBL_STATUS_DEPTH_GET":
                            case 319:
                                message.cmd = 319;
                                break;
                            case "METER_TBL_STATUS_REPORT":
                            case 320:
                                message.cmd = 320;
                                break;
                            case "METER_TBL_STATUS_SUPPORTED_GET":
                            case 321:
                                message.cmd = 321;
                                break;
                            case "METER_TBL_STATUS_SUPPORTED_REPORT":
                            case 322:
                                message.cmd = 322;
                                break;
                            case "METER_TBL_TABLE_CAPABILITY_GET":
                            case 323:
                                message.cmd = 323;
                                break;
                            case "METER_TBL_TABLE_ID_GET":
                            case 324:
                                message.cmd = 324;
                                break;
                            case "METER_TBL_TABLE_ID_REPORT":
                            case 325:
                                message.cmd = 325;
                                break;
                            case "METER_TBL_TABLE_POINT_ADM_NO_GET":
                            case 326:
                                message.cmd = 326;
                                break;
                            case "METER_TBL_TABLE_POINT_ADM_NO_REPORT":
                            case 327:
                                message.cmd = 327;
                                break;
                            case "METER_TBL_TABLE_POINT_ADM_NO_SET":
                            case 328:
                                message.cmd = 328;
                                break;
                            case "MOVE_TO_POSITION_GET":
                            case 329:
                                message.cmd = 329;
                                break;
                            case "MOVE_TO_POSITION_REPORT":
                            case 330:
                                message.cmd = 330;
                                break;
                            case "MOVE_TO_POSITION_SET":
                            case 331:
                                message.cmd = 331;
                                break;
                            case "MULTI_CHANNEL_ASSOCIATION_GET":
                            case 332:
                                message.cmd = 332;
                                break;
                            case "MULTI_CHANNEL_ASSOCIATION_GROUPINGS_GET":
                            case 333:
                                message.cmd = 333;
                                break;
                            case "MULTI_CHANNEL_ASSOCIATION_GROUPINGS_REPORT":
                            case 334:
                                message.cmd = 334;
                                break;
                            case "MULTI_CHANNEL_ASSOCIATION_REMOVE":
                            case 335:
                                message.cmd = 335;
                                break;
                            case "MULTI_CHANNEL_ASSOCIATION_REPORT":
                            case 336:
                                message.cmd = 336;
                                break;
                            case "MULTI_CHANNEL_ASSOCIATION_SET":
                            case 337:
                                message.cmd = 337;
                                break;
                            case "MULTI_CHANNEL_CAPABILITY_GET":
                            case 338:
                                message.cmd = 338;
                                break;
                            case "MULTI_CHANNEL_CAPABILITY_REPORT":
                            case 339:
                                message.cmd = 339;
                                break;
                            case "MULTI_CHANNEL_CMD_ENCAP":
                            case 340:
                                message.cmd = 340;
                                break;
                            case "MULTI_CHANNEL_END_POINT_FIND":
                            case 341:
                                message.cmd = 341;
                                break;
                            case "MULTI_CHANNEL_END_POINT_FIND_REPORT":
                            case 342:
                                message.cmd = 342;
                                break;
                            case "MULTI_CHANNEL_END_POINT_GET":
                            case 343:
                                message.cmd = 343;
                                break;
                            case "MULTI_CHANNEL_END_POINT_REPORT":
                            case 344:
                                message.cmd = 344;
                                break;
                            case "MULTI_CMD_ENCAP":
                            case 345:
                                message.cmd = 345;
                                break;
                            case "MULTI_INSTANCE_ASSOCIATION_GET":
                            case 346:
                                message.cmd = 346;
                                break;
                            case "MULTI_INSTANCE_ASSOCIATION_GROUPINGS_GET":
                            case 347:
                                message.cmd = 347;
                                break;
                            case "MULTI_INSTANCE_ASSOCIATION_GROUPINGS_REPORT":
                            case 348:
                                message.cmd = 348;
                                break;
                            case "MULTI_INSTANCE_ASSOCIATION_REMOVE":
                            case 349:
                                message.cmd = 349;
                                break;
                            case "MULTI_INSTANCE_ASSOCIATION_REPORT":
                            case 350:
                                message.cmd = 350;
                                break;
                            case "MULTI_INSTANCE_ASSOCIATION_SET":
                            case 351:
                                message.cmd = 351;
                                break;
                            case "MULTI_INSTANCE_CMD_ENCAP":
                            case 352:
                                message.cmd = 352;
                                break;
                            case "MULTI_INSTANCE_GET":
                            case 353:
                                message.cmd = 353;
                                break;
                            case "MULTI_INSTANCE_REPORT":
                            case 354:
                                message.cmd = 354;
                                break;
                            case "NETWORK_KEY_SET":
                            case 355:
                                message.cmd = 355;
                                break;
                            case "NETWORK_KEY_VERIFY":
                            case 356:
                                message.cmd = 356;
                                break;
                            case "NETWORK_UPDATE_REQUEST":
                            case 357:
                                message.cmd = 357;
                                break;
                            case "NETWORK_UPDATE_REQUEST_STATUS":
                            case 358:
                                message.cmd = 358;
                                break;
                            case "NEW_NODE_REGISTERED":
                            case 359:
                                message.cmd = 359;
                                break;
                            case "NEW_RANGE_REGISTERED":
                            case 360:
                                message.cmd = 360;
                                break;
                            case "NODE_ADD":
                            case 361:
                                message.cmd = 361;
                                break;
                            case "NODE_ADD_STATUS":
                            case 362:
                                message.cmd = 362;
                                break;
                            case "NODE_INFO":
                            case 363:
                                message.cmd = 363;
                                break;
                            case "NODE_INFORMATION_SEND":
                            case 364:
                                message.cmd = 364;
                                break;
                            case "NODE_INFO_CACHED_GET":
                            case 365:
                                message.cmd = 365;
                                break;
                            case "NODE_INFO_CACHED_REPORT":
                            case 366:
                                message.cmd = 366;
                                break;
                            case "NODE_LIST_GET":
                            case 367:
                                message.cmd = 367;
                                break;
                            case "NODE_LIST_REPORT":
                            case 368:
                                message.cmd = 368;
                                break;
                            case "NODE_NAMING_NODE_LOCATION_GET":
                            case 369:
                                message.cmd = 369;
                                break;
                            case "NODE_NAMING_NODE_LOCATION_REPORT":
                            case 370:
                                message.cmd = 370;
                                break;
                            case "NODE_NAMING_NODE_LOCATION_SET":
                            case 371:
                                message.cmd = 371;
                                break;
                            case "NODE_NAMING_NODE_NAME_GET":
                            case 372:
                                message.cmd = 372;
                                break;
                            case "NODE_NAMING_NODE_NAME_REPORT":
                            case 373:
                                message.cmd = 373;
                                break;
                            case "NODE_NAMING_NODE_NAME_SET":
                            case 374:
                                message.cmd = 374;
                                break;
                            case "NODE_NEIGHBOR_UPDATE_REQUEST":
                            case 375:
                                message.cmd = 375;
                                break;
                            case "NODE_NEIGHBOR_UPDATE_STATUS":
                            case 376:
                                message.cmd = 376;
                                break;
                            case "NODE_RANGE_INFO":
                            case 377:
                                message.cmd = 377;
                                break;
                            case "NODE_REMOVE":
                            case 378:
                                message.cmd = 378;
                                break;
                            case "NODE_REMOVE_STATUS":
                            case 379:
                                message.cmd = 379;
                                break;
                            case "NOTIFICATION_GET":
                            case 380:
                                message.cmd = 380;
                                break;
                            case "NOTIFICATION_REPORT":
                            case 381:
                                message.cmd = 381;
                                break;
                            case "NOTIFICATION_SET":
                            case 382:
                                message.cmd = 382;
                                break;
                            case "NOTIFICATION_SUPPORTED_GET":
                            case 383:
                                message.cmd = 383;
                                break;
                            case "NOTIFICATION_SUPPORTED_REPORT":
                            case 384:
                                message.cmd = 384;
                                break;
                            case "POWERLEVEL_GET":
                            case 385:
                                message.cmd = 385;
                                break;
                            case "POWERLEVEL_REPORT":
                            case 386:
                                message.cmd = 386;
                                break;
                            case "POWERLEVEL_SET":
                            case 387:
                                message.cmd = 387;
                                break;
                            case "POWERLEVEL_TEST_NODE_GET":
                            case 388:
                                message.cmd = 388;
                                break;
                            case "POWERLEVEL_TEST_NODE_REPORT":
                            case 389:
                                message.cmd = 389;
                                break;
                            case "POWERLEVEL_TEST_NODE_SET":
                            case 390:
                                message.cmd = 390;
                                break;
                            case "PREPAYMENT_BALANCE_GET":
                            case 391:
                                message.cmd = 391;
                                break;
                            case "PREPAYMENT_BALANCE_REPORT":
                            case 392:
                                message.cmd = 392;
                                break;
                            case "PREPAYMENT_SUPPORTED_GET":
                            case 393:
                                message.cmd = 393;
                                break;
                            case "PREPAYMENT_SUPPORTED_REPORT":
                            case 394:
                                message.cmd = 394;
                                break;
                            case "PROPRIETARY_GET":
                            case 395:
                                message.cmd = 395;
                                break;
                            case "PROPRIETARY_REPORT":
                            case 396:
                                message.cmd = 396;
                                break;
                            case "PROPRIETARY_SET":
                            case 397:
                                message.cmd = 397;
                                break;
                            case "PROTECTION_GET":
                            case 398:
                                message.cmd = 398;
                                break;
                            case "PROTECTION_REPORT":
                            case 399:
                                message.cmd = 399;
                                break;
                            case "PROTECTION_SET":
                            case 400:
                                message.cmd = 400;
                                break;
                            case "PUBLIC_KEY_REPORT":
                            case 401:
                                message.cmd = 401;
                                break;
                            case "RATE_TBL_ACTIVE_RATE_GET":
                            case 402:
                                message.cmd = 402;
                                break;
                            case "RATE_TBL_ACTIVE_RATE_REPORT":
                            case 403:
                                message.cmd = 403;
                                break;
                            case "RATE_TBL_CURRENT_DATA_GET":
                            case 404:
                                message.cmd = 404;
                                break;
                            case "RATE_TBL_CURRENT_DATA_REPORT":
                            case 405:
                                message.cmd = 405;
                                break;
                            case "RATE_TBL_GET":
                            case 406:
                                message.cmd = 406;
                                break;
                            case "RATE_TBL_HISTORICAL_DATA_GET":
                            case 407:
                                message.cmd = 407;
                                break;
                            case "RATE_TBL_HISTORICAL_DATA_REPORT":
                            case 408:
                                message.cmd = 408;
                                break;
                            case "RATE_TBL_REMOVE":
                            case 409:
                                message.cmd = 409;
                                break;
                            case "RATE_TBL_REPORT":
                            case 410:
                                message.cmd = 410;
                                break;
                            case "RATE_TBL_SET":
                            case 411:
                                message.cmd = 411;
                                break;
                            case "RATE_TBL_SUPPORTED_GET":
                            case 412:
                                message.cmd = 412;
                                break;
                            case "RATE_TBL_SUPPORTED_REPORT":
                            case 413:
                                message.cmd = 413;
                                break;
                            case "RECORD_GET":
                            case 414:
                                message.cmd = 414;
                                break;
                            case "RECORD_REPORT":
                            case 415:
                                message.cmd = 415;
                                break;
                            case "REMOTE_ASSOCIATION_ACTIVATE":
                            case 416:
                                message.cmd = 416;
                                break;
                            case "REMOTE_ASSOCIATION_CONFIGURATION_GET":
                            case 417:
                                message.cmd = 417;
                                break;
                            case "REMOTE_ASSOCIATION_CONFIGURATION_REPORT":
                            case 418:
                                message.cmd = 418;
                                break;
                            case "REMOTE_ASSOCIATION_CONFIGURATION_SET":
                            case 419:
                                message.cmd = 419;
                                break;
                            case "REQUEST_NODE_INFO":
                            case 420:
                                message.cmd = 420;
                                break;
                            case "RETURN_ROUTE_ASSIGN":
                            case 421:
                                message.cmd = 421;
                                break;
                            case "RETURN_ROUTE_ASSIGN_COMPLETE":
                            case 422:
                                message.cmd = 422;
                                break;
                            case "RETURN_ROUTE_DELETE":
                            case 423:
                                message.cmd = 423;
                                break;
                            case "RETURN_ROUTE_DELETE_COMPLETE":
                            case 424:
                                message.cmd = 424;
                                break;
                            case "SCENE_ACTIVATION_SET":
                            case 425:
                                message.cmd = 425;
                                break;
                            case "SCENE_ACTUATOR_CONF_GET":
                            case 426:
                                message.cmd = 426;
                                break;
                            case "SCENE_ACTUATOR_CONF_REPORT":
                            case 427:
                                message.cmd = 427;
                                break;
                            case "SCENE_ACTUATOR_CONF_SET":
                            case 428:
                                message.cmd = 428;
                                break;
                            case "SCENE_CONTROLLER_CONF_GET":
                            case 429:
                                message.cmd = 429;
                                break;
                            case "SCENE_CONTROLLER_CONF_REPORT":
                            case 430:
                                message.cmd = 430;
                                break;
                            case "SCENE_CONTROLLER_CONF_SET":
                            case 431:
                                message.cmd = 431;
                                break;
                            case "SCHEDULE_CHANGED_GET":
                            case 432:
                                message.cmd = 432;
                                break;
                            case "SCHEDULE_CHANGED_REPORT":
                            case 433:
                                message.cmd = 433;
                                break;
                            case "SCHEDULE_ENTRY_LOCK_ENABLE_ALL_SET":
                            case 434:
                                message.cmd = 434;
                                break;
                            case "SCHEDULE_ENTRY_LOCK_ENABLE_SET":
                            case 435:
                                message.cmd = 435;
                                break;
                            case "SCHEDULE_ENTRY_LOCK_WEEK_DAY_GET":
                            case 436:
                                message.cmd = 436;
                                break;
                            case "SCHEDULE_ENTRY_LOCK_WEEK_DAY_REPORT":
                            case 437:
                                message.cmd = 437;
                                break;
                            case "SCHEDULE_ENTRY_LOCK_WEEK_DAY_SET":
                            case 438:
                                message.cmd = 438;
                                break;
                            case "SCHEDULE_ENTRY_LOCK_YEAR_DAY_GET":
                            case 439:
                                message.cmd = 439;
                                break;
                            case "SCHEDULE_ENTRY_LOCK_YEAR_DAY_REPORT":
                            case 440:
                                message.cmd = 440;
                                break;
                            case "SCHEDULE_ENTRY_LOCK_YEAR_DAY_SET":
                            case 441:
                                message.cmd = 441;
                                break;
                            case "SCHEDULE_ENTRY_TYPE_SUPPORTED_GET":
                            case 442:
                                message.cmd = 442;
                                break;
                            case "SCHEDULE_ENTRY_TYPE_SUPPORTED_REPORT":
                            case 443:
                                message.cmd = 443;
                                break;
                            case "SCHEDULE_GET":
                            case 444:
                                message.cmd = 444;
                                break;
                            case "SCHEDULE_OVERRIDE_GET":
                            case 445:
                                message.cmd = 445;
                                break;
                            case "SCHEDULE_OVERRIDE_REPORT":
                            case 446:
                                message.cmd = 446;
                                break;
                            case "SCHEDULE_OVERRIDE_SET":
                            case 447:
                                message.cmd = 447;
                                break;
                            case "SCHEDULE_REMOVE":
                            case 448:
                                message.cmd = 448;
                                break;
                            case "SCHEDULE_REPORT":
                            case 449:
                                message.cmd = 449;
                                break;
                            case "SCHEDULE_SET":
                            case 450:
                                message.cmd = 450;
                                break;
                            case "SCHEDULE_STATE_GET":
                            case 451:
                                message.cmd = 451;
                                break;
                            case "SCHEDULE_STATE_REPORT":
                            case 452:
                                message.cmd = 452;
                                break;
                            case "SCHEDULE_STATE_SET":
                            case 453:
                                message.cmd = 453;
                                break;
                            case "SCHEDULE_SUPPORTED_GET":
                            case 454:
                                message.cmd = 454;
                                break;
                            case "SCHEDULE_SUPPORTED_REPORT":
                            case 455:
                                message.cmd = 455;
                                break;
                            case "SCREEN_ATTRIBUTES_GET":
                            case 456:
                                message.cmd = 456;
                                break;
                            case "SCREEN_ATTRIBUTES_REPORT":
                            case 457:
                                message.cmd = 457;
                                break;
                            case "SCREEN_MD_GET":
                            case 458:
                                message.cmd = 458;
                                break;
                            case "SCREEN_MD_REPORT":
                            case 459:
                                message.cmd = 459;
                                break;
                            case "SECURITY_2_CAPABILITIES_GET":
                            case 460:
                                message.cmd = 460;
                                break;
                            case "SECURITY_2_CAPABILITIES_REPORT":
                            case 461:
                                message.cmd = 461;
                                break;
                            case "SECURITY_2_COMMANDS_SUPPORTED_GET":
                            case 462:
                                message.cmd = 462;
                                break;
                            case "SECURITY_2_COMMANDS_SUPPORTED_REPORT":
                            case 463:
                                message.cmd = 463;
                                break;
                            case "SECURITY_2_MESSAGE_ENCAPSULATION":
                            case 464:
                                message.cmd = 464;
                                break;
                            case "SECURITY_2_NETWORK_KEY_GET":
                            case 465:
                                message.cmd = 465;
                                break;
                            case "SECURITY_2_NETWORK_KEY_REPORT":
                            case 466:
                                message.cmd = 466;
                                break;
                            case "SECURITY_2_NETWORK_KEY_VERIFY":
                            case 467:
                                message.cmd = 467;
                                break;
                            case "SECURITY_2_NONCE_GET":
                            case 468:
                                message.cmd = 468;
                                break;
                            case "SECURITY_2_NONCE_REPORT":
                            case 469:
                                message.cmd = 469;
                                break;
                            case "SECURITY_2_TRANSFER_END":
                            case 470:
                                message.cmd = 470;
                                break;
                            case "SECURITY_COMMANDS_SUPPORTED_GET":
                            case 471:
                                message.cmd = 471;
                                break;
                            case "SECURITY_COMMANDS_SUPPORTED_REPORT":
                            case 472:
                                message.cmd = 472;
                                break;
                            case "SECURITY_MESSAGE_ENCAPSULATION":
                            case 473:
                                message.cmd = 473;
                                break;
                            case "SECURITY_MESSAGE_ENCAPSULATION_NONCE_GET":
                            case 474:
                                message.cmd = 474;
                                break;
                            case "SECURITY_NONCE_GET":
                            case 475:
                                message.cmd = 475;
                                break;
                            case "SECURITY_NONCE_REPORT":
                            case 476:
                                message.cmd = 476;
                                break;
                            case "SECURITY_PANEL_MODE_GET":
                            case 477:
                                message.cmd = 477;
                                break;
                            case "SECURITY_PANEL_MODE_REPORT":
                            case 478:
                                message.cmd = 478;
                                break;
                            case "SECURITY_PANEL_MODE_SET":
                            case 479:
                                message.cmd = 479;
                                break;
                            case "SECURITY_PANEL_MODE_SUPPORTED_GET":
                            case 480:
                                message.cmd = 480;
                                break;
                            case "SECURITY_PANEL_MODE_SUPPORTED_REPORT":
                            case 481:
                                message.cmd = 481;
                                break;
                            case "SECURITY_PANEL_ZONE_NUMBER_SUPPORTED_GET":
                            case 482:
                                message.cmd = 482;
                                break;
                            case "SECURITY_PANEL_ZONE_SENSOR_INSTALLED_GET":
                            case 483:
                                message.cmd = 483;
                                break;
                            case "SECURITY_PANEL_ZONE_SENSOR_STATE_GET":
                            case 484:
                                message.cmd = 484;
                                break;
                            case "SECURITY_PANEL_ZONE_SENSOR_STATE_REPORT":
                            case 485:
                                message.cmd = 485;
                                break;
                            case "SECURITY_PANEL_ZONE_SENSOR_TYPE_GET":
                            case 486:
                                message.cmd = 486;
                                break;
                            case "SECURITY_PANEL_ZONE_SENSOR_TYPE_REPORT":
                            case 487:
                                message.cmd = 487;
                                break;
                            case "SECURITY_PANEL_ZONE_STATE_GET":
                            case 488:
                                message.cmd = 488;
                                break;
                            case "SECURITY_PANEL_ZONE_STATE_REPORT":
                            case 489:
                                message.cmd = 489;
                                break;
                            case "SECURITY_PANEL_ZONE_SUPPORTED_REPORT":
                            case 490:
                                message.cmd = 490;
                                break;
                            case "SECURITY_PANEL_ZONE_TYPE_GET":
                            case 491:
                                message.cmd = 491;
                                break;
                            case "SECURITY_PANEL_ZONE_TYPE_REPORT":
                            case 492:
                                message.cmd = 492;
                                break;
                            case "SECURITY_SCHEME_GET":
                            case 493:
                                message.cmd = 493;
                                break;
                            case "SECURITY_SCHEME_INHERIT":
                            case 494:
                                message.cmd = 494;
                                break;
                            case "SECURITY_SCHEME_REPORT":
                            case 495:
                                message.cmd = 495;
                                break;
                            case "SENSOR_ALARM_GET":
                            case 496:
                                message.cmd = 496;
                                break;
                            case "SENSOR_ALARM_REPORT":
                            case 497:
                                message.cmd = 497;
                                break;
                            case "SENSOR_ALARM_SET":
                            case 498:
                                message.cmd = 498;
                                break;
                            case "SENSOR_ALARM_SUPPORTED_GET":
                            case 499:
                                message.cmd = 499;
                                break;
                            case "SENSOR_ALARM_SUPPORTED_REPORT":
                            case 500:
                                message.cmd = 500;
                                break;
                            case "SENSOR_BINARY_GET":
                            case 501:
                                message.cmd = 501;
                                break;
                            case "SENSOR_BINARY_REPORT":
                            case 502:
                                message.cmd = 502;
                                break;
                            case "SENSOR_MULTILEVEL_GET":
                            case 503:
                                message.cmd = 503;
                                break;
                            case "SENSOR_MULTILEVEL_REPORT":
                            case 504:
                                message.cmd = 504;
                                break;
                            case "SENSOR_TRIGGER_LEVEL_GET":
                            case 505:
                                message.cmd = 505;
                                break;
                            case "SENSOR_TRIGGER_LEVEL_REPORT":
                            case 506:
                                message.cmd = 506;
                                break;
                            case "SENSOR_TRIGGER_LEVEL_SET":
                            case 507:
                                message.cmd = 507;
                                break;
                            case "SIMPLE_AV_CONTROL_GET":
                            case 508:
                                message.cmd = 508;
                                break;
                            case "SIMPLE_AV_CONTROL_REPORT":
                            case 509:
                                message.cmd = 509;
                                break;
                            case "SIMPLE_AV_CONTROL_SET":
                            case 510:
                                message.cmd = 510;
                                break;
                            case "SIMPLE_AV_CONTROL_SUPPORTED_GET":
                            case 511:
                                message.cmd = 511;
                                break;
                            case "SIMPLE_AV_CONTROL_SUPPORTED_REPORT":
                            case 512:
                                message.cmd = 512;
                                break;
                            case "STATISTICS_CLEAR":
                            case 513:
                                message.cmd = 513;
                                break;
                            case "STATISTICS_GET":
                            case 514:
                                message.cmd = 514;
                                break;
                            case "STATISTICS_REPORT":
                            case 515:
                                message.cmd = 515;
                                break;
                            case "SUPERVISION_GET":
                            case 516:
                                message.cmd = 516;
                                break;
                            case "SUPERVISION_REPORT":
                            case 517:
                                message.cmd = 517;
                                break;
                            case "SWITCH_ALL_GET":
                            case 518:
                                message.cmd = 518;
                                break;
                            case "SWITCH_ALL_OFF":
                            case 519:
                                message.cmd = 519;
                                break;
                            case "SWITCH_ALL_ON":
                            case 520:
                                message.cmd = 520;
                                break;
                            case "SWITCH_ALL_REPORT":
                            case 521:
                                message.cmd = 521;
                                break;
                            case "SWITCH_ALL_SET":
                            case 522:
                                message.cmd = 522;
                                break;
                            case "SWITCH_BINARY_GET":
                            case 523:
                                message.cmd = 523;
                                break;
                            case "SWITCH_BINARY_REPORT":
                            case 524:
                                message.cmd = 524;
                                break;
                            case "SWITCH_BINARY_SET":
                            case 525:
                                message.cmd = 525;
                                break;
                            case "SWITCH_COLOR_GET":
                            case 526:
                                message.cmd = 526;
                                break;
                            case "SWITCH_COLOR_REPORT":
                            case 527:
                                message.cmd = 527;
                                break;
                            case "SWITCH_COLOR_SET":
                            case 528:
                                message.cmd = 528;
                                break;
                            case "SWITCH_COLOR_START_LEVEL_CHANGE":
                            case 529:
                                message.cmd = 529;
                                break;
                            case "SWITCH_COLOR_STOP_LEVEL_CHANGE":
                            case 530:
                                message.cmd = 530;
                                break;
                            case "SWITCH_COLOR_SUPPORTED_GET":
                            case 531:
                                message.cmd = 531;
                                break;
                            case "SWITCH_COLOR_SUPPORTED_REPORT":
                            case 532:
                                message.cmd = 532;
                                break;
                            case "SWITCH_MULTILEVEL_GET":
                            case 533:
                                message.cmd = 533;
                                break;
                            case "SWITCH_MULTILEVEL_REPORT":
                            case 534:
                                message.cmd = 534;
                                break;
                            case "SWITCH_MULTILEVEL_SET":
                            case 535:
                                message.cmd = 535;
                                break;
                            case "SWITCH_MULTILEVEL_START_LEVEL_CHANGE":
                            case 536:
                                message.cmd = 536;
                                break;
                            case "SWITCH_MULTILEVEL_STOP_LEVEL_CHANGE":
                            case 537:
                                message.cmd = 537;
                                break;
                            case "SWITCH_TOGGLE_BINARY_GET":
                            case 538:
                                message.cmd = 538;
                                break;
                            case "SWITCH_TOGGLE_BINARY_REPORT":
                            case 539:
                                message.cmd = 539;
                                break;
                            case "SWITCH_TOGGLE_BINARY_SET":
                            case 540:
                                message.cmd = 540;
                                break;
                            case "SWITCH_TOGGLE_MULTILEVEL_GET":
                            case 541:
                                message.cmd = 541;
                                break;
                            case "SWITCH_TOGGLE_MULTILEVEL_REPORT":
                            case 542:
                                message.cmd = 542;
                                break;
                            case "SWITCH_TOGGLE_MULTILEVEL_SET":
                            case 543:
                                message.cmd = 543;
                                break;
                            case "SWITCH_TOGGLE_MULTILEVEL_START_LEVEL_CHANGE":
                            case 544:
                                message.cmd = 544;
                                break;
                            case "SWITCH_TOGGLE_MULTILEVEL_STOP_LEVEL_CHANGE":
                            case 545:
                                message.cmd = 545;
                                break;
                            case "TARIFF_TBL_COST_GET":
                            case 546:
                                message.cmd = 546;
                                break;
                            case "TARIFF_TBL_COST_REPORT":
                            case 547:
                                message.cmd = 547;
                                break;
                            case "TARIFF_TBL_GET":
                            case 548:
                                message.cmd = 548;
                                break;
                            case "TARIFF_TBL_REMOVE":
                            case 549:
                                message.cmd = 549;
                                break;
                            case "TARIFF_TBL_REPORT":
                            case 550:
                                message.cmd = 550;
                                break;
                            case "TARIFF_TBL_SET":
                            case 551:
                                message.cmd = 551;
                                break;
                            case "TARIFF_TBL_SUPPLIER_GET":
                            case 552:
                                message.cmd = 552;
                                break;
                            case "TARIFF_TBL_SUPPLIER_REPORT":
                            case 553:
                                message.cmd = 553;
                                break;
                            case "TARIFF_TBL_SUPPLIER_SET":
                            case 554:
                                message.cmd = 554;
                                break;
                            case "THERMOSTAT_FAN_MODE_GET":
                            case 555:
                                message.cmd = 555;
                                break;
                            case "THERMOSTAT_FAN_MODE_REPORT":
                            case 556:
                                message.cmd = 556;
                                break;
                            case "THERMOSTAT_FAN_MODE_SET":
                            case 557:
                                message.cmd = 557;
                                break;
                            case "THERMOSTAT_FAN_MODE_SUPPORTED_GET":
                            case 558:
                                message.cmd = 558;
                                break;
                            case "THERMOSTAT_FAN_MODE_SUPPORTED_REPORT":
                            case 559:
                                message.cmd = 559;
                                break;
                            case "THERMOSTAT_FAN_STATE_GET":
                            case 560:
                                message.cmd = 560;
                                break;
                            case "THERMOSTAT_FAN_STATE_REPORT":
                            case 561:
                                message.cmd = 561;
                                break;
                            case "THERMOSTAT_HEATING_MODE_GET":
                            case 562:
                                message.cmd = 562;
                                break;
                            case "THERMOSTAT_HEATING_MODE_REPORT":
                            case 563:
                                message.cmd = 563;
                                break;
                            case "THERMOSTAT_HEATING_MODE_SET":
                            case 564:
                                message.cmd = 564;
                                break;
                            case "THERMOSTAT_HEATING_RELAY_STATUS_GET":
                            case 565:
                                message.cmd = 565;
                                break;
                            case "THERMOSTAT_HEATING_RELAY_STATUS_REPORT":
                            case 566:
                                message.cmd = 566;
                                break;
                            case "THERMOSTAT_HEATING_SETPOINT_GET":
                            case 567:
                                message.cmd = 567;
                                break;
                            case "THERMOSTAT_HEATING_SETPOINT_REPORT":
                            case 568:
                                message.cmd = 568;
                                break;
                            case "THERMOSTAT_HEATING_SETPOINT_SET":
                            case 569:
                                message.cmd = 569;
                                break;
                            case "THERMOSTAT_HEATING_STATUS_GET":
                            case 570:
                                message.cmd = 570;
                                break;
                            case "THERMOSTAT_HEATING_STATUS_REPORT":
                            case 571:
                                message.cmd = 571;
                                break;
                            case "THERMOSTAT_HEATING_STATUS_SET":
                            case 572:
                                message.cmd = 572;
                                break;
                            case "THERMOSTAT_HEATING_TIMED_OFF_SET":
                            case 573:
                                message.cmd = 573;
                                break;
                            case "THERMOSTAT_MODE_GET":
                            case 574:
                                message.cmd = 574;
                                break;
                            case "THERMOSTAT_MODE_REPORT":
                            case 575:
                                message.cmd = 575;
                                break;
                            case "THERMOSTAT_MODE_SET":
                            case 576:
                                message.cmd = 576;
                                break;
                            case "THERMOSTAT_MODE_SUPPORTED_GET":
                            case 577:
                                message.cmd = 577;
                                break;
                            case "THERMOSTAT_MODE_SUPPORTED_REPORT":
                            case 578:
                                message.cmd = 578;
                                break;
                            case "THERMOSTAT_OPERATING_STATE_GET":
                            case 579:
                                message.cmd = 579;
                                break;
                            case "THERMOSTAT_OPERATING_STATE_REPORT":
                            case 580:
                                message.cmd = 580;
                                break;
                            case "THERMOSTAT_SETBACK_GET":
                            case 581:
                                message.cmd = 581;
                                break;
                            case "THERMOSTAT_SETBACK_REPORT":
                            case 582:
                                message.cmd = 582;
                                break;
                            case "THERMOSTAT_SETBACK_SET":
                            case 583:
                                message.cmd = 583;
                                break;
                            case "THERMOSTAT_SETPOINT_GET":
                            case 584:
                                message.cmd = 584;
                                break;
                            case "THERMOSTAT_SETPOINT_REPORT":
                            case 585:
                                message.cmd = 585;
                                break;
                            case "THERMOSTAT_SETPOINT_SET":
                            case 586:
                                message.cmd = 586;
                                break;
                            case "THERMOSTAT_SETPOINT_SUPPORTED_GET":
                            case 587:
                                message.cmd = 587;
                                break;
                            case "THERMOSTAT_SETPOINT_SUPPORTED_REPORT":
                            case 588:
                                message.cmd = 588;
                                break;
                            case "TIME_GET":
                            case 589:
                                message.cmd = 589;
                                break;
                            case "TIME_PARAMETERS_GET":
                            case 590:
                                message.cmd = 590;
                                break;
                            case "TIME_PARAMETERS_REPORT":
                            case 591:
                                message.cmd = 591;
                                break;
                            case "TIME_PARAMETERS_SET":
                            case 592:
                                message.cmd = 592;
                                break;
                            case "TIME_REPORT":
                            case 593:
                                message.cmd = 593;
                                break;
                            case "TRANSFER_END":
                            case 594:
                                message.cmd = 594;
                                break;
                            case "TRANSFER_NEW_PRIMARY_COMPLETE":
                            case 595:
                                message.cmd = 595;
                                break;
                            case "TRANSFER_NODE_INFO":
                            case 596:
                                message.cmd = 596;
                                break;
                            case "TRANSFER_PRESENTATION":
                            case 597:
                                message.cmd = 597;
                                break;
                            case "TRANSFER_RANGE_INFO":
                            case 598:
                                message.cmd = 598;
                                break;
                            case "UNSOLICITED_DESTINATION_GET":
                            case 599:
                                message.cmd = 599;
                                break;
                            case "UNSOLICITED_DESTINATION_REPORT":
                            case 600:
                                message.cmd = 600;
                                break;
                            case "UNSOLICITED_DESTINATION_SET":
                            case 601:
                                message.cmd = 601;
                                break;
                            case "USERS_NUMBER_GET":
                            case 602:
                                message.cmd = 602;
                                break;
                            case "USERS_NUMBER_REPORT":
                            case 603:
                                message.cmd = 603;
                                break;
                            case "USER_CODE_GET":
                            case 604:
                                message.cmd = 604;
                                break;
                            case "USER_CODE_REPORT":
                            case 605:
                                message.cmd = 605;
                                break;
                            case "USER_CODE_SET":
                            case 606:
                                message.cmd = 606;
                                break;
                            case "VERSION_COMMAND_CLASS_GET":
                            case 607:
                                message.cmd = 607;
                                break;
                            case "VERSION_COMMAND_CLASS_REPORT":
                            case 608:
                                message.cmd = 608;
                                break;
                            case "VERSION_GET":
                            case 609:
                                message.cmd = 609;
                                break;
                            case "VERSION_REPORT":
                            case 610:
                                message.cmd = 610;
                                break;
                            case "WAKE_UP_INTERVAL_GET":
                            case 611:
                                message.cmd = 611;
                                break;
                            case "WAKE_UP_INTERVAL_REPORT":
                            case 612:
                                message.cmd = 612;
                                break;
                            case "WAKE_UP_INTERVAL_SET":
                            case 613:
                                message.cmd = 613;
                                break;
                            case "WAKE_UP_NOTIFICATION":
                            case 614:
                                message.cmd = 614;
                                break;
                            case "WAKE_UP_NO_MORE_INFORMATION":
                            case 615:
                                message.cmd = 615;
                                break;
                            case "WINDOW_COVERING_GET":
                            case 616:
                                message.cmd = 616;
                                break;
                            case "WINDOW_COVERING_REPORT":
                            case 617:
                                message.cmd = 617;
                                break;
                            case "WINDOW_COVERING_SET":
                            case 618:
                                message.cmd = 618;
                                break;
                            case "WINDOW_COVERING_START_LEVEL_CHANGE":
                            case 619:
                                message.cmd = 619;
                                break;
                            case "WINDOW_COVERING_STOP_LEVEL_CHANGE":
                            case 620:
                                message.cmd = 620;
                                break;
                            case "WINDOW_COVERING_SUPPORTED_GET":
                            case 621:
                                message.cmd = 621;
                                break;
                            case "WINDOW_COVERING_SUPPORTED_REPORT":
                            case 622:
                                message.cmd = 622;
                                break;
                            case "ZIP_INV_NODE_SOLICITATION":
                            case 623:
                                message.cmd = 623;
                                break;
                            case "ZIP_NAMING_LOCATION_GET":
                            case 624:
                                message.cmd = 624;
                                break;
                            case "ZIP_NAMING_LOCATION_REPORT":
                            case 625:
                                message.cmd = 625;
                                break;
                            case "ZIP_NAMING_LOCATION_SET":
                            case 626:
                                message.cmd = 626;
                                break;
                            case "ZIP_NAMING_NAME_GET":
                            case 627:
                                message.cmd = 627;
                                break;
                            case "ZIP_NAMING_NAME_REPORT":
                            case 628:
                                message.cmd = 628;
                                break;
                            case "ZIP_NAMING_NAME_SET":
                            case 629:
                                message.cmd = 629;
                                break;
                            case "ZIP_NODE_ADVERTISEMENT":
                            case 630:
                                message.cmd = 630;
                                break;
                            case "ZIP_NODE_SOLICITATION":
                            case 631:
                                message.cmd = 631;
                                break;
                            case "ZWAVEPLUS_INFO_GET":
                            case 632:
                                message.cmd = 632;
                                break;
                            case "ZWAVEPLUS_INFO_REPORT":
                            case 633:
                                message.cmd = 633;
                                break;
                            case "ZWAVE_CMD_NOP":
                            case 634:
                                message.cmd = 634;
                                break;
                            case "ZWAVE_CMD_RESERVE_NODE_IDS":
                            case 635:
                                message.cmd = 635;
                                break;
                            }
                            if (object.params != null)
                                if (typeof object.params === "string")
                                    $util.base64.decode(object.params, message.params = $util.newBuffer($util.base64.length(object.params)), 0);
                                else if (object.params.length)
                                    message.params = object.params;
                            return message;
                        };

                        /**
                         * Creates a plain object from a ZWaveCommand message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof matrix_io.malos.v1.comm.ZWaveMsg.ZWaveCommand
                         * @static
                         * @param {matrix_io.malos.v1.comm.ZWaveMsg.ZWaveCommand} message ZWaveCommand
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ZWaveCommand.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.zwclass = options.enums === String ? "COMMAND_CLASS_NO_OPERATION" : 0;
                                object.cmd = options.enums === String ? "CMD_UNDEFINED" : 0;
                                object.params = options.bytes === String ? "" : [];
                            }
                            if (message.zwclass != null && message.hasOwnProperty("zwclass"))
                                object.zwclass = options.enums === String ? $root.matrix_io.malos.v1.comm.ZWaveClassType[message.zwclass] : message.zwclass;
                            if (message.cmd != null && message.hasOwnProperty("cmd"))
                                object.cmd = options.enums === String ? $root.matrix_io.malos.v1.comm.ZWaveCmdType[message.cmd] : message.cmd;
                            if (message.params != null && message.hasOwnProperty("params"))
                                object.params = options.bytes === String ? $util.base64.encode(message.params, 0, message.params.length) : options.bytes === Array ? Array.prototype.slice.call(message.params) : message.params;
                            return object;
                        };

                        /**
                         * Converts this ZWaveCommand to JSON.
                         * @function toJSON
                         * @memberof matrix_io.malos.v1.comm.ZWaveMsg.ZWaveCommand
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ZWaveCommand.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return ZWaveCommand;
                    })();

                    return ZWaveMsg;
                })();

                comm.LircParams = (function() {

                    /**
                     * Properties of a LircParams.
                     * @memberof matrix_io.malos.v1.comm
                     * @interface ILircParams
                     * @property {string|null} [device] LircParams device
                     * @property {string|null} [command] LircParams command
                     * @property {string|null} [config] LircParams config
                     */

                    /**
                     * Constructs a new LircParams.
                     * @memberof matrix_io.malos.v1.comm
                     * @classdesc Represents a LircParams.
                     * @implements ILircParams
                     * @constructor
                     * @param {matrix_io.malos.v1.comm.ILircParams=} [properties] Properties to set
                     */
                    function LircParams(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * LircParams device.
                     * @member {string} device
                     * @memberof matrix_io.malos.v1.comm.LircParams
                     * @instance
                     */
                    LircParams.prototype.device = "";

                    /**
                     * LircParams command.
                     * @member {string} command
                     * @memberof matrix_io.malos.v1.comm.LircParams
                     * @instance
                     */
                    LircParams.prototype.command = "";

                    /**
                     * LircParams config.
                     * @member {string} config
                     * @memberof matrix_io.malos.v1.comm.LircParams
                     * @instance
                     */
                    LircParams.prototype.config = "";

                    /**
                     * Creates a new LircParams instance using the specified properties.
                     * @function create
                     * @memberof matrix_io.malos.v1.comm.LircParams
                     * @static
                     * @param {matrix_io.malos.v1.comm.ILircParams=} [properties] Properties to set
                     * @returns {matrix_io.malos.v1.comm.LircParams} LircParams instance
                     */
                    LircParams.create = function create(properties) {
                        return new LircParams(properties);
                    };

                    /**
                     * Encodes the specified LircParams message. Does not implicitly {@link matrix_io.malos.v1.comm.LircParams.verify|verify} messages.
                     * @function encode
                     * @memberof matrix_io.malos.v1.comm.LircParams
                     * @static
                     * @param {matrix_io.malos.v1.comm.ILircParams} message LircParams message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    LircParams.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.device != null && message.hasOwnProperty("device"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.device);
                        if (message.command != null && message.hasOwnProperty("command"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.command);
                        if (message.config != null && message.hasOwnProperty("config"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.config);
                        return writer;
                    };

                    /**
                     * Encodes the specified LircParams message, length delimited. Does not implicitly {@link matrix_io.malos.v1.comm.LircParams.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof matrix_io.malos.v1.comm.LircParams
                     * @static
                     * @param {matrix_io.malos.v1.comm.ILircParams} message LircParams message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    LircParams.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a LircParams message from the specified reader or buffer.
                     * @function decode
                     * @memberof matrix_io.malos.v1.comm.LircParams
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {matrix_io.malos.v1.comm.LircParams} LircParams
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    LircParams.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.malos.v1.comm.LircParams();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.device = reader.string();
                                break;
                            case 2:
                                message.command = reader.string();
                                break;
                            case 3:
                                message.config = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a LircParams message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof matrix_io.malos.v1.comm.LircParams
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {matrix_io.malos.v1.comm.LircParams} LircParams
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    LircParams.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a LircParams message.
                     * @function verify
                     * @memberof matrix_io.malos.v1.comm.LircParams
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    LircParams.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.device != null && message.hasOwnProperty("device"))
                            if (!$util.isString(message.device))
                                return "device: string expected";
                        if (message.command != null && message.hasOwnProperty("command"))
                            if (!$util.isString(message.command))
                                return "command: string expected";
                        if (message.config != null && message.hasOwnProperty("config"))
                            if (!$util.isString(message.config))
                                return "config: string expected";
                        return null;
                    };

                    /**
                     * Creates a LircParams message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof matrix_io.malos.v1.comm.LircParams
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {matrix_io.malos.v1.comm.LircParams} LircParams
                     */
                    LircParams.fromObject = function fromObject(object) {
                        if (object instanceof $root.matrix_io.malos.v1.comm.LircParams)
                            return object;
                        var message = new $root.matrix_io.malos.v1.comm.LircParams();
                        if (object.device != null)
                            message.device = String(object.device);
                        if (object.command != null)
                            message.command = String(object.command);
                        if (object.config != null)
                            message.config = String(object.config);
                        return message;
                    };

                    /**
                     * Creates a plain object from a LircParams message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof matrix_io.malos.v1.comm.LircParams
                     * @static
                     * @param {matrix_io.malos.v1.comm.LircParams} message LircParams
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    LircParams.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.device = "";
                            object.command = "";
                            object.config = "";
                        }
                        if (message.device != null && message.hasOwnProperty("device"))
                            object.device = message.device;
                        if (message.command != null && message.hasOwnProperty("command"))
                            object.command = message.command;
                        if (message.config != null && message.hasOwnProperty("config"))
                            object.config = message.config;
                        return object;
                    };

                    /**
                     * Converts this LircParams to JSON.
                     * @function toJSON
                     * @memberof matrix_io.malos.v1.comm.LircParams
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    LircParams.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return LircParams;
                })();

                return comm;
            })();

            v1.io = (function() {

                /**
                 * Namespace io.
                 * @memberof matrix_io.malos.v1
                 * @namespace
                 */
                var io = {};

                io.LedValue = (function() {

                    /**
                     * Properties of a LedValue.
                     * @memberof matrix_io.malos.v1.io
                     * @interface ILedValue
                     * @property {number|null} [red] LedValue red
                     * @property {number|null} [green] LedValue green
                     * @property {number|null} [blue] LedValue blue
                     * @property {number|null} [white] LedValue white
                     */

                    /**
                     * Constructs a new LedValue.
                     * @memberof matrix_io.malos.v1.io
                     * @classdesc Represents a LedValue.
                     * @implements ILedValue
                     * @constructor
                     * @param {matrix_io.malos.v1.io.ILedValue=} [properties] Properties to set
                     */
                    function LedValue(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * LedValue red.
                     * @member {number} red
                     * @memberof matrix_io.malos.v1.io.LedValue
                     * @instance
                     */
                    LedValue.prototype.red = 0;

                    /**
                     * LedValue green.
                     * @member {number} green
                     * @memberof matrix_io.malos.v1.io.LedValue
                     * @instance
                     */
                    LedValue.prototype.green = 0;

                    /**
                     * LedValue blue.
                     * @member {number} blue
                     * @memberof matrix_io.malos.v1.io.LedValue
                     * @instance
                     */
                    LedValue.prototype.blue = 0;

                    /**
                     * LedValue white.
                     * @member {number} white
                     * @memberof matrix_io.malos.v1.io.LedValue
                     * @instance
                     */
                    LedValue.prototype.white = 0;

                    /**
                     * Creates a new LedValue instance using the specified properties.
                     * @function create
                     * @memberof matrix_io.malos.v1.io.LedValue
                     * @static
                     * @param {matrix_io.malos.v1.io.ILedValue=} [properties] Properties to set
                     * @returns {matrix_io.malos.v1.io.LedValue} LedValue instance
                     */
                    LedValue.create = function create(properties) {
                        return new LedValue(properties);
                    };

                    /**
                     * Encodes the specified LedValue message. Does not implicitly {@link matrix_io.malos.v1.io.LedValue.verify|verify} messages.
                     * @function encode
                     * @memberof matrix_io.malos.v1.io.LedValue
                     * @static
                     * @param {matrix_io.malos.v1.io.ILedValue} message LedValue message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    LedValue.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.red != null && message.hasOwnProperty("red"))
                            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.red);
                        if (message.green != null && message.hasOwnProperty("green"))
                            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.green);
                        if (message.blue != null && message.hasOwnProperty("blue"))
                            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.blue);
                        if (message.white != null && message.hasOwnProperty("white"))
                            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.white);
                        return writer;
                    };

                    /**
                     * Encodes the specified LedValue message, length delimited. Does not implicitly {@link matrix_io.malos.v1.io.LedValue.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof matrix_io.malos.v1.io.LedValue
                     * @static
                     * @param {matrix_io.malos.v1.io.ILedValue} message LedValue message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    LedValue.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a LedValue message from the specified reader or buffer.
                     * @function decode
                     * @memberof matrix_io.malos.v1.io.LedValue
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {matrix_io.malos.v1.io.LedValue} LedValue
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    LedValue.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.malos.v1.io.LedValue();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.red = reader.uint32();
                                break;
                            case 2:
                                message.green = reader.uint32();
                                break;
                            case 3:
                                message.blue = reader.uint32();
                                break;
                            case 4:
                                message.white = reader.uint32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a LedValue message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof matrix_io.malos.v1.io.LedValue
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {matrix_io.malos.v1.io.LedValue} LedValue
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    LedValue.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a LedValue message.
                     * @function verify
                     * @memberof matrix_io.malos.v1.io.LedValue
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    LedValue.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.red != null && message.hasOwnProperty("red"))
                            if (!$util.isInteger(message.red))
                                return "red: integer expected";
                        if (message.green != null && message.hasOwnProperty("green"))
                            if (!$util.isInteger(message.green))
                                return "green: integer expected";
                        if (message.blue != null && message.hasOwnProperty("blue"))
                            if (!$util.isInteger(message.blue))
                                return "blue: integer expected";
                        if (message.white != null && message.hasOwnProperty("white"))
                            if (!$util.isInteger(message.white))
                                return "white: integer expected";
                        return null;
                    };

                    /**
                     * Creates a LedValue message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof matrix_io.malos.v1.io.LedValue
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {matrix_io.malos.v1.io.LedValue} LedValue
                     */
                    LedValue.fromObject = function fromObject(object) {
                        if (object instanceof $root.matrix_io.malos.v1.io.LedValue)
                            return object;
                        var message = new $root.matrix_io.malos.v1.io.LedValue();
                        if (object.red != null)
                            message.red = object.red >>> 0;
                        if (object.green != null)
                            message.green = object.green >>> 0;
                        if (object.blue != null)
                            message.blue = object.blue >>> 0;
                        if (object.white != null)
                            message.white = object.white >>> 0;
                        return message;
                    };

                    /**
                     * Creates a plain object from a LedValue message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof matrix_io.malos.v1.io.LedValue
                     * @static
                     * @param {matrix_io.malos.v1.io.LedValue} message LedValue
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    LedValue.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.red = 0;
                            object.green = 0;
                            object.blue = 0;
                            object.white = 0;
                        }
                        if (message.red != null && message.hasOwnProperty("red"))
                            object.red = message.red;
                        if (message.green != null && message.hasOwnProperty("green"))
                            object.green = message.green;
                        if (message.blue != null && message.hasOwnProperty("blue"))
                            object.blue = message.blue;
                        if (message.white != null && message.hasOwnProperty("white"))
                            object.white = message.white;
                        return object;
                    };

                    /**
                     * Converts this LedValue to JSON.
                     * @function toJSON
                     * @memberof matrix_io.malos.v1.io.LedValue
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    LedValue.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return LedValue;
                })();

                io.EverloopImage = (function() {

                    /**
                     * Properties of an EverloopImage.
                     * @memberof matrix_io.malos.v1.io
                     * @interface IEverloopImage
                     * @property {Array.<matrix_io.malos.v1.io.ILedValue>|null} [led] EverloopImage led
                     * @property {number|null} [everloopLength] EverloopImage everloopLength
                     */

                    /**
                     * Constructs a new EverloopImage.
                     * @memberof matrix_io.malos.v1.io
                     * @classdesc Represents an EverloopImage.
                     * @implements IEverloopImage
                     * @constructor
                     * @param {matrix_io.malos.v1.io.IEverloopImage=} [properties] Properties to set
                     */
                    function EverloopImage(properties) {
                        this.led = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * EverloopImage led.
                     * @member {Array.<matrix_io.malos.v1.io.ILedValue>} led
                     * @memberof matrix_io.malos.v1.io.EverloopImage
                     * @instance
                     */
                    EverloopImage.prototype.led = $util.emptyArray;

                    /**
                     * EverloopImage everloopLength.
                     * @member {number} everloopLength
                     * @memberof matrix_io.malos.v1.io.EverloopImage
                     * @instance
                     */
                    EverloopImage.prototype.everloopLength = 0;

                    /**
                     * Creates a new EverloopImage instance using the specified properties.
                     * @function create
                     * @memberof matrix_io.malos.v1.io.EverloopImage
                     * @static
                     * @param {matrix_io.malos.v1.io.IEverloopImage=} [properties] Properties to set
                     * @returns {matrix_io.malos.v1.io.EverloopImage} EverloopImage instance
                     */
                    EverloopImage.create = function create(properties) {
                        return new EverloopImage(properties);
                    };

                    /**
                     * Encodes the specified EverloopImage message. Does not implicitly {@link matrix_io.malos.v1.io.EverloopImage.verify|verify} messages.
                     * @function encode
                     * @memberof matrix_io.malos.v1.io.EverloopImage
                     * @static
                     * @param {matrix_io.malos.v1.io.IEverloopImage} message EverloopImage message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    EverloopImage.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.led != null && message.led.length)
                            for (var i = 0; i < message.led.length; ++i)
                                $root.matrix_io.malos.v1.io.LedValue.encode(message.led[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.everloopLength != null && message.hasOwnProperty("everloopLength"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.everloopLength);
                        return writer;
                    };

                    /**
                     * Encodes the specified EverloopImage message, length delimited. Does not implicitly {@link matrix_io.malos.v1.io.EverloopImage.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof matrix_io.malos.v1.io.EverloopImage
                     * @static
                     * @param {matrix_io.malos.v1.io.IEverloopImage} message EverloopImage message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    EverloopImage.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes an EverloopImage message from the specified reader or buffer.
                     * @function decode
                     * @memberof matrix_io.malos.v1.io.EverloopImage
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {matrix_io.malos.v1.io.EverloopImage} EverloopImage
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    EverloopImage.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.malos.v1.io.EverloopImage();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.led && message.led.length))
                                    message.led = [];
                                message.led.push($root.matrix_io.malos.v1.io.LedValue.decode(reader, reader.uint32()));
                                break;
                            case 2:
                                message.everloopLength = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes an EverloopImage message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof matrix_io.malos.v1.io.EverloopImage
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {matrix_io.malos.v1.io.EverloopImage} EverloopImage
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    EverloopImage.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies an EverloopImage message.
                     * @function verify
                     * @memberof matrix_io.malos.v1.io.EverloopImage
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    EverloopImage.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.led != null && message.hasOwnProperty("led")) {
                            if (!Array.isArray(message.led))
                                return "led: array expected";
                            for (var i = 0; i < message.led.length; ++i) {
                                var error = $root.matrix_io.malos.v1.io.LedValue.verify(message.led[i]);
                                if (error)
                                    return "led." + error;
                            }
                        }
                        if (message.everloopLength != null && message.hasOwnProperty("everloopLength"))
                            if (!$util.isInteger(message.everloopLength))
                                return "everloopLength: integer expected";
                        return null;
                    };

                    /**
                     * Creates an EverloopImage message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof matrix_io.malos.v1.io.EverloopImage
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {matrix_io.malos.v1.io.EverloopImage} EverloopImage
                     */
                    EverloopImage.fromObject = function fromObject(object) {
                        if (object instanceof $root.matrix_io.malos.v1.io.EverloopImage)
                            return object;
                        var message = new $root.matrix_io.malos.v1.io.EverloopImage();
                        if (object.led) {
                            if (!Array.isArray(object.led))
                                throw TypeError(".matrix_io.malos.v1.io.EverloopImage.led: array expected");
                            message.led = [];
                            for (var i = 0; i < object.led.length; ++i) {
                                if (typeof object.led[i] !== "object")
                                    throw TypeError(".matrix_io.malos.v1.io.EverloopImage.led: object expected");
                                message.led[i] = $root.matrix_io.malos.v1.io.LedValue.fromObject(object.led[i]);
                            }
                        }
                        if (object.everloopLength != null)
                            message.everloopLength = object.everloopLength | 0;
                        return message;
                    };

                    /**
                     * Creates a plain object from an EverloopImage message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof matrix_io.malos.v1.io.EverloopImage
                     * @static
                     * @param {matrix_io.malos.v1.io.EverloopImage} message EverloopImage
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    EverloopImage.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.led = [];
                        if (options.defaults)
                            object.everloopLength = 0;
                        if (message.led && message.led.length) {
                            object.led = [];
                            for (var j = 0; j < message.led.length; ++j)
                                object.led[j] = $root.matrix_io.malos.v1.io.LedValue.toObject(message.led[j], options);
                        }
                        if (message.everloopLength != null && message.hasOwnProperty("everloopLength"))
                            object.everloopLength = message.everloopLength;
                        return object;
                    };

                    /**
                     * Converts this EverloopImage to JSON.
                     * @function toJSON
                     * @memberof matrix_io.malos.v1.io.EverloopImage
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    EverloopImage.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return EverloopImage;
                })();

                io.ServoParams = (function() {

                    /**
                     * Properties of a ServoParams.
                     * @memberof matrix_io.malos.v1.io
                     * @interface IServoParams
                     * @property {number|null} [pin] ServoParams pin
                     * @property {number|null} [angle] ServoParams angle
                     */

                    /**
                     * Constructs a new ServoParams.
                     * @memberof matrix_io.malos.v1.io
                     * @classdesc Represents a ServoParams.
                     * @implements IServoParams
                     * @constructor
                     * @param {matrix_io.malos.v1.io.IServoParams=} [properties] Properties to set
                     */
                    function ServoParams(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * ServoParams pin.
                     * @member {number} pin
                     * @memberof matrix_io.malos.v1.io.ServoParams
                     * @instance
                     */
                    ServoParams.prototype.pin = 0;

                    /**
                     * ServoParams angle.
                     * @member {number} angle
                     * @memberof matrix_io.malos.v1.io.ServoParams
                     * @instance
                     */
                    ServoParams.prototype.angle = 0;

                    /**
                     * Creates a new ServoParams instance using the specified properties.
                     * @function create
                     * @memberof matrix_io.malos.v1.io.ServoParams
                     * @static
                     * @param {matrix_io.malos.v1.io.IServoParams=} [properties] Properties to set
                     * @returns {matrix_io.malos.v1.io.ServoParams} ServoParams instance
                     */
                    ServoParams.create = function create(properties) {
                        return new ServoParams(properties);
                    };

                    /**
                     * Encodes the specified ServoParams message. Does not implicitly {@link matrix_io.malos.v1.io.ServoParams.verify|verify} messages.
                     * @function encode
                     * @memberof matrix_io.malos.v1.io.ServoParams
                     * @static
                     * @param {matrix_io.malos.v1.io.IServoParams} message ServoParams message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ServoParams.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.pin != null && message.hasOwnProperty("pin"))
                            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.pin);
                        if (message.angle != null && message.hasOwnProperty("angle"))
                            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.angle);
                        return writer;
                    };

                    /**
                     * Encodes the specified ServoParams message, length delimited. Does not implicitly {@link matrix_io.malos.v1.io.ServoParams.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof matrix_io.malos.v1.io.ServoParams
                     * @static
                     * @param {matrix_io.malos.v1.io.IServoParams} message ServoParams message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ServoParams.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a ServoParams message from the specified reader or buffer.
                     * @function decode
                     * @memberof matrix_io.malos.v1.io.ServoParams
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {matrix_io.malos.v1.io.ServoParams} ServoParams
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ServoParams.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.malos.v1.io.ServoParams();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.pin = reader.uint32();
                                break;
                            case 2:
                                message.angle = reader.uint32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a ServoParams message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof matrix_io.malos.v1.io.ServoParams
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {matrix_io.malos.v1.io.ServoParams} ServoParams
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ServoParams.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a ServoParams message.
                     * @function verify
                     * @memberof matrix_io.malos.v1.io.ServoParams
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ServoParams.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.pin != null && message.hasOwnProperty("pin"))
                            if (!$util.isInteger(message.pin))
                                return "pin: integer expected";
                        if (message.angle != null && message.hasOwnProperty("angle"))
                            if (!$util.isInteger(message.angle))
                                return "angle: integer expected";
                        return null;
                    };

                    /**
                     * Creates a ServoParams message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof matrix_io.malos.v1.io.ServoParams
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {matrix_io.malos.v1.io.ServoParams} ServoParams
                     */
                    ServoParams.fromObject = function fromObject(object) {
                        if (object instanceof $root.matrix_io.malos.v1.io.ServoParams)
                            return object;
                        var message = new $root.matrix_io.malos.v1.io.ServoParams();
                        if (object.pin != null)
                            message.pin = object.pin >>> 0;
                        if (object.angle != null)
                            message.angle = object.angle >>> 0;
                        return message;
                    };

                    /**
                     * Creates a plain object from a ServoParams message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof matrix_io.malos.v1.io.ServoParams
                     * @static
                     * @param {matrix_io.malos.v1.io.ServoParams} message ServoParams
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ServoParams.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.pin = 0;
                            object.angle = 0;
                        }
                        if (message.pin != null && message.hasOwnProperty("pin"))
                            object.pin = message.pin;
                        if (message.angle != null && message.hasOwnProperty("angle"))
                            object.angle = message.angle;
                        return object;
                    };

                    /**
                     * Converts this ServoParams to JSON.
                     * @function toJSON
                     * @memberof matrix_io.malos.v1.io.ServoParams
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ServoParams.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return ServoParams;
                })();

                io.GpioParams = (function() {

                    /**
                     * Properties of a GpioParams.
                     * @memberof matrix_io.malos.v1.io
                     * @interface IGpioParams
                     * @property {number|null} [pin] GpioParams pin
                     * @property {matrix_io.malos.v1.io.GpioParams.EnumMode|null} [mode] GpioParams mode
                     * @property {number|null} [value] GpioParams value
                     * @property {number|null} [values] GpioParams values
                     */

                    /**
                     * Constructs a new GpioParams.
                     * @memberof matrix_io.malos.v1.io
                     * @classdesc Represents a GpioParams.
                     * @implements IGpioParams
                     * @constructor
                     * @param {matrix_io.malos.v1.io.IGpioParams=} [properties] Properties to set
                     */
                    function GpioParams(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * GpioParams pin.
                     * @member {number} pin
                     * @memberof matrix_io.malos.v1.io.GpioParams
                     * @instance
                     */
                    GpioParams.prototype.pin = 0;

                    /**
                     * GpioParams mode.
                     * @member {matrix_io.malos.v1.io.GpioParams.EnumMode} mode
                     * @memberof matrix_io.malos.v1.io.GpioParams
                     * @instance
                     */
                    GpioParams.prototype.mode = 0;

                    /**
                     * GpioParams value.
                     * @member {number} value
                     * @memberof matrix_io.malos.v1.io.GpioParams
                     * @instance
                     */
                    GpioParams.prototype.value = 0;

                    /**
                     * GpioParams values.
                     * @member {number} values
                     * @memberof matrix_io.malos.v1.io.GpioParams
                     * @instance
                     */
                    GpioParams.prototype.values = 0;

                    /**
                     * Creates a new GpioParams instance using the specified properties.
                     * @function create
                     * @memberof matrix_io.malos.v1.io.GpioParams
                     * @static
                     * @param {matrix_io.malos.v1.io.IGpioParams=} [properties] Properties to set
                     * @returns {matrix_io.malos.v1.io.GpioParams} GpioParams instance
                     */
                    GpioParams.create = function create(properties) {
                        return new GpioParams(properties);
                    };

                    /**
                     * Encodes the specified GpioParams message. Does not implicitly {@link matrix_io.malos.v1.io.GpioParams.verify|verify} messages.
                     * @function encode
                     * @memberof matrix_io.malos.v1.io.GpioParams
                     * @static
                     * @param {matrix_io.malos.v1.io.IGpioParams} message GpioParams message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GpioParams.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.pin != null && message.hasOwnProperty("pin"))
                            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.pin);
                        if (message.mode != null && message.hasOwnProperty("mode"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.mode);
                        if (message.value != null && message.hasOwnProperty("value"))
                            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.value);
                        if (message.values != null && message.hasOwnProperty("values"))
                            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.values);
                        return writer;
                    };

                    /**
                     * Encodes the specified GpioParams message, length delimited. Does not implicitly {@link matrix_io.malos.v1.io.GpioParams.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof matrix_io.malos.v1.io.GpioParams
                     * @static
                     * @param {matrix_io.malos.v1.io.IGpioParams} message GpioParams message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GpioParams.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a GpioParams message from the specified reader or buffer.
                     * @function decode
                     * @memberof matrix_io.malos.v1.io.GpioParams
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {matrix_io.malos.v1.io.GpioParams} GpioParams
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GpioParams.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.malos.v1.io.GpioParams();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.pin = reader.uint32();
                                break;
                            case 2:
                                message.mode = reader.int32();
                                break;
                            case 3:
                                message.value = reader.uint32();
                                break;
                            case 4:
                                message.values = reader.uint32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a GpioParams message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof matrix_io.malos.v1.io.GpioParams
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {matrix_io.malos.v1.io.GpioParams} GpioParams
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GpioParams.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a GpioParams message.
                     * @function verify
                     * @memberof matrix_io.malos.v1.io.GpioParams
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    GpioParams.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.pin != null && message.hasOwnProperty("pin"))
                            if (!$util.isInteger(message.pin))
                                return "pin: integer expected";
                        if (message.mode != null && message.hasOwnProperty("mode"))
                            switch (message.mode) {
                            default:
                                return "mode: enum value expected";
                            case 0:
                            case 1:
                                break;
                            }
                        if (message.value != null && message.hasOwnProperty("value"))
                            if (!$util.isInteger(message.value))
                                return "value: integer expected";
                        if (message.values != null && message.hasOwnProperty("values"))
                            if (!$util.isInteger(message.values))
                                return "values: integer expected";
                        return null;
                    };

                    /**
                     * Creates a GpioParams message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof matrix_io.malos.v1.io.GpioParams
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {matrix_io.malos.v1.io.GpioParams} GpioParams
                     */
                    GpioParams.fromObject = function fromObject(object) {
                        if (object instanceof $root.matrix_io.malos.v1.io.GpioParams)
                            return object;
                        var message = new $root.matrix_io.malos.v1.io.GpioParams();
                        if (object.pin != null)
                            message.pin = object.pin >>> 0;
                        switch (object.mode) {
                        case "INPUT":
                        case 0:
                            message.mode = 0;
                            break;
                        case "OUTPUT":
                        case 1:
                            message.mode = 1;
                            break;
                        }
                        if (object.value != null)
                            message.value = object.value >>> 0;
                        if (object.values != null)
                            message.values = object.values >>> 0;
                        return message;
                    };

                    /**
                     * Creates a plain object from a GpioParams message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof matrix_io.malos.v1.io.GpioParams
                     * @static
                     * @param {matrix_io.malos.v1.io.GpioParams} message GpioParams
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    GpioParams.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.pin = 0;
                            object.mode = options.enums === String ? "INPUT" : 0;
                            object.value = 0;
                            object.values = 0;
                        }
                        if (message.pin != null && message.hasOwnProperty("pin"))
                            object.pin = message.pin;
                        if (message.mode != null && message.hasOwnProperty("mode"))
                            object.mode = options.enums === String ? $root.matrix_io.malos.v1.io.GpioParams.EnumMode[message.mode] : message.mode;
                        if (message.value != null && message.hasOwnProperty("value"))
                            object.value = message.value;
                        if (message.values != null && message.hasOwnProperty("values"))
                            object.values = message.values;
                        return object;
                    };

                    /**
                     * Converts this GpioParams to JSON.
                     * @function toJSON
                     * @memberof matrix_io.malos.v1.io.GpioParams
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    GpioParams.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    /**
                     * EnumMode enum.
                     * @name matrix_io.malos.v1.io.GpioParams.EnumMode
                     * @enum {string}
                     * @property {number} INPUT=0 INPUT value
                     * @property {number} OUTPUT=1 OUTPUT value
                     */
                    GpioParams.EnumMode = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "INPUT"] = 0;
                        values[valuesById[1] = "OUTPUT"] = 1;
                        return values;
                    })();

                    return GpioParams;
                })();

                io.MicArrayParams = (function() {

                    /**
                     * Properties of a MicArrayParams.
                     * @memberof matrix_io.malos.v1.io
                     * @interface IMicArrayParams
                     * @property {number|null} [gain] MicArrayParams gain
                     * @property {number|null} [azimutalAngle] MicArrayParams azimutalAngle
                     * @property {number|null} [polarAngle] MicArrayParams polarAngle
                     * @property {number|null} [radialDistanceMm] MicArrayParams radialDistanceMm
                     * @property {number|null} [soundSpeedMmseg] MicArrayParams soundSpeedMmseg
                     * @property {number|null} [samplingFrequencyHz] MicArrayParams samplingFrequencyHz
                     */

                    /**
                     * Constructs a new MicArrayParams.
                     * @memberof matrix_io.malos.v1.io
                     * @classdesc Represents a MicArrayParams.
                     * @implements IMicArrayParams
                     * @constructor
                     * @param {matrix_io.malos.v1.io.IMicArrayParams=} [properties] Properties to set
                     */
                    function MicArrayParams(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * MicArrayParams gain.
                     * @member {number} gain
                     * @memberof matrix_io.malos.v1.io.MicArrayParams
                     * @instance
                     */
                    MicArrayParams.prototype.gain = 0;

                    /**
                     * MicArrayParams azimutalAngle.
                     * @member {number} azimutalAngle
                     * @memberof matrix_io.malos.v1.io.MicArrayParams
                     * @instance
                     */
                    MicArrayParams.prototype.azimutalAngle = 0;

                    /**
                     * MicArrayParams polarAngle.
                     * @member {number} polarAngle
                     * @memberof matrix_io.malos.v1.io.MicArrayParams
                     * @instance
                     */
                    MicArrayParams.prototype.polarAngle = 0;

                    /**
                     * MicArrayParams radialDistanceMm.
                     * @member {number} radialDistanceMm
                     * @memberof matrix_io.malos.v1.io.MicArrayParams
                     * @instance
                     */
                    MicArrayParams.prototype.radialDistanceMm = 0;

                    /**
                     * MicArrayParams soundSpeedMmseg.
                     * @member {number} soundSpeedMmseg
                     * @memberof matrix_io.malos.v1.io.MicArrayParams
                     * @instance
                     */
                    MicArrayParams.prototype.soundSpeedMmseg = 0;

                    /**
                     * MicArrayParams samplingFrequencyHz.
                     * @member {number} samplingFrequencyHz
                     * @memberof matrix_io.malos.v1.io.MicArrayParams
                     * @instance
                     */
                    MicArrayParams.prototype.samplingFrequencyHz = 0;

                    /**
                     * Creates a new MicArrayParams instance using the specified properties.
                     * @function create
                     * @memberof matrix_io.malos.v1.io.MicArrayParams
                     * @static
                     * @param {matrix_io.malos.v1.io.IMicArrayParams=} [properties] Properties to set
                     * @returns {matrix_io.malos.v1.io.MicArrayParams} MicArrayParams instance
                     */
                    MicArrayParams.create = function create(properties) {
                        return new MicArrayParams(properties);
                    };

                    /**
                     * Encodes the specified MicArrayParams message. Does not implicitly {@link matrix_io.malos.v1.io.MicArrayParams.verify|verify} messages.
                     * @function encode
                     * @memberof matrix_io.malos.v1.io.MicArrayParams
                     * @static
                     * @param {matrix_io.malos.v1.io.IMicArrayParams} message MicArrayParams message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MicArrayParams.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.gain != null && message.hasOwnProperty("gain"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.gain);
                        if (message.azimutalAngle != null && message.hasOwnProperty("azimutalAngle"))
                            writer.uint32(/* id 2, wireType 5 =*/21).float(message.azimutalAngle);
                        if (message.polarAngle != null && message.hasOwnProperty("polarAngle"))
                            writer.uint32(/* id 3, wireType 5 =*/29).float(message.polarAngle);
                        if (message.radialDistanceMm != null && message.hasOwnProperty("radialDistanceMm"))
                            writer.uint32(/* id 4, wireType 5 =*/37).float(message.radialDistanceMm);
                        if (message.soundSpeedMmseg != null && message.hasOwnProperty("soundSpeedMmseg"))
                            writer.uint32(/* id 5, wireType 5 =*/45).float(message.soundSpeedMmseg);
                        if (message.samplingFrequencyHz != null && message.hasOwnProperty("samplingFrequencyHz"))
                            writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.samplingFrequencyHz);
                        return writer;
                    };

                    /**
                     * Encodes the specified MicArrayParams message, length delimited. Does not implicitly {@link matrix_io.malos.v1.io.MicArrayParams.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof matrix_io.malos.v1.io.MicArrayParams
                     * @static
                     * @param {matrix_io.malos.v1.io.IMicArrayParams} message MicArrayParams message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MicArrayParams.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MicArrayParams message from the specified reader or buffer.
                     * @function decode
                     * @memberof matrix_io.malos.v1.io.MicArrayParams
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {matrix_io.malos.v1.io.MicArrayParams} MicArrayParams
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MicArrayParams.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.malos.v1.io.MicArrayParams();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.gain = reader.int32();
                                break;
                            case 2:
                                message.azimutalAngle = reader.float();
                                break;
                            case 3:
                                message.polarAngle = reader.float();
                                break;
                            case 4:
                                message.radialDistanceMm = reader.float();
                                break;
                            case 5:
                                message.soundSpeedMmseg = reader.float();
                                break;
                            case 6:
                                message.samplingFrequencyHz = reader.uint32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MicArrayParams message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof matrix_io.malos.v1.io.MicArrayParams
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {matrix_io.malos.v1.io.MicArrayParams} MicArrayParams
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MicArrayParams.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MicArrayParams message.
                     * @function verify
                     * @memberof matrix_io.malos.v1.io.MicArrayParams
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MicArrayParams.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.gain != null && message.hasOwnProperty("gain"))
                            if (!$util.isInteger(message.gain))
                                return "gain: integer expected";
                        if (message.azimutalAngle != null && message.hasOwnProperty("azimutalAngle"))
                            if (typeof message.azimutalAngle !== "number")
                                return "azimutalAngle: number expected";
                        if (message.polarAngle != null && message.hasOwnProperty("polarAngle"))
                            if (typeof message.polarAngle !== "number")
                                return "polarAngle: number expected";
                        if (message.radialDistanceMm != null && message.hasOwnProperty("radialDistanceMm"))
                            if (typeof message.radialDistanceMm !== "number")
                                return "radialDistanceMm: number expected";
                        if (message.soundSpeedMmseg != null && message.hasOwnProperty("soundSpeedMmseg"))
                            if (typeof message.soundSpeedMmseg !== "number")
                                return "soundSpeedMmseg: number expected";
                        if (message.samplingFrequencyHz != null && message.hasOwnProperty("samplingFrequencyHz"))
                            if (!$util.isInteger(message.samplingFrequencyHz))
                                return "samplingFrequencyHz: integer expected";
                        return null;
                    };

                    /**
                     * Creates a MicArrayParams message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof matrix_io.malos.v1.io.MicArrayParams
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {matrix_io.malos.v1.io.MicArrayParams} MicArrayParams
                     */
                    MicArrayParams.fromObject = function fromObject(object) {
                        if (object instanceof $root.matrix_io.malos.v1.io.MicArrayParams)
                            return object;
                        var message = new $root.matrix_io.malos.v1.io.MicArrayParams();
                        if (object.gain != null)
                            message.gain = object.gain | 0;
                        if (object.azimutalAngle != null)
                            message.azimutalAngle = Number(object.azimutalAngle);
                        if (object.polarAngle != null)
                            message.polarAngle = Number(object.polarAngle);
                        if (object.radialDistanceMm != null)
                            message.radialDistanceMm = Number(object.radialDistanceMm);
                        if (object.soundSpeedMmseg != null)
                            message.soundSpeedMmseg = Number(object.soundSpeedMmseg);
                        if (object.samplingFrequencyHz != null)
                            message.samplingFrequencyHz = object.samplingFrequencyHz >>> 0;
                        return message;
                    };

                    /**
                     * Creates a plain object from a MicArrayParams message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof matrix_io.malos.v1.io.MicArrayParams
                     * @static
                     * @param {matrix_io.malos.v1.io.MicArrayParams} message MicArrayParams
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MicArrayParams.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.gain = 0;
                            object.azimutalAngle = 0;
                            object.polarAngle = 0;
                            object.radialDistanceMm = 0;
                            object.soundSpeedMmseg = 0;
                            object.samplingFrequencyHz = 0;
                        }
                        if (message.gain != null && message.hasOwnProperty("gain"))
                            object.gain = message.gain;
                        if (message.azimutalAngle != null && message.hasOwnProperty("azimutalAngle"))
                            object.azimutalAngle = options.json && !isFinite(message.azimutalAngle) ? String(message.azimutalAngle) : message.azimutalAngle;
                        if (message.polarAngle != null && message.hasOwnProperty("polarAngle"))
                            object.polarAngle = options.json && !isFinite(message.polarAngle) ? String(message.polarAngle) : message.polarAngle;
                        if (message.radialDistanceMm != null && message.hasOwnProperty("radialDistanceMm"))
                            object.radialDistanceMm = options.json && !isFinite(message.radialDistanceMm) ? String(message.radialDistanceMm) : message.radialDistanceMm;
                        if (message.soundSpeedMmseg != null && message.hasOwnProperty("soundSpeedMmseg"))
                            object.soundSpeedMmseg = options.json && !isFinite(message.soundSpeedMmseg) ? String(message.soundSpeedMmseg) : message.soundSpeedMmseg;
                        if (message.samplingFrequencyHz != null && message.hasOwnProperty("samplingFrequencyHz"))
                            object.samplingFrequencyHz = message.samplingFrequencyHz;
                        return object;
                    };

                    /**
                     * Converts this MicArrayParams to JSON.
                     * @function toJSON
                     * @memberof matrix_io.malos.v1.io.MicArrayParams
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MicArrayParams.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MicArrayParams;
                })();

                io.WakeWordParams = (function() {

                    /**
                     * Properties of a WakeWordParams.
                     * @memberof matrix_io.malos.v1.io
                     * @interface IWakeWordParams
                     * @property {string|null} [wakeWord] WakeWordParams wakeWord
                     * @property {matrix_io.malos.v1.io.WakeWordParams.MicChannel|null} [channel] WakeWordParams channel
                     * @property {string|null} [lmPath] WakeWordParams lmPath
                     * @property {string|null} [dicPath] WakeWordParams dicPath
                     * @property {boolean|null} [enableVerbose] WakeWordParams enableVerbose
                     * @property {boolean|null} [stopRecognition] WakeWordParams stopRecognition
                     */

                    /**
                     * Constructs a new WakeWordParams.
                     * @memberof matrix_io.malos.v1.io
                     * @classdesc Represents a WakeWordParams.
                     * @implements IWakeWordParams
                     * @constructor
                     * @param {matrix_io.malos.v1.io.IWakeWordParams=} [properties] Properties to set
                     */
                    function WakeWordParams(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * WakeWordParams wakeWord.
                     * @member {string} wakeWord
                     * @memberof matrix_io.malos.v1.io.WakeWordParams
                     * @instance
                     */
                    WakeWordParams.prototype.wakeWord = "";

                    /**
                     * WakeWordParams channel.
                     * @member {matrix_io.malos.v1.io.WakeWordParams.MicChannel} channel
                     * @memberof matrix_io.malos.v1.io.WakeWordParams
                     * @instance
                     */
                    WakeWordParams.prototype.channel = 0;

                    /**
                     * WakeWordParams lmPath.
                     * @member {string} lmPath
                     * @memberof matrix_io.malos.v1.io.WakeWordParams
                     * @instance
                     */
                    WakeWordParams.prototype.lmPath = "";

                    /**
                     * WakeWordParams dicPath.
                     * @member {string} dicPath
                     * @memberof matrix_io.malos.v1.io.WakeWordParams
                     * @instance
                     */
                    WakeWordParams.prototype.dicPath = "";

                    /**
                     * WakeWordParams enableVerbose.
                     * @member {boolean} enableVerbose
                     * @memberof matrix_io.malos.v1.io.WakeWordParams
                     * @instance
                     */
                    WakeWordParams.prototype.enableVerbose = false;

                    /**
                     * WakeWordParams stopRecognition.
                     * @member {boolean} stopRecognition
                     * @memberof matrix_io.malos.v1.io.WakeWordParams
                     * @instance
                     */
                    WakeWordParams.prototype.stopRecognition = false;

                    /**
                     * Creates a new WakeWordParams instance using the specified properties.
                     * @function create
                     * @memberof matrix_io.malos.v1.io.WakeWordParams
                     * @static
                     * @param {matrix_io.malos.v1.io.IWakeWordParams=} [properties] Properties to set
                     * @returns {matrix_io.malos.v1.io.WakeWordParams} WakeWordParams instance
                     */
                    WakeWordParams.create = function create(properties) {
                        return new WakeWordParams(properties);
                    };

                    /**
                     * Encodes the specified WakeWordParams message. Does not implicitly {@link matrix_io.malos.v1.io.WakeWordParams.verify|verify} messages.
                     * @function encode
                     * @memberof matrix_io.malos.v1.io.WakeWordParams
                     * @static
                     * @param {matrix_io.malos.v1.io.IWakeWordParams} message WakeWordParams message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    WakeWordParams.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.wakeWord != null && message.hasOwnProperty("wakeWord"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.wakeWord);
                        if (message.channel != null && message.hasOwnProperty("channel"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.channel);
                        if (message.lmPath != null && message.hasOwnProperty("lmPath"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.lmPath);
                        if (message.dicPath != null && message.hasOwnProperty("dicPath"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.dicPath);
                        if (message.enableVerbose != null && message.hasOwnProperty("enableVerbose"))
                            writer.uint32(/* id 5, wireType 0 =*/40).bool(message.enableVerbose);
                        if (message.stopRecognition != null && message.hasOwnProperty("stopRecognition"))
                            writer.uint32(/* id 6, wireType 0 =*/48).bool(message.stopRecognition);
                        return writer;
                    };

                    /**
                     * Encodes the specified WakeWordParams message, length delimited. Does not implicitly {@link matrix_io.malos.v1.io.WakeWordParams.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof matrix_io.malos.v1.io.WakeWordParams
                     * @static
                     * @param {matrix_io.malos.v1.io.IWakeWordParams} message WakeWordParams message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    WakeWordParams.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a WakeWordParams message from the specified reader or buffer.
                     * @function decode
                     * @memberof matrix_io.malos.v1.io.WakeWordParams
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {matrix_io.malos.v1.io.WakeWordParams} WakeWordParams
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    WakeWordParams.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.malos.v1.io.WakeWordParams();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.wakeWord = reader.string();
                                break;
                            case 2:
                                message.channel = reader.int32();
                                break;
                            case 3:
                                message.lmPath = reader.string();
                                break;
                            case 4:
                                message.dicPath = reader.string();
                                break;
                            case 5:
                                message.enableVerbose = reader.bool();
                                break;
                            case 6:
                                message.stopRecognition = reader.bool();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a WakeWordParams message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof matrix_io.malos.v1.io.WakeWordParams
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {matrix_io.malos.v1.io.WakeWordParams} WakeWordParams
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    WakeWordParams.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a WakeWordParams message.
                     * @function verify
                     * @memberof matrix_io.malos.v1.io.WakeWordParams
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    WakeWordParams.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.wakeWord != null && message.hasOwnProperty("wakeWord"))
                            if (!$util.isString(message.wakeWord))
                                return "wakeWord: string expected";
                        if (message.channel != null && message.hasOwnProperty("channel"))
                            switch (message.channel) {
                            default:
                                return "channel: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                            case 4:
                            case 5:
                            case 6:
                            case 7:
                            case 8:
                                break;
                            }
                        if (message.lmPath != null && message.hasOwnProperty("lmPath"))
                            if (!$util.isString(message.lmPath))
                                return "lmPath: string expected";
                        if (message.dicPath != null && message.hasOwnProperty("dicPath"))
                            if (!$util.isString(message.dicPath))
                                return "dicPath: string expected";
                        if (message.enableVerbose != null && message.hasOwnProperty("enableVerbose"))
                            if (typeof message.enableVerbose !== "boolean")
                                return "enableVerbose: boolean expected";
                        if (message.stopRecognition != null && message.hasOwnProperty("stopRecognition"))
                            if (typeof message.stopRecognition !== "boolean")
                                return "stopRecognition: boolean expected";
                        return null;
                    };

                    /**
                     * Creates a WakeWordParams message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof matrix_io.malos.v1.io.WakeWordParams
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {matrix_io.malos.v1.io.WakeWordParams} WakeWordParams
                     */
                    WakeWordParams.fromObject = function fromObject(object) {
                        if (object instanceof $root.matrix_io.malos.v1.io.WakeWordParams)
                            return object;
                        var message = new $root.matrix_io.malos.v1.io.WakeWordParams();
                        if (object.wakeWord != null)
                            message.wakeWord = String(object.wakeWord);
                        switch (object.channel) {
                        case "channel0":
                        case 0:
                            message.channel = 0;
                            break;
                        case "channel1":
                        case 1:
                            message.channel = 1;
                            break;
                        case "channel2":
                        case 2:
                            message.channel = 2;
                            break;
                        case "channel3":
                        case 3:
                            message.channel = 3;
                            break;
                        case "channel4":
                        case 4:
                            message.channel = 4;
                            break;
                        case "channel5":
                        case 5:
                            message.channel = 5;
                            break;
                        case "channel6":
                        case 6:
                            message.channel = 6;
                            break;
                        case "channel7":
                        case 7:
                            message.channel = 7;
                            break;
                        case "channel8":
                        case 8:
                            message.channel = 8;
                            break;
                        }
                        if (object.lmPath != null)
                            message.lmPath = String(object.lmPath);
                        if (object.dicPath != null)
                            message.dicPath = String(object.dicPath);
                        if (object.enableVerbose != null)
                            message.enableVerbose = Boolean(object.enableVerbose);
                        if (object.stopRecognition != null)
                            message.stopRecognition = Boolean(object.stopRecognition);
                        return message;
                    };

                    /**
                     * Creates a plain object from a WakeWordParams message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof matrix_io.malos.v1.io.WakeWordParams
                     * @static
                     * @param {matrix_io.malos.v1.io.WakeWordParams} message WakeWordParams
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    WakeWordParams.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.wakeWord = "";
                            object.channel = options.enums === String ? "channel0" : 0;
                            object.lmPath = "";
                            object.dicPath = "";
                            object.enableVerbose = false;
                            object.stopRecognition = false;
                        }
                        if (message.wakeWord != null && message.hasOwnProperty("wakeWord"))
                            object.wakeWord = message.wakeWord;
                        if (message.channel != null && message.hasOwnProperty("channel"))
                            object.channel = options.enums === String ? $root.matrix_io.malos.v1.io.WakeWordParams.MicChannel[message.channel] : message.channel;
                        if (message.lmPath != null && message.hasOwnProperty("lmPath"))
                            object.lmPath = message.lmPath;
                        if (message.dicPath != null && message.hasOwnProperty("dicPath"))
                            object.dicPath = message.dicPath;
                        if (message.enableVerbose != null && message.hasOwnProperty("enableVerbose"))
                            object.enableVerbose = message.enableVerbose;
                        if (message.stopRecognition != null && message.hasOwnProperty("stopRecognition"))
                            object.stopRecognition = message.stopRecognition;
                        return object;
                    };

                    /**
                     * Converts this WakeWordParams to JSON.
                     * @function toJSON
                     * @memberof matrix_io.malos.v1.io.WakeWordParams
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    WakeWordParams.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    /**
                     * MicChannel enum.
                     * @name matrix_io.malos.v1.io.WakeWordParams.MicChannel
                     * @enum {string}
                     * @property {number} channel0=0 channel0 value
                     * @property {number} channel1=1 channel1 value
                     * @property {number} channel2=2 channel2 value
                     * @property {number} channel3=3 channel3 value
                     * @property {number} channel4=4 channel4 value
                     * @property {number} channel5=5 channel5 value
                     * @property {number} channel6=6 channel6 value
                     * @property {number} channel7=7 channel7 value
                     * @property {number} channel8=8 channel8 value
                     */
                    WakeWordParams.MicChannel = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "channel0"] = 0;
                        values[valuesById[1] = "channel1"] = 1;
                        values[valuesById[2] = "channel2"] = 2;
                        values[valuesById[3] = "channel3"] = 3;
                        values[valuesById[4] = "channel4"] = 4;
                        values[valuesById[5] = "channel5"] = 5;
                        values[valuesById[6] = "channel6"] = 6;
                        values[valuesById[7] = "channel7"] = 7;
                        values[valuesById[8] = "channel8"] = 8;
                        return values;
                    })();

                    return WakeWordParams;
                })();

                io.MatrixDeviceParams = (function() {

                    /**
                     * Properties of a MatrixDeviceParams.
                     * @memberof matrix_io.malos.v1.io
                     * @interface IMatrixDeviceParams
                     * @property {matrix_io.malos.v1.io.EnumMatrixDeviceType|null} [deviceType] MatrixDeviceParams deviceType
                     */

                    /**
                     * Constructs a new MatrixDeviceParams.
                     * @memberof matrix_io.malos.v1.io
                     * @classdesc Represents a MatrixDeviceParams.
                     * @implements IMatrixDeviceParams
                     * @constructor
                     * @param {matrix_io.malos.v1.io.IMatrixDeviceParams=} [properties] Properties to set
                     */
                    function MatrixDeviceParams(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * MatrixDeviceParams deviceType.
                     * @member {matrix_io.malos.v1.io.EnumMatrixDeviceType} deviceType
                     * @memberof matrix_io.malos.v1.io.MatrixDeviceParams
                     * @instance
                     */
                    MatrixDeviceParams.prototype.deviceType = 0;

                    /**
                     * Creates a new MatrixDeviceParams instance using the specified properties.
                     * @function create
                     * @memberof matrix_io.malos.v1.io.MatrixDeviceParams
                     * @static
                     * @param {matrix_io.malos.v1.io.IMatrixDeviceParams=} [properties] Properties to set
                     * @returns {matrix_io.malos.v1.io.MatrixDeviceParams} MatrixDeviceParams instance
                     */
                    MatrixDeviceParams.create = function create(properties) {
                        return new MatrixDeviceParams(properties);
                    };

                    /**
                     * Encodes the specified MatrixDeviceParams message. Does not implicitly {@link matrix_io.malos.v1.io.MatrixDeviceParams.verify|verify} messages.
                     * @function encode
                     * @memberof matrix_io.malos.v1.io.MatrixDeviceParams
                     * @static
                     * @param {matrix_io.malos.v1.io.IMatrixDeviceParams} message MatrixDeviceParams message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MatrixDeviceParams.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.deviceType != null && message.hasOwnProperty("deviceType"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.deviceType);
                        return writer;
                    };

                    /**
                     * Encodes the specified MatrixDeviceParams message, length delimited. Does not implicitly {@link matrix_io.malos.v1.io.MatrixDeviceParams.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof matrix_io.malos.v1.io.MatrixDeviceParams
                     * @static
                     * @param {matrix_io.malos.v1.io.IMatrixDeviceParams} message MatrixDeviceParams message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MatrixDeviceParams.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MatrixDeviceParams message from the specified reader or buffer.
                     * @function decode
                     * @memberof matrix_io.malos.v1.io.MatrixDeviceParams
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {matrix_io.malos.v1.io.MatrixDeviceParams} MatrixDeviceParams
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MatrixDeviceParams.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.malos.v1.io.MatrixDeviceParams();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.deviceType = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MatrixDeviceParams message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof matrix_io.malos.v1.io.MatrixDeviceParams
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {matrix_io.malos.v1.io.MatrixDeviceParams} MatrixDeviceParams
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MatrixDeviceParams.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MatrixDeviceParams message.
                     * @function verify
                     * @memberof matrix_io.malos.v1.io.MatrixDeviceParams
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MatrixDeviceParams.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.deviceType != null && message.hasOwnProperty("deviceType"))
                            switch (message.deviceType) {
                            default:
                                return "deviceType: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                                break;
                            }
                        return null;
                    };

                    /**
                     * Creates a MatrixDeviceParams message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof matrix_io.malos.v1.io.MatrixDeviceParams
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {matrix_io.malos.v1.io.MatrixDeviceParams} MatrixDeviceParams
                     */
                    MatrixDeviceParams.fromObject = function fromObject(object) {
                        if (object instanceof $root.matrix_io.malos.v1.io.MatrixDeviceParams)
                            return object;
                        var message = new $root.matrix_io.malos.v1.io.MatrixDeviceParams();
                        switch (object.deviceType) {
                        case "UNDETECTED":
                        case 0:
                            message.deviceType = 0;
                            break;
                        case "CREATOR":
                        case 1:
                            message.deviceType = 1;
                            break;
                        case "VOICE":
                        case 2:
                            message.deviceType = 2;
                            break;
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a MatrixDeviceParams message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof matrix_io.malos.v1.io.MatrixDeviceParams
                     * @static
                     * @param {matrix_io.malos.v1.io.MatrixDeviceParams} message MatrixDeviceParams
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MatrixDeviceParams.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.deviceType = options.enums === String ? "UNDETECTED" : 0;
                        if (message.deviceType != null && message.hasOwnProperty("deviceType"))
                            object.deviceType = options.enums === String ? $root.matrix_io.malos.v1.io.EnumMatrixDeviceType[message.deviceType] : message.deviceType;
                        return object;
                    };

                    /**
                     * Converts this MatrixDeviceParams to JSON.
                     * @function toJSON
                     * @memberof matrix_io.malos.v1.io.MatrixDeviceParams
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MatrixDeviceParams.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MatrixDeviceParams;
                })();

                /**
                 * EnumMatrixDeviceType enum.
                 * @name matrix_io.malos.v1.io.EnumMatrixDeviceType
                 * @enum {string}
                 * @property {number} UNDETECTED=0 UNDETECTED value
                 * @property {number} CREATOR=1 CREATOR value
                 * @property {number} VOICE=2 VOICE value
                 */
                io.EnumMatrixDeviceType = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "UNDETECTED"] = 0;
                    values[valuesById[1] = "CREATOR"] = 1;
                    values[valuesById[2] = "VOICE"] = 2;
                    return values;
                })();

                return io;
            })();

            v1.sense = (function() {

                /**
                 * Namespace sense.
                 * @memberof matrix_io.malos.v1
                 * @namespace
                 */
                var sense = {};

                sense.Dummy = (function() {

                    /**
                     * Properties of a Dummy.
                     * @memberof matrix_io.malos.v1.sense
                     * @interface IDummy
                     * @property {number|null} [value] Dummy value
                     */

                    /**
                     * Constructs a new Dummy.
                     * @memberof matrix_io.malos.v1.sense
                     * @classdesc Represents a Dummy.
                     * @implements IDummy
                     * @constructor
                     * @param {matrix_io.malos.v1.sense.IDummy=} [properties] Properties to set
                     */
                    function Dummy(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Dummy value.
                     * @member {number} value
                     * @memberof matrix_io.malos.v1.sense.Dummy
                     * @instance
                     */
                    Dummy.prototype.value = 0;

                    /**
                     * Creates a new Dummy instance using the specified properties.
                     * @function create
                     * @memberof matrix_io.malos.v1.sense.Dummy
                     * @static
                     * @param {matrix_io.malos.v1.sense.IDummy=} [properties] Properties to set
                     * @returns {matrix_io.malos.v1.sense.Dummy} Dummy instance
                     */
                    Dummy.create = function create(properties) {
                        return new Dummy(properties);
                    };

                    /**
                     * Encodes the specified Dummy message. Does not implicitly {@link matrix_io.malos.v1.sense.Dummy.verify|verify} messages.
                     * @function encode
                     * @memberof matrix_io.malos.v1.sense.Dummy
                     * @static
                     * @param {matrix_io.malos.v1.sense.IDummy} message Dummy message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Dummy.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.value != null && message.hasOwnProperty("value"))
                            writer.uint32(/* id 1, wireType 5 =*/13).float(message.value);
                        return writer;
                    };

                    /**
                     * Encodes the specified Dummy message, length delimited. Does not implicitly {@link matrix_io.malos.v1.sense.Dummy.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof matrix_io.malos.v1.sense.Dummy
                     * @static
                     * @param {matrix_io.malos.v1.sense.IDummy} message Dummy message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Dummy.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a Dummy message from the specified reader or buffer.
                     * @function decode
                     * @memberof matrix_io.malos.v1.sense.Dummy
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {matrix_io.malos.v1.sense.Dummy} Dummy
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Dummy.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.malos.v1.sense.Dummy();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.value = reader.float();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a Dummy message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof matrix_io.malos.v1.sense.Dummy
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {matrix_io.malos.v1.sense.Dummy} Dummy
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Dummy.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a Dummy message.
                     * @function verify
                     * @memberof matrix_io.malos.v1.sense.Dummy
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Dummy.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.value != null && message.hasOwnProperty("value"))
                            if (typeof message.value !== "number")
                                return "value: number expected";
                        return null;
                    };

                    /**
                     * Creates a Dummy message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof matrix_io.malos.v1.sense.Dummy
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {matrix_io.malos.v1.sense.Dummy} Dummy
                     */
                    Dummy.fromObject = function fromObject(object) {
                        if (object instanceof $root.matrix_io.malos.v1.sense.Dummy)
                            return object;
                        var message = new $root.matrix_io.malos.v1.sense.Dummy();
                        if (object.value != null)
                            message.value = Number(object.value);
                        return message;
                    };

                    /**
                     * Creates a plain object from a Dummy message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof matrix_io.malos.v1.sense.Dummy
                     * @static
                     * @param {matrix_io.malos.v1.sense.Dummy} message Dummy
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Dummy.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.value = 0;
                        if (message.value != null && message.hasOwnProperty("value"))
                            object.value = options.json && !isFinite(message.value) ? String(message.value) : message.value;
                        return object;
                    };

                    /**
                     * Converts this Dummy to JSON.
                     * @function toJSON
                     * @memberof matrix_io.malos.v1.sense.Dummy
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Dummy.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return Dummy;
                })();

                sense.Humidity = (function() {

                    /**
                     * Properties of a Humidity.
                     * @memberof matrix_io.malos.v1.sense
                     * @interface IHumidity
                     * @property {number|null} [humidity] Humidity humidity
                     * @property {number|null} [temperature] Humidity temperature
                     * @property {number|null} [temperatureRaw] Humidity temperatureRaw
                     * @property {boolean|null} [temperatureIsCalibrated] Humidity temperatureIsCalibrated
                     */

                    /**
                     * Constructs a new Humidity.
                     * @memberof matrix_io.malos.v1.sense
                     * @classdesc Represents a Humidity.
                     * @implements IHumidity
                     * @constructor
                     * @param {matrix_io.malos.v1.sense.IHumidity=} [properties] Properties to set
                     */
                    function Humidity(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Humidity humidity.
                     * @member {number} humidity
                     * @memberof matrix_io.malos.v1.sense.Humidity
                     * @instance
                     */
                    Humidity.prototype.humidity = 0;

                    /**
                     * Humidity temperature.
                     * @member {number} temperature
                     * @memberof matrix_io.malos.v1.sense.Humidity
                     * @instance
                     */
                    Humidity.prototype.temperature = 0;

                    /**
                     * Humidity temperatureRaw.
                     * @member {number} temperatureRaw
                     * @memberof matrix_io.malos.v1.sense.Humidity
                     * @instance
                     */
                    Humidity.prototype.temperatureRaw = 0;

                    /**
                     * Humidity temperatureIsCalibrated.
                     * @member {boolean} temperatureIsCalibrated
                     * @memberof matrix_io.malos.v1.sense.Humidity
                     * @instance
                     */
                    Humidity.prototype.temperatureIsCalibrated = false;

                    /**
                     * Creates a new Humidity instance using the specified properties.
                     * @function create
                     * @memberof matrix_io.malos.v1.sense.Humidity
                     * @static
                     * @param {matrix_io.malos.v1.sense.IHumidity=} [properties] Properties to set
                     * @returns {matrix_io.malos.v1.sense.Humidity} Humidity instance
                     */
                    Humidity.create = function create(properties) {
                        return new Humidity(properties);
                    };

                    /**
                     * Encodes the specified Humidity message. Does not implicitly {@link matrix_io.malos.v1.sense.Humidity.verify|verify} messages.
                     * @function encode
                     * @memberof matrix_io.malos.v1.sense.Humidity
                     * @static
                     * @param {matrix_io.malos.v1.sense.IHumidity} message Humidity message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Humidity.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.humidity != null && message.hasOwnProperty("humidity"))
                            writer.uint32(/* id 1, wireType 5 =*/13).float(message.humidity);
                        if (message.temperature != null && message.hasOwnProperty("temperature"))
                            writer.uint32(/* id 2, wireType 5 =*/21).float(message.temperature);
                        if (message.temperatureRaw != null && message.hasOwnProperty("temperatureRaw"))
                            writer.uint32(/* id 3, wireType 5 =*/29).float(message.temperatureRaw);
                        if (message.temperatureIsCalibrated != null && message.hasOwnProperty("temperatureIsCalibrated"))
                            writer.uint32(/* id 4, wireType 0 =*/32).bool(message.temperatureIsCalibrated);
                        return writer;
                    };

                    /**
                     * Encodes the specified Humidity message, length delimited. Does not implicitly {@link matrix_io.malos.v1.sense.Humidity.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof matrix_io.malos.v1.sense.Humidity
                     * @static
                     * @param {matrix_io.malos.v1.sense.IHumidity} message Humidity message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Humidity.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a Humidity message from the specified reader or buffer.
                     * @function decode
                     * @memberof matrix_io.malos.v1.sense.Humidity
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {matrix_io.malos.v1.sense.Humidity} Humidity
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Humidity.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.malos.v1.sense.Humidity();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.humidity = reader.float();
                                break;
                            case 2:
                                message.temperature = reader.float();
                                break;
                            case 3:
                                message.temperatureRaw = reader.float();
                                break;
                            case 4:
                                message.temperatureIsCalibrated = reader.bool();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a Humidity message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof matrix_io.malos.v1.sense.Humidity
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {matrix_io.malos.v1.sense.Humidity} Humidity
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Humidity.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a Humidity message.
                     * @function verify
                     * @memberof matrix_io.malos.v1.sense.Humidity
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Humidity.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.humidity != null && message.hasOwnProperty("humidity"))
                            if (typeof message.humidity !== "number")
                                return "humidity: number expected";
                        if (message.temperature != null && message.hasOwnProperty("temperature"))
                            if (typeof message.temperature !== "number")
                                return "temperature: number expected";
                        if (message.temperatureRaw != null && message.hasOwnProperty("temperatureRaw"))
                            if (typeof message.temperatureRaw !== "number")
                                return "temperatureRaw: number expected";
                        if (message.temperatureIsCalibrated != null && message.hasOwnProperty("temperatureIsCalibrated"))
                            if (typeof message.temperatureIsCalibrated !== "boolean")
                                return "temperatureIsCalibrated: boolean expected";
                        return null;
                    };

                    /**
                     * Creates a Humidity message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof matrix_io.malos.v1.sense.Humidity
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {matrix_io.malos.v1.sense.Humidity} Humidity
                     */
                    Humidity.fromObject = function fromObject(object) {
                        if (object instanceof $root.matrix_io.malos.v1.sense.Humidity)
                            return object;
                        var message = new $root.matrix_io.malos.v1.sense.Humidity();
                        if (object.humidity != null)
                            message.humidity = Number(object.humidity);
                        if (object.temperature != null)
                            message.temperature = Number(object.temperature);
                        if (object.temperatureRaw != null)
                            message.temperatureRaw = Number(object.temperatureRaw);
                        if (object.temperatureIsCalibrated != null)
                            message.temperatureIsCalibrated = Boolean(object.temperatureIsCalibrated);
                        return message;
                    };

                    /**
                     * Creates a plain object from a Humidity message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof matrix_io.malos.v1.sense.Humidity
                     * @static
                     * @param {matrix_io.malos.v1.sense.Humidity} message Humidity
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Humidity.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.humidity = 0;
                            object.temperature = 0;
                            object.temperatureRaw = 0;
                            object.temperatureIsCalibrated = false;
                        }
                        if (message.humidity != null && message.hasOwnProperty("humidity"))
                            object.humidity = options.json && !isFinite(message.humidity) ? String(message.humidity) : message.humidity;
                        if (message.temperature != null && message.hasOwnProperty("temperature"))
                            object.temperature = options.json && !isFinite(message.temperature) ? String(message.temperature) : message.temperature;
                        if (message.temperatureRaw != null && message.hasOwnProperty("temperatureRaw"))
                            object.temperatureRaw = options.json && !isFinite(message.temperatureRaw) ? String(message.temperatureRaw) : message.temperatureRaw;
                        if (message.temperatureIsCalibrated != null && message.hasOwnProperty("temperatureIsCalibrated"))
                            object.temperatureIsCalibrated = message.temperatureIsCalibrated;
                        return object;
                    };

                    /**
                     * Converts this Humidity to JSON.
                     * @function toJSON
                     * @memberof matrix_io.malos.v1.sense.Humidity
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Humidity.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return Humidity;
                })();

                sense.HumidityParams = (function() {

                    /**
                     * Properties of a HumidityParams.
                     * @memberof matrix_io.malos.v1.sense
                     * @interface IHumidityParams
                     * @property {number|null} [currentTemperature] HumidityParams currentTemperature
                     */

                    /**
                     * Constructs a new HumidityParams.
                     * @memberof matrix_io.malos.v1.sense
                     * @classdesc Represents a HumidityParams.
                     * @implements IHumidityParams
                     * @constructor
                     * @param {matrix_io.malos.v1.sense.IHumidityParams=} [properties] Properties to set
                     */
                    function HumidityParams(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * HumidityParams currentTemperature.
                     * @member {number} currentTemperature
                     * @memberof matrix_io.malos.v1.sense.HumidityParams
                     * @instance
                     */
                    HumidityParams.prototype.currentTemperature = 0;

                    /**
                     * Creates a new HumidityParams instance using the specified properties.
                     * @function create
                     * @memberof matrix_io.malos.v1.sense.HumidityParams
                     * @static
                     * @param {matrix_io.malos.v1.sense.IHumidityParams=} [properties] Properties to set
                     * @returns {matrix_io.malos.v1.sense.HumidityParams} HumidityParams instance
                     */
                    HumidityParams.create = function create(properties) {
                        return new HumidityParams(properties);
                    };

                    /**
                     * Encodes the specified HumidityParams message. Does not implicitly {@link matrix_io.malos.v1.sense.HumidityParams.verify|verify} messages.
                     * @function encode
                     * @memberof matrix_io.malos.v1.sense.HumidityParams
                     * @static
                     * @param {matrix_io.malos.v1.sense.IHumidityParams} message HumidityParams message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    HumidityParams.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.currentTemperature != null && message.hasOwnProperty("currentTemperature"))
                            writer.uint32(/* id 1, wireType 5 =*/13).float(message.currentTemperature);
                        return writer;
                    };

                    /**
                     * Encodes the specified HumidityParams message, length delimited. Does not implicitly {@link matrix_io.malos.v1.sense.HumidityParams.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof matrix_io.malos.v1.sense.HumidityParams
                     * @static
                     * @param {matrix_io.malos.v1.sense.IHumidityParams} message HumidityParams message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    HumidityParams.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a HumidityParams message from the specified reader or buffer.
                     * @function decode
                     * @memberof matrix_io.malos.v1.sense.HumidityParams
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {matrix_io.malos.v1.sense.HumidityParams} HumidityParams
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    HumidityParams.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.malos.v1.sense.HumidityParams();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.currentTemperature = reader.float();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a HumidityParams message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof matrix_io.malos.v1.sense.HumidityParams
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {matrix_io.malos.v1.sense.HumidityParams} HumidityParams
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    HumidityParams.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a HumidityParams message.
                     * @function verify
                     * @memberof matrix_io.malos.v1.sense.HumidityParams
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    HumidityParams.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.currentTemperature != null && message.hasOwnProperty("currentTemperature"))
                            if (typeof message.currentTemperature !== "number")
                                return "currentTemperature: number expected";
                        return null;
                    };

                    /**
                     * Creates a HumidityParams message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof matrix_io.malos.v1.sense.HumidityParams
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {matrix_io.malos.v1.sense.HumidityParams} HumidityParams
                     */
                    HumidityParams.fromObject = function fromObject(object) {
                        if (object instanceof $root.matrix_io.malos.v1.sense.HumidityParams)
                            return object;
                        var message = new $root.matrix_io.malos.v1.sense.HumidityParams();
                        if (object.currentTemperature != null)
                            message.currentTemperature = Number(object.currentTemperature);
                        return message;
                    };

                    /**
                     * Creates a plain object from a HumidityParams message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof matrix_io.malos.v1.sense.HumidityParams
                     * @static
                     * @param {matrix_io.malos.v1.sense.HumidityParams} message HumidityParams
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    HumidityParams.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.currentTemperature = 0;
                        if (message.currentTemperature != null && message.hasOwnProperty("currentTemperature"))
                            object.currentTemperature = options.json && !isFinite(message.currentTemperature) ? String(message.currentTemperature) : message.currentTemperature;
                        return object;
                    };

                    /**
                     * Converts this HumidityParams to JSON.
                     * @function toJSON
                     * @memberof matrix_io.malos.v1.sense.HumidityParams
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    HumidityParams.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return HumidityParams;
                })();

                sense.UV = (function() {

                    /**
                     * Properties of a UV.
                     * @memberof matrix_io.malos.v1.sense
                     * @interface IUV
                     * @property {number|null} [uvIndex] UV uvIndex
                     * @property {string|null} [omsRisk] UV omsRisk
                     */

                    /**
                     * Constructs a new UV.
                     * @memberof matrix_io.malos.v1.sense
                     * @classdesc Represents a UV.
                     * @implements IUV
                     * @constructor
                     * @param {matrix_io.malos.v1.sense.IUV=} [properties] Properties to set
                     */
                    function UV(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * UV uvIndex.
                     * @member {number} uvIndex
                     * @memberof matrix_io.malos.v1.sense.UV
                     * @instance
                     */
                    UV.prototype.uvIndex = 0;

                    /**
                     * UV omsRisk.
                     * @member {string} omsRisk
                     * @memberof matrix_io.malos.v1.sense.UV
                     * @instance
                     */
                    UV.prototype.omsRisk = "";

                    /**
                     * Creates a new UV instance using the specified properties.
                     * @function create
                     * @memberof matrix_io.malos.v1.sense.UV
                     * @static
                     * @param {matrix_io.malos.v1.sense.IUV=} [properties] Properties to set
                     * @returns {matrix_io.malos.v1.sense.UV} UV instance
                     */
                    UV.create = function create(properties) {
                        return new UV(properties);
                    };

                    /**
                     * Encodes the specified UV message. Does not implicitly {@link matrix_io.malos.v1.sense.UV.verify|verify} messages.
                     * @function encode
                     * @memberof matrix_io.malos.v1.sense.UV
                     * @static
                     * @param {matrix_io.malos.v1.sense.IUV} message UV message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    UV.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.uvIndex != null && message.hasOwnProperty("uvIndex"))
                            writer.uint32(/* id 1, wireType 5 =*/13).float(message.uvIndex);
                        if (message.omsRisk != null && message.hasOwnProperty("omsRisk"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.omsRisk);
                        return writer;
                    };

                    /**
                     * Encodes the specified UV message, length delimited. Does not implicitly {@link matrix_io.malos.v1.sense.UV.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof matrix_io.malos.v1.sense.UV
                     * @static
                     * @param {matrix_io.malos.v1.sense.IUV} message UV message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    UV.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a UV message from the specified reader or buffer.
                     * @function decode
                     * @memberof matrix_io.malos.v1.sense.UV
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {matrix_io.malos.v1.sense.UV} UV
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    UV.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.malos.v1.sense.UV();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.uvIndex = reader.float();
                                break;
                            case 2:
                                message.omsRisk = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a UV message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof matrix_io.malos.v1.sense.UV
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {matrix_io.malos.v1.sense.UV} UV
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    UV.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a UV message.
                     * @function verify
                     * @memberof matrix_io.malos.v1.sense.UV
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    UV.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.uvIndex != null && message.hasOwnProperty("uvIndex"))
                            if (typeof message.uvIndex !== "number")
                                return "uvIndex: number expected";
                        if (message.omsRisk != null && message.hasOwnProperty("omsRisk"))
                            if (!$util.isString(message.omsRisk))
                                return "omsRisk: string expected";
                        return null;
                    };

                    /**
                     * Creates a UV message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof matrix_io.malos.v1.sense.UV
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {matrix_io.malos.v1.sense.UV} UV
                     */
                    UV.fromObject = function fromObject(object) {
                        if (object instanceof $root.matrix_io.malos.v1.sense.UV)
                            return object;
                        var message = new $root.matrix_io.malos.v1.sense.UV();
                        if (object.uvIndex != null)
                            message.uvIndex = Number(object.uvIndex);
                        if (object.omsRisk != null)
                            message.omsRisk = String(object.omsRisk);
                        return message;
                    };

                    /**
                     * Creates a plain object from a UV message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof matrix_io.malos.v1.sense.UV
                     * @static
                     * @param {matrix_io.malos.v1.sense.UV} message UV
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    UV.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.uvIndex = 0;
                            object.omsRisk = "";
                        }
                        if (message.uvIndex != null && message.hasOwnProperty("uvIndex"))
                            object.uvIndex = options.json && !isFinite(message.uvIndex) ? String(message.uvIndex) : message.uvIndex;
                        if (message.omsRisk != null && message.hasOwnProperty("omsRisk"))
                            object.omsRisk = message.omsRisk;
                        return object;
                    };

                    /**
                     * Converts this UV to JSON.
                     * @function toJSON
                     * @memberof matrix_io.malos.v1.sense.UV
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    UV.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return UV;
                })();

                sense.Pressure = (function() {

                    /**
                     * Properties of a Pressure.
                     * @memberof matrix_io.malos.v1.sense
                     * @interface IPressure
                     * @property {number|null} [pressure] Pressure pressure
                     * @property {number|null} [altitude] Pressure altitude
                     * @property {number|null} [temperature] Pressure temperature
                     */

                    /**
                     * Constructs a new Pressure.
                     * @memberof matrix_io.malos.v1.sense
                     * @classdesc Represents a Pressure.
                     * @implements IPressure
                     * @constructor
                     * @param {matrix_io.malos.v1.sense.IPressure=} [properties] Properties to set
                     */
                    function Pressure(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Pressure pressure.
                     * @member {number} pressure
                     * @memberof matrix_io.malos.v1.sense.Pressure
                     * @instance
                     */
                    Pressure.prototype.pressure = 0;

                    /**
                     * Pressure altitude.
                     * @member {number} altitude
                     * @memberof matrix_io.malos.v1.sense.Pressure
                     * @instance
                     */
                    Pressure.prototype.altitude = 0;

                    /**
                     * Pressure temperature.
                     * @member {number} temperature
                     * @memberof matrix_io.malos.v1.sense.Pressure
                     * @instance
                     */
                    Pressure.prototype.temperature = 0;

                    /**
                     * Creates a new Pressure instance using the specified properties.
                     * @function create
                     * @memberof matrix_io.malos.v1.sense.Pressure
                     * @static
                     * @param {matrix_io.malos.v1.sense.IPressure=} [properties] Properties to set
                     * @returns {matrix_io.malos.v1.sense.Pressure} Pressure instance
                     */
                    Pressure.create = function create(properties) {
                        return new Pressure(properties);
                    };

                    /**
                     * Encodes the specified Pressure message. Does not implicitly {@link matrix_io.malos.v1.sense.Pressure.verify|verify} messages.
                     * @function encode
                     * @memberof matrix_io.malos.v1.sense.Pressure
                     * @static
                     * @param {matrix_io.malos.v1.sense.IPressure} message Pressure message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Pressure.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.pressure != null && message.hasOwnProperty("pressure"))
                            writer.uint32(/* id 1, wireType 5 =*/13).float(message.pressure);
                        if (message.altitude != null && message.hasOwnProperty("altitude"))
                            writer.uint32(/* id 2, wireType 5 =*/21).float(message.altitude);
                        if (message.temperature != null && message.hasOwnProperty("temperature"))
                            writer.uint32(/* id 3, wireType 5 =*/29).float(message.temperature);
                        return writer;
                    };

                    /**
                     * Encodes the specified Pressure message, length delimited. Does not implicitly {@link matrix_io.malos.v1.sense.Pressure.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof matrix_io.malos.v1.sense.Pressure
                     * @static
                     * @param {matrix_io.malos.v1.sense.IPressure} message Pressure message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Pressure.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a Pressure message from the specified reader or buffer.
                     * @function decode
                     * @memberof matrix_io.malos.v1.sense.Pressure
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {matrix_io.malos.v1.sense.Pressure} Pressure
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Pressure.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.malos.v1.sense.Pressure();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.pressure = reader.float();
                                break;
                            case 2:
                                message.altitude = reader.float();
                                break;
                            case 3:
                                message.temperature = reader.float();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a Pressure message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof matrix_io.malos.v1.sense.Pressure
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {matrix_io.malos.v1.sense.Pressure} Pressure
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Pressure.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a Pressure message.
                     * @function verify
                     * @memberof matrix_io.malos.v1.sense.Pressure
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Pressure.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.pressure != null && message.hasOwnProperty("pressure"))
                            if (typeof message.pressure !== "number")
                                return "pressure: number expected";
                        if (message.altitude != null && message.hasOwnProperty("altitude"))
                            if (typeof message.altitude !== "number")
                                return "altitude: number expected";
                        if (message.temperature != null && message.hasOwnProperty("temperature"))
                            if (typeof message.temperature !== "number")
                                return "temperature: number expected";
                        return null;
                    };

                    /**
                     * Creates a Pressure message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof matrix_io.malos.v1.sense.Pressure
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {matrix_io.malos.v1.sense.Pressure} Pressure
                     */
                    Pressure.fromObject = function fromObject(object) {
                        if (object instanceof $root.matrix_io.malos.v1.sense.Pressure)
                            return object;
                        var message = new $root.matrix_io.malos.v1.sense.Pressure();
                        if (object.pressure != null)
                            message.pressure = Number(object.pressure);
                        if (object.altitude != null)
                            message.altitude = Number(object.altitude);
                        if (object.temperature != null)
                            message.temperature = Number(object.temperature);
                        return message;
                    };

                    /**
                     * Creates a plain object from a Pressure message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof matrix_io.malos.v1.sense.Pressure
                     * @static
                     * @param {matrix_io.malos.v1.sense.Pressure} message Pressure
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Pressure.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.pressure = 0;
                            object.altitude = 0;
                            object.temperature = 0;
                        }
                        if (message.pressure != null && message.hasOwnProperty("pressure"))
                            object.pressure = options.json && !isFinite(message.pressure) ? String(message.pressure) : message.pressure;
                        if (message.altitude != null && message.hasOwnProperty("altitude"))
                            object.altitude = options.json && !isFinite(message.altitude) ? String(message.altitude) : message.altitude;
                        if (message.temperature != null && message.hasOwnProperty("temperature"))
                            object.temperature = options.json && !isFinite(message.temperature) ? String(message.temperature) : message.temperature;
                        return object;
                    };

                    /**
                     * Converts this Pressure to JSON.
                     * @function toJSON
                     * @memberof matrix_io.malos.v1.sense.Pressure
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Pressure.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return Pressure;
                })();

                sense.Imu = (function() {

                    /**
                     * Properties of an Imu.
                     * @memberof matrix_io.malos.v1.sense
                     * @interface IImu
                     * @property {number|null} [yaw] Imu yaw
                     * @property {number|null} [pitch] Imu pitch
                     * @property {number|null} [roll] Imu roll
                     * @property {number|null} [accelX] Imu accelX
                     * @property {number|null} [accelY] Imu accelY
                     * @property {number|null} [accelZ] Imu accelZ
                     * @property {number|null} [gyroX] Imu gyroX
                     * @property {number|null} [gyroY] Imu gyroY
                     * @property {number|null} [gyroZ] Imu gyroZ
                     * @property {number|null} [magX] Imu magX
                     * @property {number|null} [magY] Imu magY
                     * @property {number|null} [magZ] Imu magZ
                     */

                    /**
                     * Constructs a new Imu.
                     * @memberof matrix_io.malos.v1.sense
                     * @classdesc Represents an Imu.
                     * @implements IImu
                     * @constructor
                     * @param {matrix_io.malos.v1.sense.IImu=} [properties] Properties to set
                     */
                    function Imu(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Imu yaw.
                     * @member {number} yaw
                     * @memberof matrix_io.malos.v1.sense.Imu
                     * @instance
                     */
                    Imu.prototype.yaw = 0;

                    /**
                     * Imu pitch.
                     * @member {number} pitch
                     * @memberof matrix_io.malos.v1.sense.Imu
                     * @instance
                     */
                    Imu.prototype.pitch = 0;

                    /**
                     * Imu roll.
                     * @member {number} roll
                     * @memberof matrix_io.malos.v1.sense.Imu
                     * @instance
                     */
                    Imu.prototype.roll = 0;

                    /**
                     * Imu accelX.
                     * @member {number} accelX
                     * @memberof matrix_io.malos.v1.sense.Imu
                     * @instance
                     */
                    Imu.prototype.accelX = 0;

                    /**
                     * Imu accelY.
                     * @member {number} accelY
                     * @memberof matrix_io.malos.v1.sense.Imu
                     * @instance
                     */
                    Imu.prototype.accelY = 0;

                    /**
                     * Imu accelZ.
                     * @member {number} accelZ
                     * @memberof matrix_io.malos.v1.sense.Imu
                     * @instance
                     */
                    Imu.prototype.accelZ = 0;

                    /**
                     * Imu gyroX.
                     * @member {number} gyroX
                     * @memberof matrix_io.malos.v1.sense.Imu
                     * @instance
                     */
                    Imu.prototype.gyroX = 0;

                    /**
                     * Imu gyroY.
                     * @member {number} gyroY
                     * @memberof matrix_io.malos.v1.sense.Imu
                     * @instance
                     */
                    Imu.prototype.gyroY = 0;

                    /**
                     * Imu gyroZ.
                     * @member {number} gyroZ
                     * @memberof matrix_io.malos.v1.sense.Imu
                     * @instance
                     */
                    Imu.prototype.gyroZ = 0;

                    /**
                     * Imu magX.
                     * @member {number} magX
                     * @memberof matrix_io.malos.v1.sense.Imu
                     * @instance
                     */
                    Imu.prototype.magX = 0;

                    /**
                     * Imu magY.
                     * @member {number} magY
                     * @memberof matrix_io.malos.v1.sense.Imu
                     * @instance
                     */
                    Imu.prototype.magY = 0;

                    /**
                     * Imu magZ.
                     * @member {number} magZ
                     * @memberof matrix_io.malos.v1.sense.Imu
                     * @instance
                     */
                    Imu.prototype.magZ = 0;

                    /**
                     * Creates a new Imu instance using the specified properties.
                     * @function create
                     * @memberof matrix_io.malos.v1.sense.Imu
                     * @static
                     * @param {matrix_io.malos.v1.sense.IImu=} [properties] Properties to set
                     * @returns {matrix_io.malos.v1.sense.Imu} Imu instance
                     */
                    Imu.create = function create(properties) {
                        return new Imu(properties);
                    };

                    /**
                     * Encodes the specified Imu message. Does not implicitly {@link matrix_io.malos.v1.sense.Imu.verify|verify} messages.
                     * @function encode
                     * @memberof matrix_io.malos.v1.sense.Imu
                     * @static
                     * @param {matrix_io.malos.v1.sense.IImu} message Imu message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Imu.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.yaw != null && message.hasOwnProperty("yaw"))
                            writer.uint32(/* id 1, wireType 5 =*/13).float(message.yaw);
                        if (message.pitch != null && message.hasOwnProperty("pitch"))
                            writer.uint32(/* id 2, wireType 5 =*/21).float(message.pitch);
                        if (message.roll != null && message.hasOwnProperty("roll"))
                            writer.uint32(/* id 3, wireType 5 =*/29).float(message.roll);
                        if (message.accelX != null && message.hasOwnProperty("accelX"))
                            writer.uint32(/* id 4, wireType 5 =*/37).float(message.accelX);
                        if (message.accelY != null && message.hasOwnProperty("accelY"))
                            writer.uint32(/* id 5, wireType 5 =*/45).float(message.accelY);
                        if (message.accelZ != null && message.hasOwnProperty("accelZ"))
                            writer.uint32(/* id 6, wireType 5 =*/53).float(message.accelZ);
                        if (message.gyroX != null && message.hasOwnProperty("gyroX"))
                            writer.uint32(/* id 7, wireType 5 =*/61).float(message.gyroX);
                        if (message.gyroY != null && message.hasOwnProperty("gyroY"))
                            writer.uint32(/* id 8, wireType 5 =*/69).float(message.gyroY);
                        if (message.gyroZ != null && message.hasOwnProperty("gyroZ"))
                            writer.uint32(/* id 9, wireType 5 =*/77).float(message.gyroZ);
                        if (message.magX != null && message.hasOwnProperty("magX"))
                            writer.uint32(/* id 10, wireType 5 =*/85).float(message.magX);
                        if (message.magY != null && message.hasOwnProperty("magY"))
                            writer.uint32(/* id 11, wireType 5 =*/93).float(message.magY);
                        if (message.magZ != null && message.hasOwnProperty("magZ"))
                            writer.uint32(/* id 12, wireType 5 =*/101).float(message.magZ);
                        return writer;
                    };

                    /**
                     * Encodes the specified Imu message, length delimited. Does not implicitly {@link matrix_io.malos.v1.sense.Imu.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof matrix_io.malos.v1.sense.Imu
                     * @static
                     * @param {matrix_io.malos.v1.sense.IImu} message Imu message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Imu.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes an Imu message from the specified reader or buffer.
                     * @function decode
                     * @memberof matrix_io.malos.v1.sense.Imu
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {matrix_io.malos.v1.sense.Imu} Imu
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Imu.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.malos.v1.sense.Imu();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.yaw = reader.float();
                                break;
                            case 2:
                                message.pitch = reader.float();
                                break;
                            case 3:
                                message.roll = reader.float();
                                break;
                            case 4:
                                message.accelX = reader.float();
                                break;
                            case 5:
                                message.accelY = reader.float();
                                break;
                            case 6:
                                message.accelZ = reader.float();
                                break;
                            case 7:
                                message.gyroX = reader.float();
                                break;
                            case 8:
                                message.gyroY = reader.float();
                                break;
                            case 9:
                                message.gyroZ = reader.float();
                                break;
                            case 10:
                                message.magX = reader.float();
                                break;
                            case 11:
                                message.magY = reader.float();
                                break;
                            case 12:
                                message.magZ = reader.float();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes an Imu message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof matrix_io.malos.v1.sense.Imu
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {matrix_io.malos.v1.sense.Imu} Imu
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Imu.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies an Imu message.
                     * @function verify
                     * @memberof matrix_io.malos.v1.sense.Imu
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Imu.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.yaw != null && message.hasOwnProperty("yaw"))
                            if (typeof message.yaw !== "number")
                                return "yaw: number expected";
                        if (message.pitch != null && message.hasOwnProperty("pitch"))
                            if (typeof message.pitch !== "number")
                                return "pitch: number expected";
                        if (message.roll != null && message.hasOwnProperty("roll"))
                            if (typeof message.roll !== "number")
                                return "roll: number expected";
                        if (message.accelX != null && message.hasOwnProperty("accelX"))
                            if (typeof message.accelX !== "number")
                                return "accelX: number expected";
                        if (message.accelY != null && message.hasOwnProperty("accelY"))
                            if (typeof message.accelY !== "number")
                                return "accelY: number expected";
                        if (message.accelZ != null && message.hasOwnProperty("accelZ"))
                            if (typeof message.accelZ !== "number")
                                return "accelZ: number expected";
                        if (message.gyroX != null && message.hasOwnProperty("gyroX"))
                            if (typeof message.gyroX !== "number")
                                return "gyroX: number expected";
                        if (message.gyroY != null && message.hasOwnProperty("gyroY"))
                            if (typeof message.gyroY !== "number")
                                return "gyroY: number expected";
                        if (message.gyroZ != null && message.hasOwnProperty("gyroZ"))
                            if (typeof message.gyroZ !== "number")
                                return "gyroZ: number expected";
                        if (message.magX != null && message.hasOwnProperty("magX"))
                            if (typeof message.magX !== "number")
                                return "magX: number expected";
                        if (message.magY != null && message.hasOwnProperty("magY"))
                            if (typeof message.magY !== "number")
                                return "magY: number expected";
                        if (message.magZ != null && message.hasOwnProperty("magZ"))
                            if (typeof message.magZ !== "number")
                                return "magZ: number expected";
                        return null;
                    };

                    /**
                     * Creates an Imu message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof matrix_io.malos.v1.sense.Imu
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {matrix_io.malos.v1.sense.Imu} Imu
                     */
                    Imu.fromObject = function fromObject(object) {
                        if (object instanceof $root.matrix_io.malos.v1.sense.Imu)
                            return object;
                        var message = new $root.matrix_io.malos.v1.sense.Imu();
                        if (object.yaw != null)
                            message.yaw = Number(object.yaw);
                        if (object.pitch != null)
                            message.pitch = Number(object.pitch);
                        if (object.roll != null)
                            message.roll = Number(object.roll);
                        if (object.accelX != null)
                            message.accelX = Number(object.accelX);
                        if (object.accelY != null)
                            message.accelY = Number(object.accelY);
                        if (object.accelZ != null)
                            message.accelZ = Number(object.accelZ);
                        if (object.gyroX != null)
                            message.gyroX = Number(object.gyroX);
                        if (object.gyroY != null)
                            message.gyroY = Number(object.gyroY);
                        if (object.gyroZ != null)
                            message.gyroZ = Number(object.gyroZ);
                        if (object.magX != null)
                            message.magX = Number(object.magX);
                        if (object.magY != null)
                            message.magY = Number(object.magY);
                        if (object.magZ != null)
                            message.magZ = Number(object.magZ);
                        return message;
                    };

                    /**
                     * Creates a plain object from an Imu message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof matrix_io.malos.v1.sense.Imu
                     * @static
                     * @param {matrix_io.malos.v1.sense.Imu} message Imu
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Imu.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.yaw = 0;
                            object.pitch = 0;
                            object.roll = 0;
                            object.accelX = 0;
                            object.accelY = 0;
                            object.accelZ = 0;
                            object.gyroX = 0;
                            object.gyroY = 0;
                            object.gyroZ = 0;
                            object.magX = 0;
                            object.magY = 0;
                            object.magZ = 0;
                        }
                        if (message.yaw != null && message.hasOwnProperty("yaw"))
                            object.yaw = options.json && !isFinite(message.yaw) ? String(message.yaw) : message.yaw;
                        if (message.pitch != null && message.hasOwnProperty("pitch"))
                            object.pitch = options.json && !isFinite(message.pitch) ? String(message.pitch) : message.pitch;
                        if (message.roll != null && message.hasOwnProperty("roll"))
                            object.roll = options.json && !isFinite(message.roll) ? String(message.roll) : message.roll;
                        if (message.accelX != null && message.hasOwnProperty("accelX"))
                            object.accelX = options.json && !isFinite(message.accelX) ? String(message.accelX) : message.accelX;
                        if (message.accelY != null && message.hasOwnProperty("accelY"))
                            object.accelY = options.json && !isFinite(message.accelY) ? String(message.accelY) : message.accelY;
                        if (message.accelZ != null && message.hasOwnProperty("accelZ"))
                            object.accelZ = options.json && !isFinite(message.accelZ) ? String(message.accelZ) : message.accelZ;
                        if (message.gyroX != null && message.hasOwnProperty("gyroX"))
                            object.gyroX = options.json && !isFinite(message.gyroX) ? String(message.gyroX) : message.gyroX;
                        if (message.gyroY != null && message.hasOwnProperty("gyroY"))
                            object.gyroY = options.json && !isFinite(message.gyroY) ? String(message.gyroY) : message.gyroY;
                        if (message.gyroZ != null && message.hasOwnProperty("gyroZ"))
                            object.gyroZ = options.json && !isFinite(message.gyroZ) ? String(message.gyroZ) : message.gyroZ;
                        if (message.magX != null && message.hasOwnProperty("magX"))
                            object.magX = options.json && !isFinite(message.magX) ? String(message.magX) : message.magX;
                        if (message.magY != null && message.hasOwnProperty("magY"))
                            object.magY = options.json && !isFinite(message.magY) ? String(message.magY) : message.magY;
                        if (message.magZ != null && message.hasOwnProperty("magZ"))
                            object.magZ = options.json && !isFinite(message.magZ) ? String(message.magZ) : message.magZ;
                        return object;
                    };

                    /**
                     * Converts this Imu to JSON.
                     * @function toJSON
                     * @memberof matrix_io.malos.v1.sense.Imu
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Imu.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return Imu;
                })();

                return sense;
            })();

            v1.maloseye = (function() {

                /**
                 * Namespace maloseye.
                 * @memberof matrix_io.malos.v1
                 * @namespace
                 */
                var maloseye = {};

                maloseye.MalosEyeConfig = (function() {

                    /**
                     * Properties of a MalosEyeConfig.
                     * @memberof matrix_io.malos.v1.maloseye
                     * @interface IMalosEyeConfig
                     * @property {matrix_io.malos.v1.maloseye.ICameraConfig|null} [cameraConfig] MalosEyeConfig cameraConfig
                     * @property {matrix_io.malos.v1.maloseye.IFaceConfig|null} [faceConfig] MalosEyeConfig faceConfig
                     * @property {matrix_io.malos.v1.maloseye.IDetectionServerConfig|null} [detectionServerConfig] MalosEyeConfig detectionServerConfig
                     * @property {Array.<matrix_io.malos.v1.maloseye.EnumMalosEyeDetectionType>|null} [objectToDetect] MalosEyeConfig objectToDetect
                     * @property {matrix_io.malos.v1.maloseye.EnumMalosAction|null} [action] MalosEyeConfig action
                     * @property {Array.<matrix_io.common.IEntity>|null} [models] MalosEyeConfig models
                     * @property {matrix_io.common.IEntity|null} [config] MalosEyeConfig config
                     */

                    /**
                     * Constructs a new MalosEyeConfig.
                     * @memberof matrix_io.malos.v1.maloseye
                     * @classdesc Represents a MalosEyeConfig.
                     * @implements IMalosEyeConfig
                     * @constructor
                     * @param {matrix_io.malos.v1.maloseye.IMalosEyeConfig=} [properties] Properties to set
                     */
                    function MalosEyeConfig(properties) {
                        this.objectToDetect = [];
                        this.models = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * MalosEyeConfig cameraConfig.
                     * @member {matrix_io.malos.v1.maloseye.ICameraConfig|null|undefined} cameraConfig
                     * @memberof matrix_io.malos.v1.maloseye.MalosEyeConfig
                     * @instance
                     */
                    MalosEyeConfig.prototype.cameraConfig = null;

                    /**
                     * MalosEyeConfig faceConfig.
                     * @member {matrix_io.malos.v1.maloseye.IFaceConfig|null|undefined} faceConfig
                     * @memberof matrix_io.malos.v1.maloseye.MalosEyeConfig
                     * @instance
                     */
                    MalosEyeConfig.prototype.faceConfig = null;

                    /**
                     * MalosEyeConfig detectionServerConfig.
                     * @member {matrix_io.malos.v1.maloseye.IDetectionServerConfig|null|undefined} detectionServerConfig
                     * @memberof matrix_io.malos.v1.maloseye.MalosEyeConfig
                     * @instance
                     */
                    MalosEyeConfig.prototype.detectionServerConfig = null;

                    /**
                     * MalosEyeConfig objectToDetect.
                     * @member {Array.<matrix_io.malos.v1.maloseye.EnumMalosEyeDetectionType>} objectToDetect
                     * @memberof matrix_io.malos.v1.maloseye.MalosEyeConfig
                     * @instance
                     */
                    MalosEyeConfig.prototype.objectToDetect = $util.emptyArray;

                    /**
                     * MalosEyeConfig action.
                     * @member {matrix_io.malos.v1.maloseye.EnumMalosAction} action
                     * @memberof matrix_io.malos.v1.maloseye.MalosEyeConfig
                     * @instance
                     */
                    MalosEyeConfig.prototype.action = 0;

                    /**
                     * MalosEyeConfig models.
                     * @member {Array.<matrix_io.common.IEntity>} models
                     * @memberof matrix_io.malos.v1.maloseye.MalosEyeConfig
                     * @instance
                     */
                    MalosEyeConfig.prototype.models = $util.emptyArray;

                    /**
                     * MalosEyeConfig config.
                     * @member {matrix_io.common.IEntity|null|undefined} config
                     * @memberof matrix_io.malos.v1.maloseye.MalosEyeConfig
                     * @instance
                     */
                    MalosEyeConfig.prototype.config = null;

                    /**
                     * Creates a new MalosEyeConfig instance using the specified properties.
                     * @function create
                     * @memberof matrix_io.malos.v1.maloseye.MalosEyeConfig
                     * @static
                     * @param {matrix_io.malos.v1.maloseye.IMalosEyeConfig=} [properties] Properties to set
                     * @returns {matrix_io.malos.v1.maloseye.MalosEyeConfig} MalosEyeConfig instance
                     */
                    MalosEyeConfig.create = function create(properties) {
                        return new MalosEyeConfig(properties);
                    };

                    /**
                     * Encodes the specified MalosEyeConfig message. Does not implicitly {@link matrix_io.malos.v1.maloseye.MalosEyeConfig.verify|verify} messages.
                     * @function encode
                     * @memberof matrix_io.malos.v1.maloseye.MalosEyeConfig
                     * @static
                     * @param {matrix_io.malos.v1.maloseye.IMalosEyeConfig} message MalosEyeConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MalosEyeConfig.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.cameraConfig != null && message.hasOwnProperty("cameraConfig"))
                            $root.matrix_io.malos.v1.maloseye.CameraConfig.encode(message.cameraConfig, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.faceConfig != null && message.hasOwnProperty("faceConfig"))
                            $root.matrix_io.malos.v1.maloseye.FaceConfig.encode(message.faceConfig, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.detectionServerConfig != null && message.hasOwnProperty("detectionServerConfig"))
                            $root.matrix_io.malos.v1.maloseye.DetectionServerConfig.encode(message.detectionServerConfig, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        if (message.action != null && message.hasOwnProperty("action"))
                            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.action);
                        if (message.models != null && message.models.length)
                            for (var i = 0; i < message.models.length; ++i)
                                $root.matrix_io.common.Entity.encode(message.models[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                        if (message.config != null && message.hasOwnProperty("config"))
                            $root.matrix_io.common.Entity.encode(message.config, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                        if (message.objectToDetect != null && message.objectToDetect.length) {
                            writer.uint32(/* id 21, wireType 2 =*/170).fork();
                            for (var i = 0; i < message.objectToDetect.length; ++i)
                                writer.int32(message.objectToDetect[i]);
                            writer.ldelim();
                        }
                        return writer;
                    };

                    /**
                     * Encodes the specified MalosEyeConfig message, length delimited. Does not implicitly {@link matrix_io.malos.v1.maloseye.MalosEyeConfig.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof matrix_io.malos.v1.maloseye.MalosEyeConfig
                     * @static
                     * @param {matrix_io.malos.v1.maloseye.IMalosEyeConfig} message MalosEyeConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MalosEyeConfig.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MalosEyeConfig message from the specified reader or buffer.
                     * @function decode
                     * @memberof matrix_io.malos.v1.maloseye.MalosEyeConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {matrix_io.malos.v1.maloseye.MalosEyeConfig} MalosEyeConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MalosEyeConfig.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.malos.v1.maloseye.MalosEyeConfig();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.cameraConfig = $root.matrix_io.malos.v1.maloseye.CameraConfig.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.faceConfig = $root.matrix_io.malos.v1.maloseye.FaceConfig.decode(reader, reader.uint32());
                                break;
                            case 4:
                                message.detectionServerConfig = $root.matrix_io.malos.v1.maloseye.DetectionServerConfig.decode(reader, reader.uint32());
                                break;
                            case 21:
                                if (!(message.objectToDetect && message.objectToDetect.length))
                                    message.objectToDetect = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.objectToDetect.push(reader.int32());
                                } else
                                    message.objectToDetect.push(reader.int32());
                                break;
                            case 5:
                                message.action = reader.int32();
                                break;
                            case 6:
                                if (!(message.models && message.models.length))
                                    message.models = [];
                                message.models.push($root.matrix_io.common.Entity.decode(reader, reader.uint32()));
                                break;
                            case 7:
                                message.config = $root.matrix_io.common.Entity.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MalosEyeConfig message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof matrix_io.malos.v1.maloseye.MalosEyeConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {matrix_io.malos.v1.maloseye.MalosEyeConfig} MalosEyeConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MalosEyeConfig.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MalosEyeConfig message.
                     * @function verify
                     * @memberof matrix_io.malos.v1.maloseye.MalosEyeConfig
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MalosEyeConfig.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.cameraConfig != null && message.hasOwnProperty("cameraConfig")) {
                            var error = $root.matrix_io.malos.v1.maloseye.CameraConfig.verify(message.cameraConfig);
                            if (error)
                                return "cameraConfig." + error;
                        }
                        if (message.faceConfig != null && message.hasOwnProperty("faceConfig")) {
                            var error = $root.matrix_io.malos.v1.maloseye.FaceConfig.verify(message.faceConfig);
                            if (error)
                                return "faceConfig." + error;
                        }
                        if (message.detectionServerConfig != null && message.hasOwnProperty("detectionServerConfig")) {
                            var error = $root.matrix_io.malos.v1.maloseye.DetectionServerConfig.verify(message.detectionServerConfig);
                            if (error)
                                return "detectionServerConfig." + error;
                        }
                        if (message.objectToDetect != null && message.hasOwnProperty("objectToDetect")) {
                            if (!Array.isArray(message.objectToDetect))
                                return "objectToDetect: array expected";
                            for (var i = 0; i < message.objectToDetect.length; ++i)
                                switch (message.objectToDetect[i]) {
                                default:
                                    return "objectToDetect: enum value[] expected";
                                case 0:
                                case 1:
                                case 20:
                                case 21:
                                case 30:
                                case 40:
                                case 41:
                                case 42:
                                case 43:
                                    break;
                                }
                        }
                        if (message.action != null && message.hasOwnProperty("action"))
                            switch (message.action) {
                            default:
                                return "action: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                            case 4:
                                break;
                            }
                        if (message.models != null && message.hasOwnProperty("models")) {
                            if (!Array.isArray(message.models))
                                return "models: array expected";
                            for (var i = 0; i < message.models.length; ++i) {
                                var error = $root.matrix_io.common.Entity.verify(message.models[i]);
                                if (error)
                                    return "models." + error;
                            }
                        }
                        if (message.config != null && message.hasOwnProperty("config")) {
                            var error = $root.matrix_io.common.Entity.verify(message.config);
                            if (error)
                                return "config." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a MalosEyeConfig message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof matrix_io.malos.v1.maloseye.MalosEyeConfig
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {matrix_io.malos.v1.maloseye.MalosEyeConfig} MalosEyeConfig
                     */
                    MalosEyeConfig.fromObject = function fromObject(object) {
                        if (object instanceof $root.matrix_io.malos.v1.maloseye.MalosEyeConfig)
                            return object;
                        var message = new $root.matrix_io.malos.v1.maloseye.MalosEyeConfig();
                        if (object.cameraConfig != null) {
                            if (typeof object.cameraConfig !== "object")
                                throw TypeError(".matrix_io.malos.v1.maloseye.MalosEyeConfig.cameraConfig: object expected");
                            message.cameraConfig = $root.matrix_io.malos.v1.maloseye.CameraConfig.fromObject(object.cameraConfig);
                        }
                        if (object.faceConfig != null) {
                            if (typeof object.faceConfig !== "object")
                                throw TypeError(".matrix_io.malos.v1.maloseye.MalosEyeConfig.faceConfig: object expected");
                            message.faceConfig = $root.matrix_io.malos.v1.maloseye.FaceConfig.fromObject(object.faceConfig);
                        }
                        if (object.detectionServerConfig != null) {
                            if (typeof object.detectionServerConfig !== "object")
                                throw TypeError(".matrix_io.malos.v1.maloseye.MalosEyeConfig.detectionServerConfig: object expected");
                            message.detectionServerConfig = $root.matrix_io.malos.v1.maloseye.DetectionServerConfig.fromObject(object.detectionServerConfig);
                        }
                        if (object.objectToDetect) {
                            if (!Array.isArray(object.objectToDetect))
                                throw TypeError(".matrix_io.malos.v1.maloseye.MalosEyeConfig.objectToDetect: array expected");
                            message.objectToDetect = [];
                            for (var i = 0; i < object.objectToDetect.length; ++i)
                                switch (object.objectToDetect[i]) {
                                default:
                                case "MALOS_DETECTION_TYPE_NOT_DEFINED":
                                case 0:
                                    message.objectToDetect[i] = 0;
                                    break;
                                case "STOP":
                                case 1:
                                    message.objectToDetect[i] = 1;
                                    break;
                                case "FACE":
                                case 20:
                                    message.objectToDetect[i] = 20;
                                    break;
                                case "FACE_DEMOGRAPHICS":
                                case 21:
                                    message.objectToDetect[i] = 21;
                                    break;
                                case "FACE_DESCRIPTOR":
                                case 30:
                                    message.objectToDetect[i] = 30;
                                    break;
                                case "HAND_THUMB_UP":
                                case 40:
                                    message.objectToDetect[i] = 40;
                                    break;
                                case "HAND_PALM":
                                case 41:
                                    message.objectToDetect[i] = 41;
                                    break;
                                case "HAND_PINCH":
                                case 42:
                                    message.objectToDetect[i] = 42;
                                    break;
                                case "HAND_FIST":
                                case 43:
                                    message.objectToDetect[i] = 43;
                                    break;
                                }
                        }
                        switch (object.action) {
                        case "MALOS_ACTION_NOT_DEFINED":
                        case 0:
                            message.action = 0;
                            break;
                        case "START_DETECTION":
                        case 1:
                            message.action = 1;
                            break;
                        case "STOP_DETECTION":
                        case 2:
                            message.action = 2;
                            break;
                        case "RESTART_DETECTION":
                        case 3:
                            message.action = 3;
                            break;
                        case "CAPTURE_PREVIEW":
                        case 4:
                            message.action = 4;
                            break;
                        }
                        if (object.models) {
                            if (!Array.isArray(object.models))
                                throw TypeError(".matrix_io.malos.v1.maloseye.MalosEyeConfig.models: array expected");
                            message.models = [];
                            for (var i = 0; i < object.models.length; ++i) {
                                if (typeof object.models[i] !== "object")
                                    throw TypeError(".matrix_io.malos.v1.maloseye.MalosEyeConfig.models: object expected");
                                message.models[i] = $root.matrix_io.common.Entity.fromObject(object.models[i]);
                            }
                        }
                        if (object.config != null) {
                            if (typeof object.config !== "object")
                                throw TypeError(".matrix_io.malos.v1.maloseye.MalosEyeConfig.config: object expected");
                            message.config = $root.matrix_io.common.Entity.fromObject(object.config);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a MalosEyeConfig message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof matrix_io.malos.v1.maloseye.MalosEyeConfig
                     * @static
                     * @param {matrix_io.malos.v1.maloseye.MalosEyeConfig} message MalosEyeConfig
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MalosEyeConfig.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults) {
                            object.models = [];
                            object.objectToDetect = [];
                        }
                        if (options.defaults) {
                            object.cameraConfig = null;
                            object.faceConfig = null;
                            object.detectionServerConfig = null;
                            object.action = options.enums === String ? "MALOS_ACTION_NOT_DEFINED" : 0;
                            object.config = null;
                        }
                        if (message.cameraConfig != null && message.hasOwnProperty("cameraConfig"))
                            object.cameraConfig = $root.matrix_io.malos.v1.maloseye.CameraConfig.toObject(message.cameraConfig, options);
                        if (message.faceConfig != null && message.hasOwnProperty("faceConfig"))
                            object.faceConfig = $root.matrix_io.malos.v1.maloseye.FaceConfig.toObject(message.faceConfig, options);
                        if (message.detectionServerConfig != null && message.hasOwnProperty("detectionServerConfig"))
                            object.detectionServerConfig = $root.matrix_io.malos.v1.maloseye.DetectionServerConfig.toObject(message.detectionServerConfig, options);
                        if (message.action != null && message.hasOwnProperty("action"))
                            object.action = options.enums === String ? $root.matrix_io.malos.v1.maloseye.EnumMalosAction[message.action] : message.action;
                        if (message.models && message.models.length) {
                            object.models = [];
                            for (var j = 0; j < message.models.length; ++j)
                                object.models[j] = $root.matrix_io.common.Entity.toObject(message.models[j], options);
                        }
                        if (message.config != null && message.hasOwnProperty("config"))
                            object.config = $root.matrix_io.common.Entity.toObject(message.config, options);
                        if (message.objectToDetect && message.objectToDetect.length) {
                            object.objectToDetect = [];
                            for (var j = 0; j < message.objectToDetect.length; ++j)
                                object.objectToDetect[j] = options.enums === String ? $root.matrix_io.malos.v1.maloseye.EnumMalosEyeDetectionType[message.objectToDetect[j]] : message.objectToDetect[j];
                        }
                        return object;
                    };

                    /**
                     * Converts this MalosEyeConfig to JSON.
                     * @function toJSON
                     * @memberof matrix_io.malos.v1.maloseye.MalosEyeConfig
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MalosEyeConfig.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MalosEyeConfig;
                })();

                maloseye.CameraConfig = (function() {

                    /**
                     * Properties of a CameraConfig.
                     * @memberof matrix_io.malos.v1.maloseye
                     * @interface ICameraConfig
                     * @property {string|null} [source] CameraConfig source
                     * @property {number|null} [cameraId] CameraConfig cameraId
                     * @property {number|null} [width] CameraConfig width
                     * @property {number|null} [height] CameraConfig height
                     */

                    /**
                     * Constructs a new CameraConfig.
                     * @memberof matrix_io.malos.v1.maloseye
                     * @classdesc Represents a CameraConfig.
                     * @implements ICameraConfig
                     * @constructor
                     * @param {matrix_io.malos.v1.maloseye.ICameraConfig=} [properties] Properties to set
                     */
                    function CameraConfig(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * CameraConfig source.
                     * @member {string} source
                     * @memberof matrix_io.malos.v1.maloseye.CameraConfig
                     * @instance
                     */
                    CameraConfig.prototype.source = "";

                    /**
                     * CameraConfig cameraId.
                     * @member {number} cameraId
                     * @memberof matrix_io.malos.v1.maloseye.CameraConfig
                     * @instance
                     */
                    CameraConfig.prototype.cameraId = 0;

                    /**
                     * CameraConfig width.
                     * @member {number} width
                     * @memberof matrix_io.malos.v1.maloseye.CameraConfig
                     * @instance
                     */
                    CameraConfig.prototype.width = 0;

                    /**
                     * CameraConfig height.
                     * @member {number} height
                     * @memberof matrix_io.malos.v1.maloseye.CameraConfig
                     * @instance
                     */
                    CameraConfig.prototype.height = 0;

                    /**
                     * Creates a new CameraConfig instance using the specified properties.
                     * @function create
                     * @memberof matrix_io.malos.v1.maloseye.CameraConfig
                     * @static
                     * @param {matrix_io.malos.v1.maloseye.ICameraConfig=} [properties] Properties to set
                     * @returns {matrix_io.malos.v1.maloseye.CameraConfig} CameraConfig instance
                     */
                    CameraConfig.create = function create(properties) {
                        return new CameraConfig(properties);
                    };

                    /**
                     * Encodes the specified CameraConfig message. Does not implicitly {@link matrix_io.malos.v1.maloseye.CameraConfig.verify|verify} messages.
                     * @function encode
                     * @memberof matrix_io.malos.v1.maloseye.CameraConfig
                     * @static
                     * @param {matrix_io.malos.v1.maloseye.ICameraConfig} message CameraConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CameraConfig.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.cameraId != null && message.hasOwnProperty("cameraId"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.cameraId);
                        if (message.width != null && message.hasOwnProperty("width"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.width);
                        if (message.height != null && message.hasOwnProperty("height"))
                            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.height);
                        if (message.source != null && message.hasOwnProperty("source"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.source);
                        return writer;
                    };

                    /**
                     * Encodes the specified CameraConfig message, length delimited. Does not implicitly {@link matrix_io.malos.v1.maloseye.CameraConfig.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof matrix_io.malos.v1.maloseye.CameraConfig
                     * @static
                     * @param {matrix_io.malos.v1.maloseye.ICameraConfig} message CameraConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CameraConfig.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a CameraConfig message from the specified reader or buffer.
                     * @function decode
                     * @memberof matrix_io.malos.v1.maloseye.CameraConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {matrix_io.malos.v1.maloseye.CameraConfig} CameraConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CameraConfig.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.malos.v1.maloseye.CameraConfig();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 4:
                                message.source = reader.string();
                                break;
                            case 1:
                                message.cameraId = reader.int32();
                                break;
                            case 2:
                                message.width = reader.int32();
                                break;
                            case 3:
                                message.height = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a CameraConfig message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof matrix_io.malos.v1.maloseye.CameraConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {matrix_io.malos.v1.maloseye.CameraConfig} CameraConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CameraConfig.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a CameraConfig message.
                     * @function verify
                     * @memberof matrix_io.malos.v1.maloseye.CameraConfig
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    CameraConfig.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.source != null && message.hasOwnProperty("source"))
                            if (!$util.isString(message.source))
                                return "source: string expected";
                        if (message.cameraId != null && message.hasOwnProperty("cameraId"))
                            if (!$util.isInteger(message.cameraId))
                                return "cameraId: integer expected";
                        if (message.width != null && message.hasOwnProperty("width"))
                            if (!$util.isInteger(message.width))
                                return "width: integer expected";
                        if (message.height != null && message.hasOwnProperty("height"))
                            if (!$util.isInteger(message.height))
                                return "height: integer expected";
                        return null;
                    };

                    /**
                     * Creates a CameraConfig message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof matrix_io.malos.v1.maloseye.CameraConfig
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {matrix_io.malos.v1.maloseye.CameraConfig} CameraConfig
                     */
                    CameraConfig.fromObject = function fromObject(object) {
                        if (object instanceof $root.matrix_io.malos.v1.maloseye.CameraConfig)
                            return object;
                        var message = new $root.matrix_io.malos.v1.maloseye.CameraConfig();
                        if (object.source != null)
                            message.source = String(object.source);
                        if (object.cameraId != null)
                            message.cameraId = object.cameraId | 0;
                        if (object.width != null)
                            message.width = object.width | 0;
                        if (object.height != null)
                            message.height = object.height | 0;
                        return message;
                    };

                    /**
                     * Creates a plain object from a CameraConfig message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof matrix_io.malos.v1.maloseye.CameraConfig
                     * @static
                     * @param {matrix_io.malos.v1.maloseye.CameraConfig} message CameraConfig
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    CameraConfig.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.cameraId = 0;
                            object.width = 0;
                            object.height = 0;
                            object.source = "";
                        }
                        if (message.cameraId != null && message.hasOwnProperty("cameraId"))
                            object.cameraId = message.cameraId;
                        if (message.width != null && message.hasOwnProperty("width"))
                            object.width = message.width;
                        if (message.height != null && message.hasOwnProperty("height"))
                            object.height = message.height;
                        if (message.source != null && message.hasOwnProperty("source"))
                            object.source = message.source;
                        return object;
                    };

                    /**
                     * Converts this CameraConfig to JSON.
                     * @function toJSON
                     * @memberof matrix_io.malos.v1.maloseye.CameraConfig
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    CameraConfig.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return CameraConfig;
                })();

                maloseye.DetectionServerConfig = (function() {

                    /**
                     * Properties of a DetectionServerConfig.
                     * @memberof matrix_io.malos.v1.maloseye
                     * @interface IDetectionServerConfig
                     * @property {string|null} [detectionServerAddress] DetectionServerConfig detectionServerAddress
                     * @property {number|null} [detectionServerTimeout] DetectionServerConfig detectionServerTimeout
                     */

                    /**
                     * Constructs a new DetectionServerConfig.
                     * @memberof matrix_io.malos.v1.maloseye
                     * @classdesc Represents a DetectionServerConfig.
                     * @implements IDetectionServerConfig
                     * @constructor
                     * @param {matrix_io.malos.v1.maloseye.IDetectionServerConfig=} [properties] Properties to set
                     */
                    function DetectionServerConfig(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * DetectionServerConfig detectionServerAddress.
                     * @member {string} detectionServerAddress
                     * @memberof matrix_io.malos.v1.maloseye.DetectionServerConfig
                     * @instance
                     */
                    DetectionServerConfig.prototype.detectionServerAddress = "";

                    /**
                     * DetectionServerConfig detectionServerTimeout.
                     * @member {number} detectionServerTimeout
                     * @memberof matrix_io.malos.v1.maloseye.DetectionServerConfig
                     * @instance
                     */
                    DetectionServerConfig.prototype.detectionServerTimeout = 0;

                    /**
                     * Creates a new DetectionServerConfig instance using the specified properties.
                     * @function create
                     * @memberof matrix_io.malos.v1.maloseye.DetectionServerConfig
                     * @static
                     * @param {matrix_io.malos.v1.maloseye.IDetectionServerConfig=} [properties] Properties to set
                     * @returns {matrix_io.malos.v1.maloseye.DetectionServerConfig} DetectionServerConfig instance
                     */
                    DetectionServerConfig.create = function create(properties) {
                        return new DetectionServerConfig(properties);
                    };

                    /**
                     * Encodes the specified DetectionServerConfig message. Does not implicitly {@link matrix_io.malos.v1.maloseye.DetectionServerConfig.verify|verify} messages.
                     * @function encode
                     * @memberof matrix_io.malos.v1.maloseye.DetectionServerConfig
                     * @static
                     * @param {matrix_io.malos.v1.maloseye.IDetectionServerConfig} message DetectionServerConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DetectionServerConfig.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.detectionServerAddress != null && message.hasOwnProperty("detectionServerAddress"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.detectionServerAddress);
                        if (message.detectionServerTimeout != null && message.hasOwnProperty("detectionServerTimeout"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.detectionServerTimeout);
                        return writer;
                    };

                    /**
                     * Encodes the specified DetectionServerConfig message, length delimited. Does not implicitly {@link matrix_io.malos.v1.maloseye.DetectionServerConfig.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof matrix_io.malos.v1.maloseye.DetectionServerConfig
                     * @static
                     * @param {matrix_io.malos.v1.maloseye.IDetectionServerConfig} message DetectionServerConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DetectionServerConfig.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a DetectionServerConfig message from the specified reader or buffer.
                     * @function decode
                     * @memberof matrix_io.malos.v1.maloseye.DetectionServerConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {matrix_io.malos.v1.maloseye.DetectionServerConfig} DetectionServerConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DetectionServerConfig.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.malos.v1.maloseye.DetectionServerConfig();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.detectionServerAddress = reader.string();
                                break;
                            case 2:
                                message.detectionServerTimeout = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a DetectionServerConfig message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof matrix_io.malos.v1.maloseye.DetectionServerConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {matrix_io.malos.v1.maloseye.DetectionServerConfig} DetectionServerConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DetectionServerConfig.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a DetectionServerConfig message.
                     * @function verify
                     * @memberof matrix_io.malos.v1.maloseye.DetectionServerConfig
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    DetectionServerConfig.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.detectionServerAddress != null && message.hasOwnProperty("detectionServerAddress"))
                            if (!$util.isString(message.detectionServerAddress))
                                return "detectionServerAddress: string expected";
                        if (message.detectionServerTimeout != null && message.hasOwnProperty("detectionServerTimeout"))
                            if (!$util.isInteger(message.detectionServerTimeout))
                                return "detectionServerTimeout: integer expected";
                        return null;
                    };

                    /**
                     * Creates a DetectionServerConfig message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof matrix_io.malos.v1.maloseye.DetectionServerConfig
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {matrix_io.malos.v1.maloseye.DetectionServerConfig} DetectionServerConfig
                     */
                    DetectionServerConfig.fromObject = function fromObject(object) {
                        if (object instanceof $root.matrix_io.malos.v1.maloseye.DetectionServerConfig)
                            return object;
                        var message = new $root.matrix_io.malos.v1.maloseye.DetectionServerConfig();
                        if (object.detectionServerAddress != null)
                            message.detectionServerAddress = String(object.detectionServerAddress);
                        if (object.detectionServerTimeout != null)
                            message.detectionServerTimeout = object.detectionServerTimeout | 0;
                        return message;
                    };

                    /**
                     * Creates a plain object from a DetectionServerConfig message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof matrix_io.malos.v1.maloseye.DetectionServerConfig
                     * @static
                     * @param {matrix_io.malos.v1.maloseye.DetectionServerConfig} message DetectionServerConfig
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    DetectionServerConfig.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.detectionServerAddress = "";
                            object.detectionServerTimeout = 0;
                        }
                        if (message.detectionServerAddress != null && message.hasOwnProperty("detectionServerAddress"))
                            object.detectionServerAddress = message.detectionServerAddress;
                        if (message.detectionServerTimeout != null && message.hasOwnProperty("detectionServerTimeout"))
                            object.detectionServerTimeout = message.detectionServerTimeout;
                        return object;
                    };

                    /**
                     * Converts this DetectionServerConfig to JSON.
                     * @function toJSON
                     * @memberof matrix_io.malos.v1.maloseye.DetectionServerConfig
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    DetectionServerConfig.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return DetectionServerConfig;
                })();

                maloseye.FaceConfig = (function() {

                    /**
                     * Properties of a FaceConfig.
                     * @memberof matrix_io.malos.v1.maloseye
                     * @interface IFaceConfig
                     * @property {string|null} [modelsPath] FaceConfig modelsPath
                     * @property {boolean|null} [sendSlow] FaceConfig sendSlow
                     * @property {boolean|null} [sendTextProto] FaceConfig sendTextProto
                     */

                    /**
                     * Constructs a new FaceConfig.
                     * @memberof matrix_io.malos.v1.maloseye
                     * @classdesc Represents a FaceConfig.
                     * @implements IFaceConfig
                     * @constructor
                     * @param {matrix_io.malos.v1.maloseye.IFaceConfig=} [properties] Properties to set
                     */
                    function FaceConfig(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * FaceConfig modelsPath.
                     * @member {string} modelsPath
                     * @memberof matrix_io.malos.v1.maloseye.FaceConfig
                     * @instance
                     */
                    FaceConfig.prototype.modelsPath = "";

                    /**
                     * FaceConfig sendSlow.
                     * @member {boolean} sendSlow
                     * @memberof matrix_io.malos.v1.maloseye.FaceConfig
                     * @instance
                     */
                    FaceConfig.prototype.sendSlow = false;

                    /**
                     * FaceConfig sendTextProto.
                     * @member {boolean} sendTextProto
                     * @memberof matrix_io.malos.v1.maloseye.FaceConfig
                     * @instance
                     */
                    FaceConfig.prototype.sendTextProto = false;

                    /**
                     * Creates a new FaceConfig instance using the specified properties.
                     * @function create
                     * @memberof matrix_io.malos.v1.maloseye.FaceConfig
                     * @static
                     * @param {matrix_io.malos.v1.maloseye.IFaceConfig=} [properties] Properties to set
                     * @returns {matrix_io.malos.v1.maloseye.FaceConfig} FaceConfig instance
                     */
                    FaceConfig.create = function create(properties) {
                        return new FaceConfig(properties);
                    };

                    /**
                     * Encodes the specified FaceConfig message. Does not implicitly {@link matrix_io.malos.v1.maloseye.FaceConfig.verify|verify} messages.
                     * @function encode
                     * @memberof matrix_io.malos.v1.maloseye.FaceConfig
                     * @static
                     * @param {matrix_io.malos.v1.maloseye.IFaceConfig} message FaceConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    FaceConfig.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.modelsPath != null && message.hasOwnProperty("modelsPath"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.modelsPath);
                        if (message.sendSlow != null && message.hasOwnProperty("sendSlow"))
                            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.sendSlow);
                        if (message.sendTextProto != null && message.hasOwnProperty("sendTextProto"))
                            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.sendTextProto);
                        return writer;
                    };

                    /**
                     * Encodes the specified FaceConfig message, length delimited. Does not implicitly {@link matrix_io.malos.v1.maloseye.FaceConfig.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof matrix_io.malos.v1.maloseye.FaceConfig
                     * @static
                     * @param {matrix_io.malos.v1.maloseye.IFaceConfig} message FaceConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    FaceConfig.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a FaceConfig message from the specified reader or buffer.
                     * @function decode
                     * @memberof matrix_io.malos.v1.maloseye.FaceConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {matrix_io.malos.v1.maloseye.FaceConfig} FaceConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    FaceConfig.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.malos.v1.maloseye.FaceConfig();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.modelsPath = reader.string();
                                break;
                            case 2:
                                message.sendSlow = reader.bool();
                                break;
                            case 3:
                                message.sendTextProto = reader.bool();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a FaceConfig message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof matrix_io.malos.v1.maloseye.FaceConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {matrix_io.malos.v1.maloseye.FaceConfig} FaceConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    FaceConfig.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a FaceConfig message.
                     * @function verify
                     * @memberof matrix_io.malos.v1.maloseye.FaceConfig
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    FaceConfig.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.modelsPath != null && message.hasOwnProperty("modelsPath"))
                            if (!$util.isString(message.modelsPath))
                                return "modelsPath: string expected";
                        if (message.sendSlow != null && message.hasOwnProperty("sendSlow"))
                            if (typeof message.sendSlow !== "boolean")
                                return "sendSlow: boolean expected";
                        if (message.sendTextProto != null && message.hasOwnProperty("sendTextProto"))
                            if (typeof message.sendTextProto !== "boolean")
                                return "sendTextProto: boolean expected";
                        return null;
                    };

                    /**
                     * Creates a FaceConfig message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof matrix_io.malos.v1.maloseye.FaceConfig
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {matrix_io.malos.v1.maloseye.FaceConfig} FaceConfig
                     */
                    FaceConfig.fromObject = function fromObject(object) {
                        if (object instanceof $root.matrix_io.malos.v1.maloseye.FaceConfig)
                            return object;
                        var message = new $root.matrix_io.malos.v1.maloseye.FaceConfig();
                        if (object.modelsPath != null)
                            message.modelsPath = String(object.modelsPath);
                        if (object.sendSlow != null)
                            message.sendSlow = Boolean(object.sendSlow);
                        if (object.sendTextProto != null)
                            message.sendTextProto = Boolean(object.sendTextProto);
                        return message;
                    };

                    /**
                     * Creates a plain object from a FaceConfig message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof matrix_io.malos.v1.maloseye.FaceConfig
                     * @static
                     * @param {matrix_io.malos.v1.maloseye.FaceConfig} message FaceConfig
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    FaceConfig.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.modelsPath = "";
                            object.sendSlow = false;
                            object.sendTextProto = false;
                        }
                        if (message.modelsPath != null && message.hasOwnProperty("modelsPath"))
                            object.modelsPath = message.modelsPath;
                        if (message.sendSlow != null && message.hasOwnProperty("sendSlow"))
                            object.sendSlow = message.sendSlow;
                        if (message.sendTextProto != null && message.hasOwnProperty("sendTextProto"))
                            object.sendTextProto = message.sendTextProto;
                        return object;
                    };

                    /**
                     * Converts this FaceConfig to JSON.
                     * @function toJSON
                     * @memberof matrix_io.malos.v1.maloseye.FaceConfig
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    FaceConfig.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return FaceConfig;
                })();

                /**
                 * EnumMalosAction enum.
                 * @name matrix_io.malos.v1.maloseye.EnumMalosAction
                 * @enum {string}
                 * @property {number} MALOS_ACTION_NOT_DEFINED=0 MALOS_ACTION_NOT_DEFINED value
                 * @property {number} START_DETECTION=1 START_DETECTION value
                 * @property {number} STOP_DETECTION=2 STOP_DETECTION value
                 * @property {number} RESTART_DETECTION=3 RESTART_DETECTION value
                 * @property {number} CAPTURE_PREVIEW=4 CAPTURE_PREVIEW value
                 */
                maloseye.EnumMalosAction = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "MALOS_ACTION_NOT_DEFINED"] = 0;
                    values[valuesById[1] = "START_DETECTION"] = 1;
                    values[valuesById[2] = "STOP_DETECTION"] = 2;
                    values[valuesById[3] = "RESTART_DETECTION"] = 3;
                    values[valuesById[4] = "CAPTURE_PREVIEW"] = 4;
                    return values;
                })();

                /**
                 * EnumMalosEyeDetectionType enum.
                 * @name matrix_io.malos.v1.maloseye.EnumMalosEyeDetectionType
                 * @enum {string}
                 * @property {number} MALOS_DETECTION_TYPE_NOT_DEFINED=0 MALOS_DETECTION_TYPE_NOT_DEFINED value
                 * @property {number} STOP=1 STOP value
                 * @property {number} FACE=20 FACE value
                 * @property {number} FACE_DEMOGRAPHICS=21 FACE_DEMOGRAPHICS value
                 * @property {number} FACE_DESCRIPTOR=30 FACE_DESCRIPTOR value
                 * @property {number} HAND_THUMB_UP=40 HAND_THUMB_UP value
                 * @property {number} HAND_PALM=41 HAND_PALM value
                 * @property {number} HAND_PINCH=42 HAND_PINCH value
                 * @property {number} HAND_FIST=43 HAND_FIST value
                 */
                maloseye.EnumMalosEyeDetectionType = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "MALOS_DETECTION_TYPE_NOT_DEFINED"] = 0;
                    values[valuesById[1] = "STOP"] = 1;
                    values[valuesById[20] = "FACE"] = 20;
                    values[valuesById[21] = "FACE_DEMOGRAPHICS"] = 21;
                    values[valuesById[30] = "FACE_DESCRIPTOR"] = 30;
                    values[valuesById[40] = "HAND_THUMB_UP"] = 40;
                    values[valuesById[41] = "HAND_PALM"] = 41;
                    values[valuesById[42] = "HAND_PINCH"] = 42;
                    values[valuesById[43] = "HAND_FIST"] = 43;
                    return values;
                })();

                return maloseye;
            })();

            v1.driver = (function() {

                /**
                 * Namespace driver.
                 * @memberof matrix_io.malos.v1
                 * @namespace
                 */
                var driver = {};

                driver.DriverConfig = (function() {

                    /**
                     * Properties of a DriverConfig.
                     * @memberof matrix_io.malos.v1.driver
                     * @interface IDriverConfig
                     * @property {number|null} [delayBetweenUpdates] DriverConfig delayBetweenUpdates
                     * @property {number|null} [timeoutAfterLastPing] DriverConfig timeoutAfterLastPing
                     * @property {matrix_io.malos.v1.io.IEverloopImage|null} [image] DriverConfig image
                     * @property {matrix_io.malos.v1.maloseye.IMalosEyeConfig|null} [malosEyeConfig] DriverConfig malosEyeConfig
                     * @property {matrix_io.malos.v1.comm.IZigBeeMsg|null} [zigbeeMessage] DriverConfig zigbeeMessage
                     * @property {matrix_io.malos.v1.comm.ILircParams|null} [lirc] DriverConfig lirc
                     * @property {matrix_io.malos.v1.io.IServoParams|null} [servo] DriverConfig servo
                     * @property {matrix_io.malos.v1.io.IGpioParams|null} [gpio] DriverConfig gpio
                     * @property {matrix_io.malos.v1.sense.IHumidityParams|null} [humidity] DriverConfig humidity
                     * @property {matrix_io.malos.v1.io.IMicArrayParams|null} [micarray] DriverConfig micarray
                     * @property {matrix_io.malos.v1.comm.IZWaveMsg|null} [zwave] DriverConfig zwave
                     * @property {matrix_io.malos.v1.io.IWakeWordParams|null} [wakeword] DriverConfig wakeword
                     * @property {matrix_io.malos.v1.io.IMatrixDeviceParams|null} [matrixDevice] DriverConfig matrixDevice
                     * @property {string|null} [uuid] DriverConfig uuid
                     */

                    /**
                     * Constructs a new DriverConfig.
                     * @memberof matrix_io.malos.v1.driver
                     * @classdesc Represents a DriverConfig.
                     * @implements IDriverConfig
                     * @constructor
                     * @param {matrix_io.malos.v1.driver.IDriverConfig=} [properties] Properties to set
                     */
                    function DriverConfig(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * DriverConfig delayBetweenUpdates.
                     * @member {number} delayBetweenUpdates
                     * @memberof matrix_io.malos.v1.driver.DriverConfig
                     * @instance
                     */
                    DriverConfig.prototype.delayBetweenUpdates = 0;

                    /**
                     * DriverConfig timeoutAfterLastPing.
                     * @member {number} timeoutAfterLastPing
                     * @memberof matrix_io.malos.v1.driver.DriverConfig
                     * @instance
                     */
                    DriverConfig.prototype.timeoutAfterLastPing = 0;

                    /**
                     * DriverConfig image.
                     * @member {matrix_io.malos.v1.io.IEverloopImage|null|undefined} image
                     * @memberof matrix_io.malos.v1.driver.DriverConfig
                     * @instance
                     */
                    DriverConfig.prototype.image = null;

                    /**
                     * DriverConfig malosEyeConfig.
                     * @member {matrix_io.malos.v1.maloseye.IMalosEyeConfig|null|undefined} malosEyeConfig
                     * @memberof matrix_io.malos.v1.driver.DriverConfig
                     * @instance
                     */
                    DriverConfig.prototype.malosEyeConfig = null;

                    /**
                     * DriverConfig zigbeeMessage.
                     * @member {matrix_io.malos.v1.comm.IZigBeeMsg|null|undefined} zigbeeMessage
                     * @memberof matrix_io.malos.v1.driver.DriverConfig
                     * @instance
                     */
                    DriverConfig.prototype.zigbeeMessage = null;

                    /**
                     * DriverConfig lirc.
                     * @member {matrix_io.malos.v1.comm.ILircParams|null|undefined} lirc
                     * @memberof matrix_io.malos.v1.driver.DriverConfig
                     * @instance
                     */
                    DriverConfig.prototype.lirc = null;

                    /**
                     * DriverConfig servo.
                     * @member {matrix_io.malos.v1.io.IServoParams|null|undefined} servo
                     * @memberof matrix_io.malos.v1.driver.DriverConfig
                     * @instance
                     */
                    DriverConfig.prototype.servo = null;

                    /**
                     * DriverConfig gpio.
                     * @member {matrix_io.malos.v1.io.IGpioParams|null|undefined} gpio
                     * @memberof matrix_io.malos.v1.driver.DriverConfig
                     * @instance
                     */
                    DriverConfig.prototype.gpio = null;

                    /**
                     * DriverConfig humidity.
                     * @member {matrix_io.malos.v1.sense.IHumidityParams|null|undefined} humidity
                     * @memberof matrix_io.malos.v1.driver.DriverConfig
                     * @instance
                     */
                    DriverConfig.prototype.humidity = null;

                    /**
                     * DriverConfig micarray.
                     * @member {matrix_io.malos.v1.io.IMicArrayParams|null|undefined} micarray
                     * @memberof matrix_io.malos.v1.driver.DriverConfig
                     * @instance
                     */
                    DriverConfig.prototype.micarray = null;

                    /**
                     * DriverConfig zwave.
                     * @member {matrix_io.malos.v1.comm.IZWaveMsg|null|undefined} zwave
                     * @memberof matrix_io.malos.v1.driver.DriverConfig
                     * @instance
                     */
                    DriverConfig.prototype.zwave = null;

                    /**
                     * DriverConfig wakeword.
                     * @member {matrix_io.malos.v1.io.IWakeWordParams|null|undefined} wakeword
                     * @memberof matrix_io.malos.v1.driver.DriverConfig
                     * @instance
                     */
                    DriverConfig.prototype.wakeword = null;

                    /**
                     * DriverConfig matrixDevice.
                     * @member {matrix_io.malos.v1.io.IMatrixDeviceParams|null|undefined} matrixDevice
                     * @memberof matrix_io.malos.v1.driver.DriverConfig
                     * @instance
                     */
                    DriverConfig.prototype.matrixDevice = null;

                    /**
                     * DriverConfig uuid.
                     * @member {string} uuid
                     * @memberof matrix_io.malos.v1.driver.DriverConfig
                     * @instance
                     */
                    DriverConfig.prototype.uuid = "";

                    /**
                     * Creates a new DriverConfig instance using the specified properties.
                     * @function create
                     * @memberof matrix_io.malos.v1.driver.DriverConfig
                     * @static
                     * @param {matrix_io.malos.v1.driver.IDriverConfig=} [properties] Properties to set
                     * @returns {matrix_io.malos.v1.driver.DriverConfig} DriverConfig instance
                     */
                    DriverConfig.create = function create(properties) {
                        return new DriverConfig(properties);
                    };

                    /**
                     * Encodes the specified DriverConfig message. Does not implicitly {@link matrix_io.malos.v1.driver.DriverConfig.verify|verify} messages.
                     * @function encode
                     * @memberof matrix_io.malos.v1.driver.DriverConfig
                     * @static
                     * @param {matrix_io.malos.v1.driver.IDriverConfig} message DriverConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DriverConfig.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.delayBetweenUpdates != null && message.hasOwnProperty("delayBetweenUpdates"))
                            writer.uint32(/* id 1, wireType 5 =*/13).float(message.delayBetweenUpdates);
                        if (message.timeoutAfterLastPing != null && message.hasOwnProperty("timeoutAfterLastPing"))
                            writer.uint32(/* id 2, wireType 5 =*/21).float(message.timeoutAfterLastPing);
                        if (message.image != null && message.hasOwnProperty("image"))
                            $root.matrix_io.malos.v1.io.EverloopImage.encode(message.image, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.malosEyeConfig != null && message.hasOwnProperty("malosEyeConfig"))
                            $root.matrix_io.malos.v1.maloseye.MalosEyeConfig.encode(message.malosEyeConfig, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        if (message.zigbeeMessage != null && message.hasOwnProperty("zigbeeMessage"))
                            $root.matrix_io.malos.v1.comm.ZigBeeMsg.encode(message.zigbeeMessage, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                        if (message.lirc != null && message.hasOwnProperty("lirc"))
                            $root.matrix_io.malos.v1.comm.LircParams.encode(message.lirc, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                        if (message.servo != null && message.hasOwnProperty("servo"))
                            $root.matrix_io.malos.v1.io.ServoParams.encode(message.servo, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                        if (message.gpio != null && message.hasOwnProperty("gpio"))
                            $root.matrix_io.malos.v1.io.GpioParams.encode(message.gpio, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                        if (message.humidity != null && message.hasOwnProperty("humidity"))
                            $root.matrix_io.malos.v1.sense.HumidityParams.encode(message.humidity, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                        if (message.micarray != null && message.hasOwnProperty("micarray"))
                            $root.matrix_io.malos.v1.io.MicArrayParams.encode(message.micarray, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                        if (message.zwave != null && message.hasOwnProperty("zwave"))
                            $root.matrix_io.malos.v1.comm.ZWaveMsg.encode(message.zwave, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                        if (message.wakeword != null && message.hasOwnProperty("wakeword"))
                            $root.matrix_io.malos.v1.io.WakeWordParams.encode(message.wakeword, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
                        if (message.matrixDevice != null && message.hasOwnProperty("matrixDevice"))
                            $root.matrix_io.malos.v1.io.MatrixDeviceParams.encode(message.matrixDevice, writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
                        if (message.uuid != null && message.hasOwnProperty("uuid"))
                            writer.uint32(/* id 14, wireType 2 =*/114).string(message.uuid);
                        return writer;
                    };

                    /**
                     * Encodes the specified DriverConfig message, length delimited. Does not implicitly {@link matrix_io.malos.v1.driver.DriverConfig.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof matrix_io.malos.v1.driver.DriverConfig
                     * @static
                     * @param {matrix_io.malos.v1.driver.IDriverConfig} message DriverConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DriverConfig.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a DriverConfig message from the specified reader or buffer.
                     * @function decode
                     * @memberof matrix_io.malos.v1.driver.DriverConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {matrix_io.malos.v1.driver.DriverConfig} DriverConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DriverConfig.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.malos.v1.driver.DriverConfig();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.delayBetweenUpdates = reader.float();
                                break;
                            case 2:
                                message.timeoutAfterLastPing = reader.float();
                                break;
                            case 3:
                                message.image = $root.matrix_io.malos.v1.io.EverloopImage.decode(reader, reader.uint32());
                                break;
                            case 4:
                                message.malosEyeConfig = $root.matrix_io.malos.v1.maloseye.MalosEyeConfig.decode(reader, reader.uint32());
                                break;
                            case 5:
                                message.zigbeeMessage = $root.matrix_io.malos.v1.comm.ZigBeeMsg.decode(reader, reader.uint32());
                                break;
                            case 6:
                                message.lirc = $root.matrix_io.malos.v1.comm.LircParams.decode(reader, reader.uint32());
                                break;
                            case 7:
                                message.servo = $root.matrix_io.malos.v1.io.ServoParams.decode(reader, reader.uint32());
                                break;
                            case 8:
                                message.gpio = $root.matrix_io.malos.v1.io.GpioParams.decode(reader, reader.uint32());
                                break;
                            case 9:
                                message.humidity = $root.matrix_io.malos.v1.sense.HumidityParams.decode(reader, reader.uint32());
                                break;
                            case 10:
                                message.micarray = $root.matrix_io.malos.v1.io.MicArrayParams.decode(reader, reader.uint32());
                                break;
                            case 11:
                                message.zwave = $root.matrix_io.malos.v1.comm.ZWaveMsg.decode(reader, reader.uint32());
                                break;
                            case 12:
                                message.wakeword = $root.matrix_io.malos.v1.io.WakeWordParams.decode(reader, reader.uint32());
                                break;
                            case 13:
                                message.matrixDevice = $root.matrix_io.malos.v1.io.MatrixDeviceParams.decode(reader, reader.uint32());
                                break;
                            case 14:
                                message.uuid = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a DriverConfig message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof matrix_io.malos.v1.driver.DriverConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {matrix_io.malos.v1.driver.DriverConfig} DriverConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DriverConfig.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a DriverConfig message.
                     * @function verify
                     * @memberof matrix_io.malos.v1.driver.DriverConfig
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    DriverConfig.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.delayBetweenUpdates != null && message.hasOwnProperty("delayBetweenUpdates"))
                            if (typeof message.delayBetweenUpdates !== "number")
                                return "delayBetweenUpdates: number expected";
                        if (message.timeoutAfterLastPing != null && message.hasOwnProperty("timeoutAfterLastPing"))
                            if (typeof message.timeoutAfterLastPing !== "number")
                                return "timeoutAfterLastPing: number expected";
                        if (message.image != null && message.hasOwnProperty("image")) {
                            var error = $root.matrix_io.malos.v1.io.EverloopImage.verify(message.image);
                            if (error)
                                return "image." + error;
                        }
                        if (message.malosEyeConfig != null && message.hasOwnProperty("malosEyeConfig")) {
                            var error = $root.matrix_io.malos.v1.maloseye.MalosEyeConfig.verify(message.malosEyeConfig);
                            if (error)
                                return "malosEyeConfig." + error;
                        }
                        if (message.zigbeeMessage != null && message.hasOwnProperty("zigbeeMessage")) {
                            var error = $root.matrix_io.malos.v1.comm.ZigBeeMsg.verify(message.zigbeeMessage);
                            if (error)
                                return "zigbeeMessage." + error;
                        }
                        if (message.lirc != null && message.hasOwnProperty("lirc")) {
                            var error = $root.matrix_io.malos.v1.comm.LircParams.verify(message.lirc);
                            if (error)
                                return "lirc." + error;
                        }
                        if (message.servo != null && message.hasOwnProperty("servo")) {
                            var error = $root.matrix_io.malos.v1.io.ServoParams.verify(message.servo);
                            if (error)
                                return "servo." + error;
                        }
                        if (message.gpio != null && message.hasOwnProperty("gpio")) {
                            var error = $root.matrix_io.malos.v1.io.GpioParams.verify(message.gpio);
                            if (error)
                                return "gpio." + error;
                        }
                        if (message.humidity != null && message.hasOwnProperty("humidity")) {
                            var error = $root.matrix_io.malos.v1.sense.HumidityParams.verify(message.humidity);
                            if (error)
                                return "humidity." + error;
                        }
                        if (message.micarray != null && message.hasOwnProperty("micarray")) {
                            var error = $root.matrix_io.malos.v1.io.MicArrayParams.verify(message.micarray);
                            if (error)
                                return "micarray." + error;
                        }
                        if (message.zwave != null && message.hasOwnProperty("zwave")) {
                            var error = $root.matrix_io.malos.v1.comm.ZWaveMsg.verify(message.zwave);
                            if (error)
                                return "zwave." + error;
                        }
                        if (message.wakeword != null && message.hasOwnProperty("wakeword")) {
                            var error = $root.matrix_io.malos.v1.io.WakeWordParams.verify(message.wakeword);
                            if (error)
                                return "wakeword." + error;
                        }
                        if (message.matrixDevice != null && message.hasOwnProperty("matrixDevice")) {
                            var error = $root.matrix_io.malos.v1.io.MatrixDeviceParams.verify(message.matrixDevice);
                            if (error)
                                return "matrixDevice." + error;
                        }
                        if (message.uuid != null && message.hasOwnProperty("uuid"))
                            if (!$util.isString(message.uuid))
                                return "uuid: string expected";
                        return null;
                    };

                    /**
                     * Creates a DriverConfig message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof matrix_io.malos.v1.driver.DriverConfig
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {matrix_io.malos.v1.driver.DriverConfig} DriverConfig
                     */
                    DriverConfig.fromObject = function fromObject(object) {
                        if (object instanceof $root.matrix_io.malos.v1.driver.DriverConfig)
                            return object;
                        var message = new $root.matrix_io.malos.v1.driver.DriverConfig();
                        if (object.delayBetweenUpdates != null)
                            message.delayBetweenUpdates = Number(object.delayBetweenUpdates);
                        if (object.timeoutAfterLastPing != null)
                            message.timeoutAfterLastPing = Number(object.timeoutAfterLastPing);
                        if (object.image != null) {
                            if (typeof object.image !== "object")
                                throw TypeError(".matrix_io.malos.v1.driver.DriverConfig.image: object expected");
                            message.image = $root.matrix_io.malos.v1.io.EverloopImage.fromObject(object.image);
                        }
                        if (object.malosEyeConfig != null) {
                            if (typeof object.malosEyeConfig !== "object")
                                throw TypeError(".matrix_io.malos.v1.driver.DriverConfig.malosEyeConfig: object expected");
                            message.malosEyeConfig = $root.matrix_io.malos.v1.maloseye.MalosEyeConfig.fromObject(object.malosEyeConfig);
                        }
                        if (object.zigbeeMessage != null) {
                            if (typeof object.zigbeeMessage !== "object")
                                throw TypeError(".matrix_io.malos.v1.driver.DriverConfig.zigbeeMessage: object expected");
                            message.zigbeeMessage = $root.matrix_io.malos.v1.comm.ZigBeeMsg.fromObject(object.zigbeeMessage);
                        }
                        if (object.lirc != null) {
                            if (typeof object.lirc !== "object")
                                throw TypeError(".matrix_io.malos.v1.driver.DriverConfig.lirc: object expected");
                            message.lirc = $root.matrix_io.malos.v1.comm.LircParams.fromObject(object.lirc);
                        }
                        if (object.servo != null) {
                            if (typeof object.servo !== "object")
                                throw TypeError(".matrix_io.malos.v1.driver.DriverConfig.servo: object expected");
                            message.servo = $root.matrix_io.malos.v1.io.ServoParams.fromObject(object.servo);
                        }
                        if (object.gpio != null) {
                            if (typeof object.gpio !== "object")
                                throw TypeError(".matrix_io.malos.v1.driver.DriverConfig.gpio: object expected");
                            message.gpio = $root.matrix_io.malos.v1.io.GpioParams.fromObject(object.gpio);
                        }
                        if (object.humidity != null) {
                            if (typeof object.humidity !== "object")
                                throw TypeError(".matrix_io.malos.v1.driver.DriverConfig.humidity: object expected");
                            message.humidity = $root.matrix_io.malos.v1.sense.HumidityParams.fromObject(object.humidity);
                        }
                        if (object.micarray != null) {
                            if (typeof object.micarray !== "object")
                                throw TypeError(".matrix_io.malos.v1.driver.DriverConfig.micarray: object expected");
                            message.micarray = $root.matrix_io.malos.v1.io.MicArrayParams.fromObject(object.micarray);
                        }
                        if (object.zwave != null) {
                            if (typeof object.zwave !== "object")
                                throw TypeError(".matrix_io.malos.v1.driver.DriverConfig.zwave: object expected");
                            message.zwave = $root.matrix_io.malos.v1.comm.ZWaveMsg.fromObject(object.zwave);
                        }
                        if (object.wakeword != null) {
                            if (typeof object.wakeword !== "object")
                                throw TypeError(".matrix_io.malos.v1.driver.DriverConfig.wakeword: object expected");
                            message.wakeword = $root.matrix_io.malos.v1.io.WakeWordParams.fromObject(object.wakeword);
                        }
                        if (object.matrixDevice != null) {
                            if (typeof object.matrixDevice !== "object")
                                throw TypeError(".matrix_io.malos.v1.driver.DriverConfig.matrixDevice: object expected");
                            message.matrixDevice = $root.matrix_io.malos.v1.io.MatrixDeviceParams.fromObject(object.matrixDevice);
                        }
                        if (object.uuid != null)
                            message.uuid = String(object.uuid);
                        return message;
                    };

                    /**
                     * Creates a plain object from a DriverConfig message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof matrix_io.malos.v1.driver.DriverConfig
                     * @static
                     * @param {matrix_io.malos.v1.driver.DriverConfig} message DriverConfig
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    DriverConfig.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.delayBetweenUpdates = 0;
                            object.timeoutAfterLastPing = 0;
                            object.image = null;
                            object.malosEyeConfig = null;
                            object.zigbeeMessage = null;
                            object.lirc = null;
                            object.servo = null;
                            object.gpio = null;
                            object.humidity = null;
                            object.micarray = null;
                            object.zwave = null;
                            object.wakeword = null;
                            object.matrixDevice = null;
                            object.uuid = "";
                        }
                        if (message.delayBetweenUpdates != null && message.hasOwnProperty("delayBetweenUpdates"))
                            object.delayBetweenUpdates = options.json && !isFinite(message.delayBetweenUpdates) ? String(message.delayBetweenUpdates) : message.delayBetweenUpdates;
                        if (message.timeoutAfterLastPing != null && message.hasOwnProperty("timeoutAfterLastPing"))
                            object.timeoutAfterLastPing = options.json && !isFinite(message.timeoutAfterLastPing) ? String(message.timeoutAfterLastPing) : message.timeoutAfterLastPing;
                        if (message.image != null && message.hasOwnProperty("image"))
                            object.image = $root.matrix_io.malos.v1.io.EverloopImage.toObject(message.image, options);
                        if (message.malosEyeConfig != null && message.hasOwnProperty("malosEyeConfig"))
                            object.malosEyeConfig = $root.matrix_io.malos.v1.maloseye.MalosEyeConfig.toObject(message.malosEyeConfig, options);
                        if (message.zigbeeMessage != null && message.hasOwnProperty("zigbeeMessage"))
                            object.zigbeeMessage = $root.matrix_io.malos.v1.comm.ZigBeeMsg.toObject(message.zigbeeMessage, options);
                        if (message.lirc != null && message.hasOwnProperty("lirc"))
                            object.lirc = $root.matrix_io.malos.v1.comm.LircParams.toObject(message.lirc, options);
                        if (message.servo != null && message.hasOwnProperty("servo"))
                            object.servo = $root.matrix_io.malos.v1.io.ServoParams.toObject(message.servo, options);
                        if (message.gpio != null && message.hasOwnProperty("gpio"))
                            object.gpio = $root.matrix_io.malos.v1.io.GpioParams.toObject(message.gpio, options);
                        if (message.humidity != null && message.hasOwnProperty("humidity"))
                            object.humidity = $root.matrix_io.malos.v1.sense.HumidityParams.toObject(message.humidity, options);
                        if (message.micarray != null && message.hasOwnProperty("micarray"))
                            object.micarray = $root.matrix_io.malos.v1.io.MicArrayParams.toObject(message.micarray, options);
                        if (message.zwave != null && message.hasOwnProperty("zwave"))
                            object.zwave = $root.matrix_io.malos.v1.comm.ZWaveMsg.toObject(message.zwave, options);
                        if (message.wakeword != null && message.hasOwnProperty("wakeword"))
                            object.wakeword = $root.matrix_io.malos.v1.io.WakeWordParams.toObject(message.wakeword, options);
                        if (message.matrixDevice != null && message.hasOwnProperty("matrixDevice"))
                            object.matrixDevice = $root.matrix_io.malos.v1.io.MatrixDeviceParams.toObject(message.matrixDevice, options);
                        if (message.uuid != null && message.hasOwnProperty("uuid"))
                            object.uuid = message.uuid;
                        return object;
                    };

                    /**
                     * Converts this DriverConfig to JSON.
                     * @function toJSON
                     * @memberof matrix_io.malos.v1.driver.DriverConfig
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    DriverConfig.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return DriverConfig;
                })();

                driver.DriverInfo = (function() {

                    /**
                     * Properties of a DriverInfo.
                     * @memberof matrix_io.malos.v1.driver
                     * @interface IDriverInfo
                     * @property {string|null} [driverName] DriverInfo driverName
                     * @property {number|null} [basePort] DriverInfo basePort
                     * @property {boolean|null} [providesUpdates] DriverInfo providesUpdates
                     * @property {number|null} [delayBetweenUpdates] DriverInfo delayBetweenUpdates
                     * @property {boolean|null} [needsPings] DriverInfo needsPings
                     * @property {number|null} [timeoutAfterLastPing] DriverInfo timeoutAfterLastPing
                     * @property {string|null} [notesForHuman] DriverInfo notesForHuman
                     */

                    /**
                     * Constructs a new DriverInfo.
                     * @memberof matrix_io.malos.v1.driver
                     * @classdesc Represents a DriverInfo.
                     * @implements IDriverInfo
                     * @constructor
                     * @param {matrix_io.malos.v1.driver.IDriverInfo=} [properties] Properties to set
                     */
                    function DriverInfo(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * DriverInfo driverName.
                     * @member {string} driverName
                     * @memberof matrix_io.malos.v1.driver.DriverInfo
                     * @instance
                     */
                    DriverInfo.prototype.driverName = "";

                    /**
                     * DriverInfo basePort.
                     * @member {number} basePort
                     * @memberof matrix_io.malos.v1.driver.DriverInfo
                     * @instance
                     */
                    DriverInfo.prototype.basePort = 0;

                    /**
                     * DriverInfo providesUpdates.
                     * @member {boolean} providesUpdates
                     * @memberof matrix_io.malos.v1.driver.DriverInfo
                     * @instance
                     */
                    DriverInfo.prototype.providesUpdates = false;

                    /**
                     * DriverInfo delayBetweenUpdates.
                     * @member {number} delayBetweenUpdates
                     * @memberof matrix_io.malos.v1.driver.DriverInfo
                     * @instance
                     */
                    DriverInfo.prototype.delayBetweenUpdates = 0;

                    /**
                     * DriverInfo needsPings.
                     * @member {boolean} needsPings
                     * @memberof matrix_io.malos.v1.driver.DriverInfo
                     * @instance
                     */
                    DriverInfo.prototype.needsPings = false;

                    /**
                     * DriverInfo timeoutAfterLastPing.
                     * @member {number} timeoutAfterLastPing
                     * @memberof matrix_io.malos.v1.driver.DriverInfo
                     * @instance
                     */
                    DriverInfo.prototype.timeoutAfterLastPing = 0;

                    /**
                     * DriverInfo notesForHuman.
                     * @member {string} notesForHuman
                     * @memberof matrix_io.malos.v1.driver.DriverInfo
                     * @instance
                     */
                    DriverInfo.prototype.notesForHuman = "";

                    /**
                     * Creates a new DriverInfo instance using the specified properties.
                     * @function create
                     * @memberof matrix_io.malos.v1.driver.DriverInfo
                     * @static
                     * @param {matrix_io.malos.v1.driver.IDriverInfo=} [properties] Properties to set
                     * @returns {matrix_io.malos.v1.driver.DriverInfo} DriverInfo instance
                     */
                    DriverInfo.create = function create(properties) {
                        return new DriverInfo(properties);
                    };

                    /**
                     * Encodes the specified DriverInfo message. Does not implicitly {@link matrix_io.malos.v1.driver.DriverInfo.verify|verify} messages.
                     * @function encode
                     * @memberof matrix_io.malos.v1.driver.DriverInfo
                     * @static
                     * @param {matrix_io.malos.v1.driver.IDriverInfo} message DriverInfo message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DriverInfo.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.driverName != null && message.hasOwnProperty("driverName"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.driverName);
                        if (message.basePort != null && message.hasOwnProperty("basePort"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.basePort);
                        if (message.providesUpdates != null && message.hasOwnProperty("providesUpdates"))
                            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.providesUpdates);
                        if (message.delayBetweenUpdates != null && message.hasOwnProperty("delayBetweenUpdates"))
                            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.delayBetweenUpdates);
                        if (message.needsPings != null && message.hasOwnProperty("needsPings"))
                            writer.uint32(/* id 5, wireType 0 =*/40).bool(message.needsPings);
                        if (message.timeoutAfterLastPing != null && message.hasOwnProperty("timeoutAfterLastPing"))
                            writer.uint32(/* id 6, wireType 0 =*/48).int32(message.timeoutAfterLastPing);
                        if (message.notesForHuman != null && message.hasOwnProperty("notesForHuman"))
                            writer.uint32(/* id 7, wireType 2 =*/58).string(message.notesForHuman);
                        return writer;
                    };

                    /**
                     * Encodes the specified DriverInfo message, length delimited. Does not implicitly {@link matrix_io.malos.v1.driver.DriverInfo.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof matrix_io.malos.v1.driver.DriverInfo
                     * @static
                     * @param {matrix_io.malos.v1.driver.IDriverInfo} message DriverInfo message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DriverInfo.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a DriverInfo message from the specified reader or buffer.
                     * @function decode
                     * @memberof matrix_io.malos.v1.driver.DriverInfo
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {matrix_io.malos.v1.driver.DriverInfo} DriverInfo
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DriverInfo.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.malos.v1.driver.DriverInfo();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.driverName = reader.string();
                                break;
                            case 2:
                                message.basePort = reader.int32();
                                break;
                            case 3:
                                message.providesUpdates = reader.bool();
                                break;
                            case 4:
                                message.delayBetweenUpdates = reader.int32();
                                break;
                            case 5:
                                message.needsPings = reader.bool();
                                break;
                            case 6:
                                message.timeoutAfterLastPing = reader.int32();
                                break;
                            case 7:
                                message.notesForHuman = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a DriverInfo message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof matrix_io.malos.v1.driver.DriverInfo
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {matrix_io.malos.v1.driver.DriverInfo} DriverInfo
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DriverInfo.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a DriverInfo message.
                     * @function verify
                     * @memberof matrix_io.malos.v1.driver.DriverInfo
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    DriverInfo.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.driverName != null && message.hasOwnProperty("driverName"))
                            if (!$util.isString(message.driverName))
                                return "driverName: string expected";
                        if (message.basePort != null && message.hasOwnProperty("basePort"))
                            if (!$util.isInteger(message.basePort))
                                return "basePort: integer expected";
                        if (message.providesUpdates != null && message.hasOwnProperty("providesUpdates"))
                            if (typeof message.providesUpdates !== "boolean")
                                return "providesUpdates: boolean expected";
                        if (message.delayBetweenUpdates != null && message.hasOwnProperty("delayBetweenUpdates"))
                            if (!$util.isInteger(message.delayBetweenUpdates))
                                return "delayBetweenUpdates: integer expected";
                        if (message.needsPings != null && message.hasOwnProperty("needsPings"))
                            if (typeof message.needsPings !== "boolean")
                                return "needsPings: boolean expected";
                        if (message.timeoutAfterLastPing != null && message.hasOwnProperty("timeoutAfterLastPing"))
                            if (!$util.isInteger(message.timeoutAfterLastPing))
                                return "timeoutAfterLastPing: integer expected";
                        if (message.notesForHuman != null && message.hasOwnProperty("notesForHuman"))
                            if (!$util.isString(message.notesForHuman))
                                return "notesForHuman: string expected";
                        return null;
                    };

                    /**
                     * Creates a DriverInfo message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof matrix_io.malos.v1.driver.DriverInfo
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {matrix_io.malos.v1.driver.DriverInfo} DriverInfo
                     */
                    DriverInfo.fromObject = function fromObject(object) {
                        if (object instanceof $root.matrix_io.malos.v1.driver.DriverInfo)
                            return object;
                        var message = new $root.matrix_io.malos.v1.driver.DriverInfo();
                        if (object.driverName != null)
                            message.driverName = String(object.driverName);
                        if (object.basePort != null)
                            message.basePort = object.basePort | 0;
                        if (object.providesUpdates != null)
                            message.providesUpdates = Boolean(object.providesUpdates);
                        if (object.delayBetweenUpdates != null)
                            message.delayBetweenUpdates = object.delayBetweenUpdates | 0;
                        if (object.needsPings != null)
                            message.needsPings = Boolean(object.needsPings);
                        if (object.timeoutAfterLastPing != null)
                            message.timeoutAfterLastPing = object.timeoutAfterLastPing | 0;
                        if (object.notesForHuman != null)
                            message.notesForHuman = String(object.notesForHuman);
                        return message;
                    };

                    /**
                     * Creates a plain object from a DriverInfo message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof matrix_io.malos.v1.driver.DriverInfo
                     * @static
                     * @param {matrix_io.malos.v1.driver.DriverInfo} message DriverInfo
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    DriverInfo.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.driverName = "";
                            object.basePort = 0;
                            object.providesUpdates = false;
                            object.delayBetweenUpdates = 0;
                            object.needsPings = false;
                            object.timeoutAfterLastPing = 0;
                            object.notesForHuman = "";
                        }
                        if (message.driverName != null && message.hasOwnProperty("driverName"))
                            object.driverName = message.driverName;
                        if (message.basePort != null && message.hasOwnProperty("basePort"))
                            object.basePort = message.basePort;
                        if (message.providesUpdates != null && message.hasOwnProperty("providesUpdates"))
                            object.providesUpdates = message.providesUpdates;
                        if (message.delayBetweenUpdates != null && message.hasOwnProperty("delayBetweenUpdates"))
                            object.delayBetweenUpdates = message.delayBetweenUpdates;
                        if (message.needsPings != null && message.hasOwnProperty("needsPings"))
                            object.needsPings = message.needsPings;
                        if (message.timeoutAfterLastPing != null && message.hasOwnProperty("timeoutAfterLastPing"))
                            object.timeoutAfterLastPing = message.timeoutAfterLastPing;
                        if (message.notesForHuman != null && message.hasOwnProperty("notesForHuman"))
                            object.notesForHuman = message.notesForHuman;
                        return object;
                    };

                    /**
                     * Converts this DriverInfo to JSON.
                     * @function toJSON
                     * @memberof matrix_io.malos.v1.driver.DriverInfo
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    DriverInfo.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return DriverInfo;
                })();

                driver.MalosDriverInfo = (function() {

                    /**
                     * Properties of a MalosDriverInfo.
                     * @memberof matrix_io.malos.v1.driver
                     * @interface IMalosDriverInfo
                     * @property {Array.<matrix_io.malos.v1.driver.IDriverInfo>|null} [info] MalosDriverInfo info
                     */

                    /**
                     * Constructs a new MalosDriverInfo.
                     * @memberof matrix_io.malos.v1.driver
                     * @classdesc Represents a MalosDriverInfo.
                     * @implements IMalosDriverInfo
                     * @constructor
                     * @param {matrix_io.malos.v1.driver.IMalosDriverInfo=} [properties] Properties to set
                     */
                    function MalosDriverInfo(properties) {
                        this.info = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * MalosDriverInfo info.
                     * @member {Array.<matrix_io.malos.v1.driver.IDriverInfo>} info
                     * @memberof matrix_io.malos.v1.driver.MalosDriverInfo
                     * @instance
                     */
                    MalosDriverInfo.prototype.info = $util.emptyArray;

                    /**
                     * Creates a new MalosDriverInfo instance using the specified properties.
                     * @function create
                     * @memberof matrix_io.malos.v1.driver.MalosDriverInfo
                     * @static
                     * @param {matrix_io.malos.v1.driver.IMalosDriverInfo=} [properties] Properties to set
                     * @returns {matrix_io.malos.v1.driver.MalosDriverInfo} MalosDriverInfo instance
                     */
                    MalosDriverInfo.create = function create(properties) {
                        return new MalosDriverInfo(properties);
                    };

                    /**
                     * Encodes the specified MalosDriverInfo message. Does not implicitly {@link matrix_io.malos.v1.driver.MalosDriverInfo.verify|verify} messages.
                     * @function encode
                     * @memberof matrix_io.malos.v1.driver.MalosDriverInfo
                     * @static
                     * @param {matrix_io.malos.v1.driver.IMalosDriverInfo} message MalosDriverInfo message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MalosDriverInfo.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.info != null && message.info.length)
                            for (var i = 0; i < message.info.length; ++i)
                                $root.matrix_io.malos.v1.driver.DriverInfo.encode(message.info[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified MalosDriverInfo message, length delimited. Does not implicitly {@link matrix_io.malos.v1.driver.MalosDriverInfo.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof matrix_io.malos.v1.driver.MalosDriverInfo
                     * @static
                     * @param {matrix_io.malos.v1.driver.IMalosDriverInfo} message MalosDriverInfo message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MalosDriverInfo.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MalosDriverInfo message from the specified reader or buffer.
                     * @function decode
                     * @memberof matrix_io.malos.v1.driver.MalosDriverInfo
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {matrix_io.malos.v1.driver.MalosDriverInfo} MalosDriverInfo
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MalosDriverInfo.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.malos.v1.driver.MalosDriverInfo();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.info && message.info.length))
                                    message.info = [];
                                message.info.push($root.matrix_io.malos.v1.driver.DriverInfo.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MalosDriverInfo message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof matrix_io.malos.v1.driver.MalosDriverInfo
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {matrix_io.malos.v1.driver.MalosDriverInfo} MalosDriverInfo
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MalosDriverInfo.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MalosDriverInfo message.
                     * @function verify
                     * @memberof matrix_io.malos.v1.driver.MalosDriverInfo
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MalosDriverInfo.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.info != null && message.hasOwnProperty("info")) {
                            if (!Array.isArray(message.info))
                                return "info: array expected";
                            for (var i = 0; i < message.info.length; ++i) {
                                var error = $root.matrix_io.malos.v1.driver.DriverInfo.verify(message.info[i]);
                                if (error)
                                    return "info." + error;
                            }
                        }
                        return null;
                    };

                    /**
                     * Creates a MalosDriverInfo message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof matrix_io.malos.v1.driver.MalosDriverInfo
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {matrix_io.malos.v1.driver.MalosDriverInfo} MalosDriverInfo
                     */
                    MalosDriverInfo.fromObject = function fromObject(object) {
                        if (object instanceof $root.matrix_io.malos.v1.driver.MalosDriverInfo)
                            return object;
                        var message = new $root.matrix_io.malos.v1.driver.MalosDriverInfo();
                        if (object.info) {
                            if (!Array.isArray(object.info))
                                throw TypeError(".matrix_io.malos.v1.driver.MalosDriverInfo.info: array expected");
                            message.info = [];
                            for (var i = 0; i < object.info.length; ++i) {
                                if (typeof object.info[i] !== "object")
                                    throw TypeError(".matrix_io.malos.v1.driver.MalosDriverInfo.info: object expected");
                                message.info[i] = $root.matrix_io.malos.v1.driver.DriverInfo.fromObject(object.info[i]);
                            }
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a MalosDriverInfo message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof matrix_io.malos.v1.driver.MalosDriverInfo
                     * @static
                     * @param {matrix_io.malos.v1.driver.MalosDriverInfo} message MalosDriverInfo
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MalosDriverInfo.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.info = [];
                        if (message.info && message.info.length) {
                            object.info = [];
                            for (var j = 0; j < message.info.length; ++j)
                                object.info[j] = $root.matrix_io.malos.v1.driver.DriverInfo.toObject(message.info[j], options);
                        }
                        return object;
                    };

                    /**
                     * Converts this MalosDriverInfo to JSON.
                     * @function toJSON
                     * @memberof matrix_io.malos.v1.driver.MalosDriverInfo
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MalosDriverInfo.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MalosDriverInfo;
                })();

                driver.Status = (function() {

                    /**
                     * Properties of a Status.
                     * @memberof matrix_io.malos.v1.driver
                     * @interface IStatus
                     * @property {matrix_io.malos.v1.driver.Status.MessageType|null} [type] Status type
                     * @property {string|null} [uuid] Status uuid
                     * @property {string|null} [message] Status message
                     */

                    /**
                     * Constructs a new Status.
                     * @memberof matrix_io.malos.v1.driver
                     * @classdesc Represents a Status.
                     * @implements IStatus
                     * @constructor
                     * @param {matrix_io.malos.v1.driver.IStatus=} [properties] Properties to set
                     */
                    function Status(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Status type.
                     * @member {matrix_io.malos.v1.driver.Status.MessageType} type
                     * @memberof matrix_io.malos.v1.driver.Status
                     * @instance
                     */
                    Status.prototype.type = 0;

                    /**
                     * Status uuid.
                     * @member {string} uuid
                     * @memberof matrix_io.malos.v1.driver.Status
                     * @instance
                     */
                    Status.prototype.uuid = "";

                    /**
                     * Status message.
                     * @member {string} message
                     * @memberof matrix_io.malos.v1.driver.Status
                     * @instance
                     */
                    Status.prototype.message = "";

                    /**
                     * Creates a new Status instance using the specified properties.
                     * @function create
                     * @memberof matrix_io.malos.v1.driver.Status
                     * @static
                     * @param {matrix_io.malos.v1.driver.IStatus=} [properties] Properties to set
                     * @returns {matrix_io.malos.v1.driver.Status} Status instance
                     */
                    Status.create = function create(properties) {
                        return new Status(properties);
                    };

                    /**
                     * Encodes the specified Status message. Does not implicitly {@link matrix_io.malos.v1.driver.Status.verify|verify} messages.
                     * @function encode
                     * @memberof matrix_io.malos.v1.driver.Status
                     * @static
                     * @param {matrix_io.malos.v1.driver.IStatus} message Status message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Status.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.type != null && message.hasOwnProperty("type"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
                        if (message.uuid != null && message.hasOwnProperty("uuid"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.uuid);
                        if (message.message != null && message.hasOwnProperty("message"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.message);
                        return writer;
                    };

                    /**
                     * Encodes the specified Status message, length delimited. Does not implicitly {@link matrix_io.malos.v1.driver.Status.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof matrix_io.malos.v1.driver.Status
                     * @static
                     * @param {matrix_io.malos.v1.driver.IStatus} message Status message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Status.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a Status message from the specified reader or buffer.
                     * @function decode
                     * @memberof matrix_io.malos.v1.driver.Status
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {matrix_io.malos.v1.driver.Status} Status
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Status.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.matrix_io.malos.v1.driver.Status();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.type = reader.int32();
                                break;
                            case 2:
                                message.uuid = reader.string();
                                break;
                            case 3:
                                message.message = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a Status message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof matrix_io.malos.v1.driver.Status
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {matrix_io.malos.v1.driver.Status} Status
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Status.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a Status message.
                     * @function verify
                     * @memberof matrix_io.malos.v1.driver.Status
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Status.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.type != null && message.hasOwnProperty("type"))
                            switch (message.type) {
                            default:
                                return "type: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                            case 4:
                            case 5:
                            case 6:
                                break;
                            }
                        if (message.uuid != null && message.hasOwnProperty("uuid"))
                            if (!$util.isString(message.uuid))
                                return "uuid: string expected";
                        if (message.message != null && message.hasOwnProperty("message"))
                            if (!$util.isString(message.message))
                                return "message: string expected";
                        return null;
                    };

                    /**
                     * Creates a Status message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof matrix_io.malos.v1.driver.Status
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {matrix_io.malos.v1.driver.Status} Status
                     */
                    Status.fromObject = function fromObject(object) {
                        if (object instanceof $root.matrix_io.malos.v1.driver.Status)
                            return object;
                        var message = new $root.matrix_io.malos.v1.driver.Status();
                        switch (object.type) {
                        case "MESSAGE_TYPE_NOT_DEFINED":
                        case 0:
                            message.type = 0;
                            break;
                        case "STARTED":
                        case 1:
                            message.type = 1;
                            break;
                        case "STOPPED":
                        case 2:
                            message.type = 2;
                            break;
                        case "CONFIG_RECEIVED":
                        case 3:
                            message.type = 3;
                            break;
                        case "COMMAND_EXECUTED":
                        case 4:
                            message.type = 4;
                            break;
                        case "STATUS_ERROR":
                        case 5:
                            message.type = 5;
                            break;
                        case "STATUS_WARNING":
                        case 6:
                            message.type = 6;
                            break;
                        }
                        if (object.uuid != null)
                            message.uuid = String(object.uuid);
                        if (object.message != null)
                            message.message = String(object.message);
                        return message;
                    };

                    /**
                     * Creates a plain object from a Status message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof matrix_io.malos.v1.driver.Status
                     * @static
                     * @param {matrix_io.malos.v1.driver.Status} message Status
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Status.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.type = options.enums === String ? "MESSAGE_TYPE_NOT_DEFINED" : 0;
                            object.uuid = "";
                            object.message = "";
                        }
                        if (message.type != null && message.hasOwnProperty("type"))
                            object.type = options.enums === String ? $root.matrix_io.malos.v1.driver.Status.MessageType[message.type] : message.type;
                        if (message.uuid != null && message.hasOwnProperty("uuid"))
                            object.uuid = message.uuid;
                        if (message.message != null && message.hasOwnProperty("message"))
                            object.message = message.message;
                        return object;
                    };

                    /**
                     * Converts this Status to JSON.
                     * @function toJSON
                     * @memberof matrix_io.malos.v1.driver.Status
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Status.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    /**
                     * MessageType enum.
                     * @name matrix_io.malos.v1.driver.Status.MessageType
                     * @enum {string}
                     * @property {number} MESSAGE_TYPE_NOT_DEFINED=0 MESSAGE_TYPE_NOT_DEFINED value
                     * @property {number} STARTED=1 STARTED value
                     * @property {number} STOPPED=2 STOPPED value
                     * @property {number} CONFIG_RECEIVED=3 CONFIG_RECEIVED value
                     * @property {number} COMMAND_EXECUTED=4 COMMAND_EXECUTED value
                     * @property {number} STATUS_ERROR=5 STATUS_ERROR value
                     * @property {number} STATUS_WARNING=6 STATUS_WARNING value
                     */
                    Status.MessageType = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "MESSAGE_TYPE_NOT_DEFINED"] = 0;
                        values[valuesById[1] = "STARTED"] = 1;
                        values[valuesById[2] = "STOPPED"] = 2;
                        values[valuesById[3] = "CONFIG_RECEIVED"] = 3;
                        values[valuesById[4] = "COMMAND_EXECUTED"] = 4;
                        values[valuesById[5] = "STATUS_ERROR"] = 5;
                        values[valuesById[6] = "STATUS_WARNING"] = 6;
                        return values;
                    })();

                    return Status;
                })();

                return driver;
            })();

            return v1;
        })();

        return malos;
    })();

    return matrix_io;
})();

$root.google = (function() {

    /**
     * Namespace google.
     * @exports google
     * @namespace
     */
    var google = {};

    google.protobuf = (function() {

        /**
         * Namespace protobuf.
         * @memberof google
         * @namespace
         */
        var protobuf = {};

        protobuf.Timestamp = (function() {

            /**
             * Properties of a Timestamp.
             * @memberof google.protobuf
             * @interface ITimestamp
             * @property {number|Long|null} [seconds] Timestamp seconds
             * @property {number|null} [nanos] Timestamp nanos
             */

            /**
             * Constructs a new Timestamp.
             * @memberof google.protobuf
             * @classdesc Represents a Timestamp.
             * @implements ITimestamp
             * @constructor
             * @param {google.protobuf.ITimestamp=} [properties] Properties to set
             */
            function Timestamp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Timestamp seconds.
             * @member {number|Long} seconds
             * @memberof google.protobuf.Timestamp
             * @instance
             */
            Timestamp.prototype.seconds = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Timestamp nanos.
             * @member {number} nanos
             * @memberof google.protobuf.Timestamp
             * @instance
             */
            Timestamp.prototype.nanos = 0;

            /**
             * Creates a new Timestamp instance using the specified properties.
             * @function create
             * @memberof google.protobuf.Timestamp
             * @static
             * @param {google.protobuf.ITimestamp=} [properties] Properties to set
             * @returns {google.protobuf.Timestamp} Timestamp instance
             */
            Timestamp.create = function create(properties) {
                return new Timestamp(properties);
            };

            /**
             * Encodes the specified Timestamp message. Does not implicitly {@link google.protobuf.Timestamp.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.Timestamp
             * @static
             * @param {google.protobuf.ITimestamp} message Timestamp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Timestamp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.seconds != null && message.hasOwnProperty("seconds"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.seconds);
                if (message.nanos != null && message.hasOwnProperty("nanos"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nanos);
                return writer;
            };

            /**
             * Encodes the specified Timestamp message, length delimited. Does not implicitly {@link google.protobuf.Timestamp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.Timestamp
             * @static
             * @param {google.protobuf.ITimestamp} message Timestamp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Timestamp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Timestamp message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.Timestamp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.Timestamp} Timestamp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Timestamp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Timestamp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.seconds = reader.int64();
                        break;
                    case 2:
                        message.nanos = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Timestamp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.Timestamp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.Timestamp} Timestamp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Timestamp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Timestamp message.
             * @function verify
             * @memberof google.protobuf.Timestamp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Timestamp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.seconds != null && message.hasOwnProperty("seconds"))
                    if (!$util.isInteger(message.seconds) && !(message.seconds && $util.isInteger(message.seconds.low) && $util.isInteger(message.seconds.high)))
                        return "seconds: integer|Long expected";
                if (message.nanos != null && message.hasOwnProperty("nanos"))
                    if (!$util.isInteger(message.nanos))
                        return "nanos: integer expected";
                return null;
            };

            /**
             * Creates a Timestamp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.Timestamp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.Timestamp} Timestamp
             */
            Timestamp.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.Timestamp)
                    return object;
                var message = new $root.google.protobuf.Timestamp();
                if (object.seconds != null)
                    if ($util.Long)
                        (message.seconds = $util.Long.fromValue(object.seconds)).unsigned = false;
                    else if (typeof object.seconds === "string")
                        message.seconds = parseInt(object.seconds, 10);
                    else if (typeof object.seconds === "number")
                        message.seconds = object.seconds;
                    else if (typeof object.seconds === "object")
                        message.seconds = new $util.LongBits(object.seconds.low >>> 0, object.seconds.high >>> 0).toNumber();
                if (object.nanos != null)
                    message.nanos = object.nanos | 0;
                return message;
            };

            /**
             * Creates a plain object from a Timestamp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.Timestamp
             * @static
             * @param {google.protobuf.Timestamp} message Timestamp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Timestamp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.seconds = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.seconds = options.longs === String ? "0" : 0;
                    object.nanos = 0;
                }
                if (message.seconds != null && message.hasOwnProperty("seconds"))
                    if (typeof message.seconds === "number")
                        object.seconds = options.longs === String ? String(message.seconds) : message.seconds;
                    else
                        object.seconds = options.longs === String ? $util.Long.prototype.toString.call(message.seconds) : options.longs === Number ? new $util.LongBits(message.seconds.low >>> 0, message.seconds.high >>> 0).toNumber() : message.seconds;
                if (message.nanos != null && message.hasOwnProperty("nanos"))
                    object.nanos = message.nanos;
                return object;
            };

            /**
             * Converts this Timestamp to JSON.
             * @function toJSON
             * @memberof google.protobuf.Timestamp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Timestamp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Timestamp;
        })();

        return protobuf;
    })();

    return google;
})();

module.exports = $root;
